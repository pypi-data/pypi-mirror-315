import fastapi
from _typeshed import Incomplete
from config_server.cli import UserSelect as UserSelect
from config_server.utils import ValidationResult as ValidationResult, YamlResponse as YamlResponse, convert_text_to_comment as convert_text_to_comment, get_blank_repr_for_field as get_blank_repr_for_field
from pathlib import Path
from pydantic import BaseModel
from typing import Any

ui_html: Incomplete

class ConfigNode(BaseModel):
    __doc__: str
    @classmethod
    def get_title(cls) -> str: ...
    @classmethod
    def get_doc(cls) -> str: ...
    @classmethod
    def get_comment(cls) -> str: ...
    @property
    def doc(self): ...
    @property
    def title(self): ...
    @classmethod
    def model_validate_yaml(cls, yaml_path: Path | str, *, encoding: str = 'utf-8', strict: bool = None, context: dict[str, Any] = None) -> ConfigNode: ...
    @classmethod
    def mock(cls) -> ConfigNode: ...
    @classmethod
    def mock_with_default(cls) -> ConfigNode: ...
    @classmethod
    def mock_with_blank(cls) -> ConfigNode: ...
    @classmethod
    def mock_cli(cls) -> ConfigNode: ...
    def model_dump_yaml(self, *, comment: bool = False, indent: int = 2, include: list[str] = None, exclude: list[str] = None, by_alias: bool = False, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = False, round_trip: bool = False, warnings: bool = True) -> str: ...
    @classmethod
    def model_dump_mock_yaml(cls, *, comment: bool = True, indent: int = 2, by_alias: bool = False, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = False, round_trip: bool = False, warnings: bool = True) -> str: ...
    @classmethod
    def get_validate_result(cls, data: dict) -> ValidationResult: ...
    @classmethod
    def get_api_router(cls, prefix: str = '', html: str = '') -> fastapi.APIRouter: ...
    def verify_constraints(self) -> None: ...
    def edit_data_dict(self, data_dict: dict) -> None: ...
    def get_data_dict(self, init_data_dict: dict = None) -> dict: ...
