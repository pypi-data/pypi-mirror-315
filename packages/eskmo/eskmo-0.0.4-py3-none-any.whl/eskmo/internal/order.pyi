from eskmo.const.skcom import *
from _typeshed import Incomplete
from eskmo.base.interface import APIReferable as APIReferable
from eskmo.base.mvtype import API_CALLBACK_ID as API_CALLBACK_ID, BALANCE as BALANCE, EVENT_DATA as EVENT_DATA, FAIL as FAIL, LAST_REPLY as LAST_REPLY, MIT_BALANCE as MIT_BALANCE, MIT_ORDER as MIT_ORDER, PID as PID, SUCCESS as SUCCESS, SYMBOL_CODE as SYMBOL_CODE
from eskmo.const.event import E_ERRORS as E_ERRORS, E_MIT_ORDER_CHANGED as E_MIT_ORDER_CHANGED, E_NEW_MIT_ORDER_FAILED as E_NEW_MIT_ORDER_FAILED, E_NEW_MIT_ORDER_SUCCESS as E_NEW_MIT_ORDER_SUCCESS, E_NEW_ORDER_FAILED as E_NEW_ORDER_FAILED, E_NEW_ORDER_SUCCESS as E_NEW_ORDER_SUCCESS, E_ORDER_CHANGED as E_ORDER_CHANGED, E_SEND_MIT_ORDER_FAIL as E_SEND_MIT_ORDER_FAIL, E_SEND_MIT_ORDER_SUCCESS as E_SEND_MIT_ORDER_SUCCESS, E_SEND_ORDER_FAIL as E_SEND_ORDER_FAIL, E_SEND_ORDER_SUCCESS as E_SEND_ORDER_SUCCESS, NEW_ORDER_CHANGED_EVENT as NEW_ORDER_CHANGED_EVENT, NEW_ORDER_EVENTS as NEW_ORDER_EVENTS, SEND_ORDER_EVENTS as SEND_ORDER_EVENTS, SMART_ORDER_CHANGED_EVENTS as SMART_ORDER_CHANGED_EVENTS
from eskmo.internal.api import api as api
from eskmo.internal.const import OrderAction as OrderAction, OrderPriceType as OrderPriceType, SmartOrderFlag as SmartOrderFlag, SmartOrderLongEndBy as SmartOrderLongEndBy, SmartOrderOrderType as SmartOrderOrderType, SmartOrderTriggerDir as SmartOrderTriggerDir
from eskmo.internal.eventdata import ErrorsResult as ErrorsResult, MITOrderChangedResult as MITOrderChangedResult, MITOrderStatus as MITOrderStatus, OrderChangedResult as OrderChangedResult, OrderStatus as OrderStatus, PlaceResult as PlaceResult, SendResult as SendResult
from eskmo.internal.user import User as User
from eskmo.skcom.recipe import SKMITOrderRecipe as SKMITOrderRecipe, SKOrderRecipe as SKOrderRecipe
from eskmo.symbol.position import HANDLER_POSITION as HANDLER_POSITION, PositionHandler as PositionHandler
from eskmo.symbol.stock import StockInfo as StockInfo
from eskmo.utils.iterable import Iterable as Iterable
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import threadStart as threadStart
from typing import Callable

class Sendable:
    api: Incomplete
    serialNum: int
    recipe: Incomplete
    callbackId: Incomplete
    threadId: Incomplete
    seqNo: Incomplete
    isError: bool
    errors: Incomplete
    isPriceModified: bool
    isQtyModified: bool
    isCanceled: bool
    isSent: bool
    user: Incomplete
    isNewOrderPlaced: bool
    isNewOrderChanged: bool
    subscribeTagsMaps: Incomplete
    sendEventsMaps: Incomplete
    def __init__(self, api: api) -> None: ...
    @property
    def reply(self): ...
    def send(self, userId: Incomplete | None = None, accountId: Incomplete | None = None, isAsync: bool = False): ...
    def cancel(self, isAsync: bool = False): ...
    def modify_price(self, price, isAsync: bool = False): ...
    def decrease_qty(self, qty, isAsync: bool = False): ...
    def subscribeByRecipe(self, user: User, acconutId: str): ...
    def onWaitForSent(self, user: User, events: dict[str, str]): ...
    def onWaitForNewOrder(self, user: User, events: dict[str, str]): ...
    def updateErrors(self, errors) -> None: ...
    def clearErrors(self) -> None: ...
    def onOrderChanged(self, user: User): ...
    def onSmartOrderChanged(self, event: str, user: User): ...
    def onBeforeSend(self, user: User, sendOrderEvents: dict[str, str], newOrderEvents: dict[str, str], newOrderChangedEvent: str): ...
    def refreshStateOnReply(self, order: OrderStatus): ...
    def refreshStateOnSmartReply(self, order: MITOrderStatus): ...
    def waitForSent(self, sendOrderEvents: dict[str, str], user: User, onFunc: Callable): ...
    def waitForNewOrder(self, newOrderEvents: dict[str, str], user: User, onFunc: Callable): ...
    def waitForNewOrderChanged(self) -> None: ...
    def waitForCancelOrderChanged(self) -> None: ...
    def waitForModifyOrderPrice(self) -> None: ...
    def waitForModifyOrderQty(self) -> None: ...

class StockOrder(APIReferable, Sendable):
    recipe: Incomplete
    def __init__(self, api: api, account: str = '', symbol: str = '', prime: Incomplete | None = None, period: Incomplete | None = None, flag: Incomplete | None = None, action: Incomplete | None = None, price: Incomplete | None = None, qty: Incomplete | None = None, price_type: Incomplete | None = None, order_type: Incomplete | None = None) -> None: ...
    def save(self, order): ...
    def send(self, userId: Incomplete | None = None, accountId: Incomplete | None = None, isAsync: bool = False): ...
    def sendAsync(self, userId: Incomplete | None = None, accountId: Incomplete | None = None) -> None: ...
    @property
    def replys(self): ...
    @property
    def reply(self): ...
    @property
    def status(self): ...
    @property
    def price(self): ...
    @property
    def qty(self): ...
    @property
    def canceled_qty(self): ...
    @property
    def deal_qty(self): ...
    @property
    def remain_qty(self): ...

class SmartOrderRouter(APIReferable):
    info: Incomplete
    def __init__(self, api: api, info: StockInfo) -> None: ...
    def mit(self, buysell=..., price: Incomplete | None = None, qty: Incomplete | None = None, trigger_price: Incomplete | None = None, order_type=..., order_price_type=..., order_cond=..., trigger_dir=..., pre_risk_flag: bool = False, long_action_flag: bool = False, long_end_date: str = '', long_end_type=...): ...

class SmartOrder(APIReferable, Sendable):
    type: Incomplete
    recipe: Incomplete
    info: Incomplete
    def __init__(self, api: api, info: StockInfo) -> None: ...
    def mit(self, buysell=..., price: Incomplete | None = None, qty: Incomplete | None = None, trigger_price: Incomplete | None = None, order_type=..., order_price_type=..., order_cond=..., trigger_dir=..., pre_risk_flag: bool = False, long_action_flag: bool = False, long_end_date: str = '', long_end_type=...): ...

class MITOrder(SmartOrder):
    status: int

class StockOrderIterable(Iterable):
    def __init__(self, data: dict[str, StockOrder]) -> None: ...
    def __next__(self) -> StockOrder: ...

class Orders(APIReferable):
    orders: Incomplete
    def __init__(self, user: User, orders) -> None: ...
    def __getitem__(self, key): ...

class StockOrders(Orders):
    def __init__(self, user: User, orders: dict[str, StockOrder]) -> None: ...
    def __getitem__(self, key) -> StockOrder: ...
    def __iter__(self): ...
