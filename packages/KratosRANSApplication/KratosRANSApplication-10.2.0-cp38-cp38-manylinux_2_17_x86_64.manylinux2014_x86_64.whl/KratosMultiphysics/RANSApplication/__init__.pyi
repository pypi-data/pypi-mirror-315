import Kratos
from . import RansCalculationUtilities as RansCalculationUtilities, RansTestUtilities as RansTestUtilities, RansVariableUtilities as RansVariableUtilities
from typing import overload

class AlgebraicFluxCorrectedSteadyScalarScheme(Kratos.Scheme):
    @overload
    def __init__(self, arg0: float, arg1: Kratos.Flags) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: Kratos.Flags, arg2: Kratos.IntegerVariable) -> None: ...

class BossakRelaxationScalarScheme(Kratos.Scheme):
    def __init__(self, arg0: float, arg1: float, arg2: Kratos.DoubleVariable) -> None: ...

class KratosRANSApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class RansApplyExactNodalPeriodicConditionProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansApplyFlagToSkinProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansClipScalarVariableProcess(RansFormulationProcess):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansComputeReactionsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansEpsilonTurbulentMixingLengthInletProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansFormulationProcess(Kratos.Process):
    def __init__(self) -> None: ...
    def ExecuteAfterCouplingSolveStep(self) -> None: ...
    def ExecuteBeforeCouplingSolveStep(self) -> None: ...

class RansKTurbulentIntensityInletProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansLineOutputProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansNutKEpsilonUpdateProcess(RansFormulationProcess):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: str, arg2: float, arg3: int) -> None: ...

class RansNutKOmegaSSTUpdateProcess(RansFormulationProcess):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: str, arg2: float, arg3: int) -> None: ...

class RansNutKOmegaUpdateProcess(RansFormulationProcess):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: str, arg2: float, arg3: int) -> None: ...

class RansNutNodalUpdateProcess(RansFormulationProcess):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: str, arg2: int) -> None: ...

class RansNutYPlusWallFunctionUpdateProcess(RansFormulationProcess):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: str, arg2: float, arg3: int) -> None: ...

class RansOmegaTurbulentMixingLengthInletProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansWallDistanceCalculationProcess(RansFormulationProcess):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class RansWallFunctionUpdateProcess(RansFormulationProcess):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: str, arg2: int) -> None: ...

class ScalarVariableDifferenceNormCalculationUtility:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable) -> None: ...
    def CalculateDifferenceNorm(self) -> tuple[float, float]: ...
    def InitializeCalculation(self) -> None: ...

class SteadyScalarScheme(Kratos.Scheme):
    def __init__(self, arg0: float) -> None: ...
