# generated by datamodel-codegen:
#   filename:  sacct_tst.json

from __future__ import annotations

from pydantic import BaseModel

from slurm_viewer.data.common_types import Number


class Comment(BaseModel):
    administrator: str
    job: str
    system: str


class Running(BaseModel):
    tasks: int


class Max(BaseModel):
    running: Running


class Limits(BaseModel):
    max: Max


class Array(BaseModel):
    job_id: int
    limits: Limits
    task_id: Number
    task: str


class Association(BaseModel):
    account: str
    cluster: str
    partition: str
    user: str


class DerivedExitCode(BaseModel):
    status: str
    return_code: int


class System(BaseModel):
    seconds: int
    microseconds: int


class Total(System):
    pass


class User(System):
    pass


class Time(BaseModel):
    elapsed: int
    end: int
    start: int
    suspended: int
    system: System
    total: Total
    user: User
    eligible: int = 0
    submission: int = 0
    limit: Number = Number()


class ExitCode(DerivedExitCode):
    pass


class Het(BaseModel):
    job_id: int
    job_offset: Number


class Mcs(BaseModel):
    label: str


class Required(BaseModel):
    CPUs: int
    memory_per_cpu: Number
    memory_per_node: Number
    memory: int


class Reservation(BaseModel):
    id: int
    name: str


class State(BaseModel):
    current: str
    reason: str


class Nodes(BaseModel):
    count: int
    range: str
    list: list[str]


class Tasks(BaseModel):
    count: int


class RequestedFrequency(BaseModel):
    min: Number
    max: Number


class CPU(BaseModel):
    requested_frequency: RequestedFrequency
    governor: str


class CPU1(BaseModel):
    actual_frequency: int


class Energy(BaseModel):
    consumed: Number


class Statistics(BaseModel):
    CPU: CPU1
    energy: Energy


class Id(BaseModel):
    job_id: int
    step_id: str


class Task(BaseModel):
    distribution: str


class MaxItem(BaseModel):
    type: str
    name: str
    id: int
    count: int
    task: int
    node: str


class MinItem(MaxItem):
    pass


class AverageItem(BaseModel):
    type: str
    name: str
    id: int
    count: int


class TotalItem(AverageItem):
    pass


class Requested(BaseModel):
    max: list[MaxItem]
    min: list[MinItem]
    average: list[AverageItem]
    total: list[TotalItem]


class Consumed1(Requested):
    pass


class AllocatedItem(AverageItem):
    pass


class Tres(BaseModel):
    requested: Requested
    consumed: Consumed1
    allocated: list[AllocatedItem]


class Step1(BaseModel):
    id: Id
    name: str


class Step(BaseModel):
    time: Time
    exit_code: ExitCode
    nodes: Nodes
    tasks: Tasks
    pid: str
    CPU: CPU
    kill_request_user: str
    state: str
    statistics: Statistics
    step: Step1
    task: Task
    tres: Tres


class RequestedItem(AverageItem):
    pass


class Tres1(BaseModel):
    allocated: list[AllocatedItem]
    requested: list[RequestedItem]


class Wckey(BaseModel):
    wckey: str
    flags: list


class JobModel(BaseModel):
    account: str
    comment: Comment
    allocation_nodes: int
    array: Array
    association: Association
    block: str
    cluster: str
    constraints: str
    container: str
    derived_exit_code: DerivedExitCode
    time: Time
    exit_code: ExitCode
    extra: str
    failed_node: str
    flags: list[str]
    group: str
    het: Het
    job_id: int
    name: str
    licenses: str
    mcs: Mcs
    nodes: str
    partition: str
    hold: bool
    priority: Number
    qos: str
    required: Required
    kill_request_user: str
    reservation: Reservation
    script: str
    state: State
    steps: list[Step]
    submit_line: str
    tres: Tres1
    used_gres: str
    user: str
    wckey: Wckey
    working_directory: str
