algorithms:
  - name: "pagerank"
    func: "networkx.pagerank"
    params:
      alpha: 0.9
      tol: 1.0e-6
    requires_directed: false
    groups: ["centrality", "random_walk"]
    min_rounds: 10
    warmup: true
    warmup_iterations: 50

  - name: "eigenvector_centrality"
    func: "networkx.eigenvector_centrality"
    requires_directed: false
    groups: ["centrality", "path_based"]
    min_rounds: 5
    warmup: true
    warmup_iterations: 20
    validate_result: "nxbench.validation.validate_node_scores"

  # - name: "betweenness_centrality"
  #   func: "networkx.betweenness_centrality"
  #   params:
  #     normalized: true
  #     endpoints: false
  #   requires_directed: false
  #   groups: ["centrality", "path_based"]
  #   min_rounds: 5
  #   warmup: true
  #   warmup_iterations: 20
  #   validate_result: "nxbench.validation.validate_node_scores"

  # - name: "edge_betweenness_centrality"
  #   func: "networkx.edge_betweenness_centrality"
  #   params:
  #     normalized: true
  #   requires_directed: false
  #   groups: ["centrality", "path_based"]
  #   min_rounds: 5
  #   warmup: true
  #   warmup_iterations: 20
  #   validate_result: "nxbench.validation.validate_edge_scores"

  # - name: "approximate_all_pairs_node_connectivity"
  #   func: "networkx.algorithms.approximation.connectivity.all_pairs_node_connectivity"
  #   params: {}
  #   requires_directed: false
  #   groups: ["connectivity", "approximation"]
  #   min_rounds: 3

  - name: "average_clustering"
    func: "networkx.average_clustering"
    params: {}
    requires_directed: false
    groups: ["clustering", "graph_structure"]
    min_rounds: 3
    validate_result: "nxbench.validation.validate_scalar_result"

  - name: "square_clustering"
    func: "networkx.square_clustering"
    params: {}
    requires_directed: false
    groups: ["clustering", "graph_structure"]
    min_rounds: 3
    validate_result: "nxbench.validation.validate_node_scores"

  - name: "transitivity"
    func: "networkx.transitivity"
    params: {}
    requires_directed: false
    groups: ["clustering", "graph_structure"]
    min_rounds: 3
    validate_result: "nxbench.validation.validate_scalar_result"

  # - name: "all_pairs_node_connectivity"
  #   func: "networkx.algorithms.connectivity.connectivity.all_pairs_node_connectivity"
  #   params: {}
  #   requires_directed: false
  #   groups: ["connectivity", "paths"]
  #   min_rounds: 3

  # - name: "local_efficiency"
  #   func: "networkx.local_efficiency"
  #   params: {}
  #   requires_directed: false
  #   groups: ["efficiency", "graph_measure"]
  #   min_rounds: 3
  #   validate_result: "nxbench.validation.validate_node_scores"

  - name: "number_of_isolates"
    func: "networkx.number_of_isolates"
    params: {}
    requires_directed: false
    groups: ["isolates", "graph_measure"]
    min_rounds: 3

  # - name: "all_pairs_all_shortest_paths"
  #   func: "networkx.all_pairs_all_shortest_paths"
  #   params:
  #     weight: "weight"
  #   requires_directed: false
  #   groups: ["paths", "all_pairs"]
  #   min_rounds: 3

  # - name: "all_pairs_shortest_path_length"
  #   func: "networkx.all_pairs_shortest_path_length"
  #   params: {}
  #   requires_directed: false
  #   groups: ["paths", "distance"]
  #   min_rounds: 3
  #   validate_result: "nxbench.validation.validate_scalar_result"

  # - name: "all_pairs_shortest_path"
  #   func: "networkx.all_pairs_shortest_path"
  #   params: {}
  #   requires_directed: false
  #   groups: ["paths", "distance"]
  #   min_rounds: 3

  # - name: "all_pairs_dijkstra"
  #   func: "networkx.all_pairs_dijkstra"
  #   params:
  #     weight: "weight"
  #   requires_directed: false
  #   groups: ["paths", "weighted"]
  #   min_rounds: 3

  - name: "all_pairs_dijkstra_path_length"
    func: "networkx.all_pairs_dijkstra_path_length"
    params:
      weight: "weight"
    requires_directed: false
    groups: ["paths", "weighted"]
    min_rounds: 3
    validate_result: "nxbench.validation.validate_scalar_result"

  - name: "all_pairs_bellman_ford_path_length"
    func: "networkx.all_pairs_bellman_ford_path_length"
    params:
      weight: "weight"
    requires_directed: false
    groups: ["paths", "weighted"]
    min_rounds: 3
    validate_result: "nxbench.validation.validate_scalar_result"

  # - name: "johnson"
  #   func: "networkx.johnson"
  #   params:
  #     weight: "weight"
  #   requires_directed: false
  #   groups: ["paths", "weighted"]
  #   min_rounds: 3

  # - name: "closeness_vitality"
  #   func: "networkx.closeness_vitality"
  #   params: {}
  #   requires_directed: false
  #   groups: ["vitality", "centrality"]
  #   min_rounds: 3

datasets:
  # - name: "08blocks"
  #   source: "networkrepository"
  #   params: {}

  # - name: "karate"
  #   source: "networkrepository"
  #   params: {}

  # - name: "jazz"
  #   source: "networkrepository"
  #   params: {}

  - name: "erdos_renyi_small"
    source: "generator"
    params:
      generator: "networkx.erdos_renyi_graph"
      n: 1000
      p: 0.01
    metadata:
      directed: false
      weighted: false

  # - name: "watts_strogatz_medium"
  #   source: "generator"
  #   params:
  #     generator: "networkx.watts_strogatz_graph"
  #     n: 10000
  #     k: 6
  #     p: 0.1
  #   metadata:
  #     directed: false
  #     weighted: false

  - name: "barabasi_albert_small"
    source: "generator"
    params:
      generator: "networkx.barabasi_albert_graph"
      n: 1000
      m: 3
    metadata:
      directed: false
      weighted: false

  # - name: "barabasi_albert_large"
  #   source: "generator"
  #   params:
  #     generator: "networkx.barabasi_albert_graph"
  #     n: 100000
  #     m: 3
  #   metadata:
  #     directed: false
  #     weighted: false

  - name: "powerlaw_cluster"
    source: "generator"
    params:
      generator: "networkx.powerlaw_cluster_graph"
      n: 1000
      m: 2
      p: 0.1
    metadata:
      directed: false
      weighted: false

validation:
  skip_slow: false
  validate_all: true
  error_on_fail: true
  report_memory: true

matrix:
  backend:
    - "networkx"
    - "parallel"
    - "graphblas"
  num_threads:
    - "1"
    - "4"
    - "8"

env_config:
  req:
    - "networkx==3.4.2"
    - "nx-parallel-0.3rc0.dev0"
    - "graphblas_algorithms==2023.10.0"
  pythons:
    - "3.10"
    - "3.11"
