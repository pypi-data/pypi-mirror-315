"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .alertevent import Alertevent, AlerteventTypedDict
from .extraction import Extraction, ExtractionTypedDict
from .latency import Latency, LatencyTypedDict
from .principal import Principal, PrincipalTypedDict
from acuvity.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from datetime import datetime
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Decision(str, Enum):
    r"""Tell what was the decision about the data."""

    DENY = "Deny"
    ALLOW = "Allow"
    ASK = "Ask"
    BYPASSED = "Bypassed"
    FORBIDDEN_USER = "ForbiddenUser"


class ScanresponseType(str, Enum):
    r"""The type of text."""

    INPUT = "Input"
    OUTPUT = "Output"


class ScanresponseTypedDict(TypedDict):
    r"""This is a scan response."""

    principal: PrincipalTypedDict
    r"""Describe the principal."""
    id: NotRequired[str]
    r"""ID is the identifier of the object."""
    alerts: NotRequired[List[AlerteventTypedDict]]
    r"""List of alerts that got raised during the policy resolution."""
    annotations: NotRequired[Dict[str, str]]
    r"""Annotations attached to the log."""
    decision: NotRequired[Decision]
    r"""Tell what was the decision about the data."""
    extractions: NotRequired[List[ExtractionTypedDict]]
    r"""The extractions to log."""
    hash: NotRequired[str]
    r"""The hash of the input."""
    latency: NotRequired[LatencyTypedDict]
    r"""Holds information about latencies introduced by Apex."""
    namespace: NotRequired[str]
    r"""The namespace of the object."""
    pipeline_name: NotRequired[str]
    r"""The name of the particular pipeline that extracted the text."""
    provider: NotRequired[str]
    r"""the provider to use."""
    reasons: NotRequired[List[str]]
    r"""The various reasons returned by the policy engine."""
    time: NotRequired[Nullable[datetime]]
    r"""Set the time of the message request."""
    type: NotRequired[ScanresponseType]
    r"""The type of text."""


class Scanresponse(BaseModel):
    r"""This is a scan response."""

    principal: Principal
    r"""Describe the principal."""

    id: Annotated[Optional[str], pydantic.Field(alias="ID")] = None
    r"""ID is the identifier of the object."""

    alerts: Optional[List[Alertevent]] = None
    r"""List of alerts that got raised during the policy resolution."""

    annotations: Optional[Dict[str, str]] = None
    r"""Annotations attached to the log."""

    decision: Optional[Decision] = None
    r"""Tell what was the decision about the data."""

    extractions: Optional[List[Extraction]] = None
    r"""The extractions to log."""

    hash: Optional[str] = None
    r"""The hash of the input."""

    latency: Optional[Latency] = None
    r"""Holds information about latencies introduced by Apex."""

    namespace: Optional[str] = None
    r"""The namespace of the object."""

    pipeline_name: Annotated[Optional[str], pydantic.Field(alias="pipelineName")] = None
    r"""The name of the particular pipeline that extracted the text."""

    provider: Optional[str] = None
    r"""the provider to use."""

    reasons: Optional[List[str]] = None
    r"""The various reasons returned by the policy engine."""

    time: OptionalNullable[datetime] = UNSET
    r"""Set the time of the message request."""

    type: Optional[ScanresponseType] = None
    r"""The type of text."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "ID",
            "alerts",
            "annotations",
            "decision",
            "extractions",
            "hash",
            "latency",
            "namespace",
            "pipelineName",
            "provider",
            "reasons",
            "time",
            "type",
        ]
        nullable_fields = ["time"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
