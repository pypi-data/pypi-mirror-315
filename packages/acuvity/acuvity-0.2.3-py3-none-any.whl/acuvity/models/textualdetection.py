"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from acuvity.types import BaseModel
from enum import Enum
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class TextualdetectionType(str, Enum):
    r"""The type of detection."""

    KEYWORD = "Keyword"
    PII = "PII"
    SECRET = "Secret"


class TextualdetectionTypedDict(TypedDict):
    r"""Represents a textual detection done by policy."""

    end: NotRequired[int]
    r"""The end position of the detection."""
    key: NotRequired[str]
    r"""The key that is used in the name's place, If empty, a sequence of X's are used."""
    name: NotRequired[str]
    r"""The name of the detection."""
    score: NotRequired[float]
    r"""The confidence score of the detection."""
    start: NotRequired[int]
    r"""The start position of the detection."""
    type: NotRequired[TextualdetectionType]
    r"""The type of detection."""


class Textualdetection(BaseModel):
    r"""Represents a textual detection done by policy."""

    end: Optional[int] = None
    r"""The end position of the detection."""

    key: Optional[str] = None
    r"""The key that is used in the name's place, If empty, a sequence of X's are used."""

    name: Optional[str] = None
    r"""The name of the detection."""

    score: Optional[float] = None
    r"""The confidence score of the detection."""

    start: Optional[int] = None
    r"""The start position of the detection."""

    type: Optional[TextualdetectionType] = None
    r"""The type of detection."""
