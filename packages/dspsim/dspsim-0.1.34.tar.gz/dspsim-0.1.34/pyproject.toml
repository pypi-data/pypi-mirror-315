[build-system]
requires = [
    "scikit-build-core>=0.10.7",
    "nanobind>=2.4.0",
    "verilator-dspsim==5.30.0",
    "numpy>=2.1.3",
    "jinja2>=3.1.4",
    "dataclass-wizard[toml]>=0.30.1",
]
build-backend = "scikit_build_core.build"

[project]
name = "dspsim"
dynamic = ["version"]
description = "Add your description here"
readme = "README.md"
authors = [{ name = "Frank" }]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = [
    "scikit-build-core>=0.10.7",
    "nanobind>=2.4.0",
    "jinja2>=3.1.4",
    "numpy>=2.1.3",
    "dataclass-wizard[toml]>=0.30.1",
]
requires-python = ">=3.12"

[project.urls]
Homepage = "https://github.com/fsodari/dspsim"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "src/dspsim/__init__.py"

# Scripts.
[project.scripts]
dspsim = "dspsim.main:main"

# # Use 
# [[tool.uv.index]]
# name = "abiesdsp"
# url = "https://pypi.abiesdsp.com/simple"
# explicit = true

# [tool.uv.sources]
# verilator-dspsim = { index = "abiesdsp" }


### dspsim tool configuration ###

[tool.dspsim]
sources = ["src/dspsim/hdl/*.sv", "src/dspsim/hdl/*.v"]
# sources = ["src/dspsim/hdl/FifoAsync.sv"]
trace = "vcd"

# include_dirs = ["src/dspsim/hdl"] # this is already included.
[tool.dspsim.parameters]
DW = 24
AW = 32
COEFW = 18
COEFQ = 16

[tool.dspsim.models]
AsyncSync8 = { name = "AsyncSync8", source = "AsyncSync.sv", parameters = { DW = 8 } }
FifoAsync8 = { name = "FifoAsync8", source = "FifoAsync.sv", parameters = { DW = 8 } }
# AnotherModel = { source = "Foo.sv", parameters = { COEFW = 16, BAERR = 22 } }
# # ###

[tool.scikit-build]
# Use the package's package config when building.
cmake.args = ["-Wno-dev"]
cmake.build-type = "Release"

minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"

wheel.packages = ["src/dspsim"]
# wheel.install-dir = "dspsim"
wheel.py-api = "cp312"


[dependency-groups]
dev = [
    "pytest>=8.3.3",
    "scikit-build-core>=0.10.7",
    "nanobind>=2.4.0",
    "verilator-dspsim==5.30.0",
    "numpy>=2.1.3",
    "dataclass-wizard[toml]>=0.30.1",
    "ruff>=0.8.3",
]
verilator = ["verilator-dspsim>=5.30.2"]

### cibuildwheel configuration
# [tool.cibuildwheel]
# test-requires = "pytest"
# test-command = "pytest {project}/tests"

[tool.cibuildwheel]
# # Run pytest to ensure that the package was correctly built
test-command = "pytest {project}/tests/test_framework.py"
test-requires = "pytest"
build-verbosity = 1
# 64 bit builds
archs = ["auto64"]


build = ["cp312-*"]
# Don't build arm. Use only > cp39, no PyPy. Not using musl anywhere so no musl (it works though?)
skip = ["*-win_arm64", "*musllinux*"]
# manylinux-x86_64-image = "quay.io/pypa/manylinux2010_x86_64:latest"
# manylinux-x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64"
# manylinux-x86_64-image = "manylinux_2_24"
# # manylinux builds
[tool.cibuildwheel.linux]
before-all = [
    # "yum install perl",
    # "yum install -y flex",
    # "yum install -y bison",
    # "yum install -y ccache",
]

# # musllinux builds
# [[tool.cibuildwheel.overrides]]
# select = "*-musllinux*"
# before-all = [
#     "apk add flex",
#     "apk add flex-dev",
#     "apk add bison",
#     "apk add ccache",
# ]
