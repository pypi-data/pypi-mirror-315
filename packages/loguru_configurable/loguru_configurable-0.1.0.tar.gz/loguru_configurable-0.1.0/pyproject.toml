[tool.poetry]
authors = [
  "Stockwatchdevs <stockwatchdevs@gmail.com>",
]
description = "Wrapper that adds an application_settings ConfigSection to loguru"
name = "loguru_configurable"
packages = [{include = "loguru_configurable", from = "src"}]
readme = "README.md"
version = "0.1.0"

[tool.poetry.dependencies]
application-settings = ">=0.5"
loguru = ">=0.7"
loguru-config = ">=0.1"
loguru-logging-intercept = ">=0.1"
python = ">=3.12,<4.0"

[tool.poetry.group.testing]
optional = true

[tool.poetry.group.testing.dependencies]
pytest = ">=7.0"
pytest-cov = ">=4.0.0"

[tool.poetry.group.testrunner]
optional = true

[tool.poetry.group.testrunner.dependencies]
tox = ">=4.4.7"

[tool.poetry.group.style]
optional = true

[tool.poetry.group.style.dependencies]
black = ">=23.1.0"
isort = ">=5.12.0"
pylint = ">=3.0"

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
mypy = "^1.1.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = ">=1.5"
mkdocs-gen-files = ">=0.5"
mkdocs-include-markdown-plugin = ">=6.0"
mkdocs-literate-nav = ">=0.6"
mkdocs-material = ">=9.2"
mkdocstrings-python = ">=1.5"
pymdown-extensions = ">=10.1"
# mkdocs-with-pdf = ">=0.9"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.pylint.MAIN]
load-plugins = [
  "pylint.extensions.bad_builtin",
  "pylint.extensions.code_style",
  "pylint.extensions.typing",
  "pylint.extensions.no_self_use",
]

[tool.pylint.messages_control]
# Reasons disabled:
# format - handled by black
# wrong-import-order - isort guards this
# fixme - too handy for now
# consider-using-f-string - str.format sometimes more readable
# broad-except - general exceptions are acceptable
# ---
# Enable once current issues are fixed:
disable = [
  "fixme",
  "format",
  "wrong-import-order",
  "broad-except",
]
enable = [
  "useless-suppression", # temporarily every now and then to clean them up
  "use-symbolic-message-instead",
]

[tool.pylint.TYPECHECK]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.similarities]
ignore-imports = "yes"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "pyramid",
]

[tool.isort]
line_length = 119
profile = "black"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
show_error_context = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.black]
line-length = 119

[tool.tox]
legacy_tox_ini = """
# Tox configuration file
# Read more under https://tox.readthedocs.org/
[tox]
isolated_build = true

envlist =
    py{312}
    style
    typing

[testenv]
allowlist_externals = poetry
skip_install = true
commands_pre =
    poetry install --with testing -v
commands =
    poetry run pytest --cov-report xml:coverage.xml --cov-report term-missing --cov=loguru_configurable tests/ --import-mode importlib

[testenv:style]
skip_install = true
commands_pre =
    poetry install --with style -v
commands =
    poetry run isort src --diff --check --color
    poetry run black src --diff --check --color
    poetry run pylint ./src

[testenv:typing]
skip_install = true
commands_pre =
    poetry install --with typing -v
commands =
    poetry run mypy src
"""
