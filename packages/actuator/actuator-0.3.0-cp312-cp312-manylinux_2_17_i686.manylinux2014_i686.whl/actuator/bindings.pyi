# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing

class PyRobstrideActuator:
    def __new__(cls,ports:typing.Sequence[str], py_actuators_config:typing.Sequence[tuple[int, PyRobstrideActuatorConfig]], polling_interval:float): ...
    def command_actuators(self, commands:typing.Sequence[PyRobstrideActuatorCommand]) -> list[bool]:
        ...

    def configure_actuator(self, config:PyRobstrideConfigureRequest) -> bool:
        ...

    def get_actuators_state(self, actuator_ids:typing.Sequence[int]) -> list[PyRobstrideActuatorState]:
        ...


class PyRobstrideActuatorCommand:
    actuator_id: int
    position: typing.Optional[float]
    velocity: typing.Optional[float]
    torque: typing.Optional[float]
    def __new__(cls,actuator_id:int): ...

class PyRobstrideActuatorConfig:
    actuator_type: int
    max_angle_change: typing.Optional[float]
    max_velocity: typing.Optional[float]
    def __new__(cls,actuator_type:int): ...

class PyRobstrideActuatorState:
    actuator_id: int
    online: bool
    position: typing.Optional[float]
    velocity: typing.Optional[float]
    torque: typing.Optional[float]
    temperature: typing.Optional[float]

class PyRobstrideConfigureRequest:
    actuator_id: int
    kp: typing.Optional[float]
    kd: typing.Optional[float]
    max_torque: typing.Optional[float]
    torque_enabled: typing.Optional[bool]
    zero_position: typing.Optional[bool]
    new_actuator_id: typing.Optional[int]
    def __new__(cls,actuator_id:int): ...

def get_version() -> str:
    ...

