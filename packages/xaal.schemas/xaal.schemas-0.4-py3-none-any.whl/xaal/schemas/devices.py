"""
Autogenerated devices skeletons. This file is generated from the json schemas 
at  https://redmine.telecom-bretagne.eu/svn/xaal/schemas/branches/schemas-0.7

This python module is updated frequently according to schemas
"""

import logging
from typing import Optional

from xaal.lib import Device, tools
from xaal.lib.bindings import UUID

logger = logging.getLogger(__name__)



#=====================================================================
def barometer(addr: Optional[UUID] = None) -> Device:
    """Simple barometer"""
    addr = addr or tools.get_random_uuid()
    dev = Device('barometer.basic',addr)
    
    # -- Attributes --
    # Atmospheric pressure | type: data = number | unit: mbar
    dev.new_attribute('pressure')
    return dev

#=====================================================================
def basic(addr: Optional[UUID] = None) -> Device:
    """Generic schema for any devices"""
    addr = addr or tools.get_random_uuid()
    dev = Device('basic.basic',addr)
    return dev

#=====================================================================
def battery(addr: Optional[UUID] = None) -> Device:
    """Report on state of a battery"""
    addr = addr or tools.get_random_uuid()
    dev = Device('battery.basic',addr)
    
    # -- Attributes --
    # Battery energy level | type: data = (0..100) / (0.0..100.0) | unit: %EL
    dev.new_attribute('level')
    # List of devices concerned with this battery | type: data = [ * #6.37(bstr .size 16) ]
    dev.new_attribute('devices')
    return dev

#=====================================================================
def button(addr: Optional[UUID] = None) -> Device:
    """Simple button device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('button.basic',addr)
    return dev

#=====================================================================
def button_remote(addr: Optional[UUID] = None) -> Device:
    """Simple remote device with several buttons"""
    addr = addr or tools.get_random_uuid()
    dev = Device('button.remote',addr)

    # -- Methods --
    def default_get_buttons():
        """Return the list of buttons"""
        logger.warning("default_get_buttons()")
        
    dev.add_method('get_buttons',default_get_buttons)
    
    return dev

#=====================================================================
def cache(addr: Optional[UUID] = None) -> Device:
    """Simple cache that can be queried about attributes of devices"""
    addr = addr or tools.get_random_uuid()
    dev = Device('cache.basic',addr)

    # -- Methods --
    def default_get_device_attributes(_device=None,_attributes=None):
        """Get attributes of a device in cache with last values and dates"""
        logger.warning("default_get_device_attributes(device=[%s],attributes=[%s],)" % (_device,_attributes))
        
    dev.add_method('get_device_attributes',default_get_device_attributes)
    
    return dev

#=====================================================================
def co2meter(addr: Optional[UUID] = None) -> Device:
    """Simple CO2 meter"""
    addr = addr or tools.get_random_uuid()
    dev = Device('co2meter.basic',addr)
    
    # -- Attributes --
    # CO2 | type: data = uint | unit: ppm
    dev.new_attribute('co2')
    return dev

#=====================================================================
def contact(addr: Optional[UUID] = None) -> Device:
    """Simple contact-sensor device; e.g. door or window opening sensor"""
    addr = addr or tools.get_random_uuid()
    dev = Device('contact.basic',addr)
    
    # -- Attributes --
    # Detection status of the contact sensor | type: data = bool
    dev.new_attribute('detected')
    return dev

#=====================================================================
def door(addr: Optional[UUID] = None) -> Device:
    """Simple door device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('door.basic',addr)
    
    # -- Attributes --
    # Position of the door (true=open false=close) | type: data = bool
    dev.new_attribute('position')

    # -- Methods --
    def default_open():
        """Open the door"""
        logger.warning("default_open()")
        
    def default_close():
        """Close the door"""
        logger.warning("default_close()")
        
    dev.add_method('open',default_open)
    dev.add_method('close',default_close)
    
    return dev

#=====================================================================
def falldetector(addr: Optional[UUID] = None) -> Device:
    """Simple fall detection device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('falldetector.basic',addr)
    
    # -- Attributes --
    # List of detected falls - List of objects {delay,zone,x,y} whose semantic is device-dependent; Each object means a fall; An empty object means a detecting fall with no additional info; An empty list means no detected fall. | type: data = [ * { ?"delay":#6.1(uint), ?"zone":tstr, ?"x":number, ?"y":number } ]
    dev.new_attribute('falls')
    return dev

#=====================================================================
def gateway(addr: Optional[UUID] = None) -> Device:
    """Simple gateway that manage physical devices"""
    addr = addr or tools.get_random_uuid()
    dev = Device('gateway.basic',addr)
    
    # -- Attributes --
    # List of embeded devices | type: data = [ * #6.37(bstr .size 16) ]
    dev.new_attribute('embedded')
    # List of embeded devices | type: data = [ * #6.37(bstr .size 16) ]
    dev.new_attribute('inactive')
    return dev

#=====================================================================
def hmi(addr: Optional[UUID] = None) -> Device:
    """Basic Human Machine Interface"""
    addr = addr or tools.get_random_uuid()
    dev = Device('hmi.basic',addr)
    return dev

#=====================================================================
def hygrometer(addr: Optional[UUID] = None) -> Device:
    """Simple hygrometer"""
    addr = addr or tools.get_random_uuid()
    dev = Device('hygrometer.basic',addr)
    
    # -- Attributes --
    # Humidity | type: data = (0..100) / (0.0..100.0) | unit: %RH
    dev.new_attribute('humidity')
    return dev

#=====================================================================
def lamp(addr: Optional[UUID] = None) -> Device:
    """Simple lamp"""
    addr = addr or tools.get_random_uuid()
    dev = Device('lamp.basic',addr)
    
    # -- Attributes --
    # State of the lamp (true=on false=off) | type: data = bool
    dev.new_attribute('light')

    # -- Methods --
    def default_turn_on():
        """Switch on the lamp"""
        logger.warning("default_turn_on()")
        
    def default_turn_off():
        """Switch off the lamp"""
        logger.warning("default_turn_off()")
        
    dev.add_method('turn_on',default_turn_on)
    dev.add_method('turn_off',default_turn_off)
    
    return dev

#=====================================================================
def lamp_color(addr: Optional[UUID] = None) -> Device:
    """Color-changing lamp"""
    addr = addr or tools.get_random_uuid()
    dev = Device('lamp.color',addr)
    
    # -- Attributes --
    # State of the lamp (true=on false=off) | type: data = bool
    dev.new_attribute('light')
    # Level of the brightness | type: data = (0..100) / (0.0..100.0) | unit: %
    dev.new_attribute('brightness')
    # Temperature of the white | type: data = 1000..10000 | unit: K
    dev.new_attribute('white_temperature')
    # Color description in hue-saturation-value coding | type: data = [ ((0..360)/(0.0..360.0)),  (0.0..1.0),  (0.0..1.0) ]
    dev.new_attribute('hsv')
    # Mode of the lamp | type: data = "white" / "color" / "scene"
    dev.new_attribute('mode')
    # Scene name | type: data = tstr
    dev.new_attribute('scene')

    # -- Methods --
    def default_turn_on(_smooth=None):
        """Switch on the lamp"""
        logger.warning("default_turn_on(smooth=[%s],)" % (_smooth))
        
    def default_turn_off(_smooth=None):
        """Switch off the lamp"""
        logger.warning("default_turn_off(smooth=[%s],)" % (_smooth))
        
    def default_set_brightness(_brightness=None,_smooth=None):
        """Change the brightness of the lamp"""
        logger.warning("default_set_brightness(brightness=[%s],smooth=[%s],)" % (_brightness,_smooth))
        
    def default_set_white_temperature(_white_temperature=None):
        """Change the temperature of the white"""
        logger.warning("default_set_white_temperature(white_temperature=[%s],)" % (_white_temperature))
        
    def default_set_hsv(_hsv=None,_smooth=None):
        """Change the color of the lamp"""
        logger.warning("default_set_hsv(hsv=[%s],smooth=[%s],)" % (_hsv,_smooth))
        
    def default_set_mode(_mode=None):
        """Change the mode of the lamp"""
        logger.warning("default_set_mode(mode=[%s],)" % (_mode))
        
    def default_set_scene(_scene=None,_options=None):
        """Change the scene played by the color-changing lamp"""
        logger.warning("default_set_scene(scene=[%s],options=[%s],)" % (_scene,_options))
        
    def default_get_scenes():
        """Get scenes names supported by the lamp"""
        logger.warning("default_get_scenes()")
        
    dev.add_method('turn_on',default_turn_on)
    dev.add_method('turn_off',default_turn_off)
    dev.add_method('set_brightness',default_set_brightness)
    dev.add_method('set_white_temperature',default_set_white_temperature)
    dev.add_method('set_hsv',default_set_hsv)
    dev.add_method('set_mode',default_set_mode)
    dev.add_method('set_scene',default_set_scene)
    dev.add_method('get_scenes',default_get_scenes)
    
    return dev

#=====================================================================
def lamp_dimmer(addr: Optional[UUID] = None) -> Device:
    """Simple dimmable lamp"""
    addr = addr or tools.get_random_uuid()
    dev = Device('lamp.dimmer',addr)
    
    # -- Attributes --
    # State of the lamp (true=on false=off) | type: data = bool
    dev.new_attribute('light')
    # Level of the brightness | type: data = (0..100) / (0.0..100.0) | unit: %
    dev.new_attribute('brightness')
    # Temperature of the white | type: data = 1000..10000 | unit: K
    dev.new_attribute('white_temperature')

    # -- Methods --
    def default_turn_on(_smooth=None):
        """Switch on the lamp"""
        logger.warning("default_turn_on(smooth=[%s],)" % (_smooth))
        
    def default_turn_off(_smooth=None):
        """Switch off the lamp"""
        logger.warning("default_turn_off(smooth=[%s],)" % (_smooth))
        
    def default_set_brightness(_brightness=None,_smooth=None):
        """Change the brightness of the lamp"""
        logger.warning("default_set_brightness(brightness=[%s],smooth=[%s],)" % (_brightness,_smooth))
        
    def default_set_white_temperature(_white_temperature=None):
        """Change the temperature of the white"""
        logger.warning("default_set_white_temperature(white_temperature=[%s],)" % (_white_temperature))
        
    dev.add_method('turn_on',default_turn_on)
    dev.add_method('turn_off',default_turn_off)
    dev.add_method('set_brightness',default_set_brightness)
    dev.add_method('set_white_temperature',default_set_white_temperature)
    
    return dev

#=====================================================================
def lamp_toggle(addr: Optional[UUID] = None) -> Device:
    """Simple lamp with toggle function - Note that a toggle function may leads to undefined state due to its stateful nature; its usage should be avoided."""
    addr = addr or tools.get_random_uuid()
    dev = Device('lamp.toggle',addr)
    
    # -- Attributes --
    # State of the lamp (true=on false=off) | type: data = bool
    dev.new_attribute('light')

    # -- Methods --
    def default_turn_on():
        """Switch on the lamp"""
        logger.warning("default_turn_on()")
        
    def default_turn_off():
        """Switch off the lamp"""
        logger.warning("default_turn_off()")
        
    def default_toggle():
        """Toggle lamp state"""
        logger.warning("default_toggle()")
        
    dev.add_method('turn_on',default_turn_on)
    dev.add_method('turn_off',default_turn_off)
    dev.add_method('toggle',default_toggle)
    
    return dev

#=====================================================================
def lightgauge(addr: Optional[UUID] = None) -> Device:
    """Simple light gauge"""
    addr = addr or tools.get_random_uuid()
    dev = Device('lightgauge.basic',addr)
    
    # -- Attributes --
    # Brightness indicator without units (scaled in 100 levels of brightness; Information is transmitted in percentage). Simple LDR (photoresistor). | type: data = (0..100) / (0.0..100.0) | unit: %
    dev.new_attribute('brightness')
    return dev

#=====================================================================
def linkquality(addr: Optional[UUID] = None) -> Device:
    """Report on quality of a transmission link"""
    addr = addr or tools.get_random_uuid()
    dev = Device('linkquality.basic',addr)
    
    # -- Attributes --
    # Link quality | type: data = (0..100) / (0.0..100.0) | unit: %
    dev.new_attribute('level')
    # List of devices concerned with this link | type: data = [ * #6.37(bstr .size 16) ]
    dev.new_attribute('devices')
    return dev

#=====================================================================
def luxmeter(addr: Optional[UUID] = None) -> Device:
    """Simple luxmeter"""
    addr = addr or tools.get_random_uuid()
    dev = Device('luxmeter.basic',addr)
    
    # -- Attributes --
    # Lux | type: data = number | unit: lx
    dev.new_attribute('illuminance')
    return dev

#=====================================================================
def metadatadb(addr: Optional[UUID] = None) -> Device:
    """Simple metatdata database to manage tags associated with devices"""
    addr = addr or tools.get_random_uuid()
    dev = Device('metadatadb.basic',addr)

    # -- Methods --
    def default_get_devices(_key=None,_value=None):
        """Get the list of known devices; possibly filtered by a key, a (non-null) value, or both"""
        logger.warning("default_get_devices(key=[%s],value=[%s],)" % (_key,_value))
        
    def default_get_keys_values(_device=None,_keys=None):
        """Get the map of keys-values associated with a given device; possibly restricted to a list of wanted keys"""
        logger.warning("default_get_keys_values(device=[%s],keys=[%s],)" % (_device,_keys))
        
    def default_get_value(_device=None,_key=None):
        """Get the value of a key of a device"""
        logger.warning("default_get_value(device=[%s],key=[%s],)" % (_device,_key))
        
    def default_update_keys_values(_device=None,_map=None):
        """Update keys-values on a device; non-existing keys are added; the null value deletes a key; a null map deletes all keys-values of a device; devices with no more key-value are withdrawn of the DB"""
        logger.warning("default_update_keys_values(device=[%s],map=[%s],)" % (_device,_map))
        
    dev.add_method('get_devices',default_get_devices)
    dev.add_method('get_keys_values',default_get_keys_values)
    dev.add_method('get_value',default_get_value)
    dev.add_method('update_keys_values',default_update_keys_values)
    
    return dev

#=====================================================================
def motion(addr: Optional[UUID] = None) -> Device:
    """Simple motion detector device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('motion.basic',addr)
    
    # -- Attributes --
    # State of the presence (true=yes false=no) | type: data = bool
    dev.new_attribute('presence')
    return dev

#=====================================================================
def powermeter(addr: Optional[UUID] = None) -> Device:
    """Simple powermeter"""
    addr = addr or tools.get_random_uuid()
    dev = Device('powermeter.basic',addr)
    
    # -- Attributes --
    # Current power | type: data = number | unit: W
    dev.new_attribute('power')
    # Energy used or produced since cycle beginning | type: data = number | unit: kWh
    dev.new_attribute('energy')
    # List of devices concerned with this powermeter | type: data = [ * #6.37(bstr .size 16) ]
    dev.new_attribute('devices')
    return dev

#=====================================================================
def powerrelay(addr: Optional[UUID] = None) -> Device:
    """Simple power relay device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('powerrelay.basic',addr)
    
    # -- Attributes --
    # State of the relay (true=on false=off) | type: data = bool
    dev.new_attribute('power')

    # -- Methods --
    def default_turn_on():
        """Switch on the relay"""
        logger.warning("default_turn_on()")
        
    def default_turn_off():
        """Switch off the relay"""
        logger.warning("default_turn_off()")
        
    dev.add_method('turn_on',default_turn_on)
    dev.add_method('turn_off',default_turn_off)
    
    return dev

#=====================================================================
def powerrelay_toggle(addr: Optional[UUID] = None) -> Device:
    """Power relay with toggle function - Note that a toggle function may leads to undefined state due to its stateful nature; its usage should be avoided."""
    addr = addr or tools.get_random_uuid()
    dev = Device('powerrelay.toggle',addr)
    
    # -- Attributes --
    # State of the relay (true=on false=off) | type: data = bool
    dev.new_attribute('power')

    # -- Methods --
    def default_turn_on():
        """Switch on the relay"""
        logger.warning("default_turn_on()")
        
    def default_turn_off():
        """Switch off the relay"""
        logger.warning("default_turn_off()")
        
    def default_toggle():
        """Toggle relay state"""
        logger.warning("default_toggle()")
        
    dev.add_method('turn_on',default_turn_on)
    dev.add_method('turn_off',default_turn_off)
    dev.add_method('toggle',default_toggle)
    
    return dev

#=====================================================================
def raingauge(addr: Optional[UUID] = None) -> Device:
    """Simple rain gauge"""
    addr = addr or tools.get_random_uuid()
    dev = Device('raingauge.basic',addr)
    
    # -- Attributes --
    # Real-time amount of rainfall | type: data = number | unit: mm
    dev.new_attribute('rain')
    # Accumulated precipitation | type: data = number | unit: mm
    dev.new_attribute('accumulated')
    return dev

#=====================================================================
def scale(addr: Optional[UUID] = None) -> Device:
    """Simple scale"""
    addr = addr or tools.get_random_uuid()
    dev = Device('scale.basic',addr)
    
    # -- Attributes --
    # Weight | type: data = number | unit: gram
    dev.new_attribute('weight')
    return dev

#=====================================================================
def scenario(addr: Optional[UUID] = None) -> Device:
    """Simple Scenario"""
    addr = addr or tools.get_random_uuid()
    dev = Device('scenario.basic',addr)
    
    # -- Attributes --
    # State of scenario (true=enabled false=disabled) | type: data = bool
    dev.new_attribute('enabled')
    # Fancy properties defined and managed by the scenario, if any | type: data = { * (tstr => tstr) }
    dev.new_attribute('properties')

    # -- Methods --
    def default_enable():
        """Enable the scenario"""
        logger.warning("default_enable()")
        
    def default_disable():
        """Disable the scenario"""
        logger.warning("default_disable()")
        
    def default_run(_options=None):
        """Run the scenario (if enabled)"""
        logger.warning("default_run(options=[%s],)" % (_options))
        
    def default_abort():
        """Abort the scenario (if running)"""
        logger.warning("default_abort()")
        
    dev.add_method('enable',default_enable)
    dev.add_method('disable',default_disable)
    dev.add_method('run',default_run)
    dev.add_method('abort',default_abort)
    
    return dev

#=====================================================================
def shutter(addr: Optional[UUID] = None) -> Device:
    """Simple shutter"""
    addr = addr or tools.get_random_uuid()
    dev = Device('shutter.basic',addr)
    
    # -- Attributes --
    # Ongoing action of the shutter | type: data = "up" / "down" / "stop"
    dev.new_attribute('action')

    # -- Methods --
    def default_up():
        """Up the shutter"""
        logger.warning("default_up()")
        
    def default_down():
        """Down the shutter"""
        logger.warning("default_down()")
        
    def default_stop():
        """Stop ongoing action of the shutter"""
        logger.warning("default_stop()")
        
    dev.add_method('up',default_up)
    dev.add_method('down',default_down)
    dev.add_method('stop',default_stop)
    
    return dev

#=====================================================================
def shutter_position(addr: Optional[UUID] = None) -> Device:
    """Shutter with a position managment"""
    addr = addr or tools.get_random_uuid()
    dev = Device('shutter.position',addr)
    
    # -- Attributes --
    # Ongoing action of the shutter | type: data = "up" / "down" / "stop"
    dev.new_attribute('action')
    # Level of aperture of the shutter | type: data = (0..100) / (0.0..100.0) | unit: %
    dev.new_attribute('position')

    # -- Methods --
    def default_up():
        """Up the shutter"""
        logger.warning("default_up()")
        
    def default_down():
        """Down the shutter"""
        logger.warning("default_down()")
        
    def default_stop():
        """Stop ongoing action of the shutter"""
        logger.warning("default_stop()")
        
    def default_set_position(_position=None):
        """Change the position of the shutter"""
        logger.warning("default_set_position(position=[%s],)" % (_position))
        
    dev.add_method('up',default_up)
    dev.add_method('down',default_down)
    dev.add_method('stop',default_stop)
    dev.add_method('set_position',default_set_position)
    
    return dev

#=====================================================================
def soundmeter(addr: Optional[UUID] = None) -> Device:
    """Simple soundmeter"""
    addr = addr or tools.get_random_uuid()
    dev = Device('soundmeter.basic',addr)
    
    # -- Attributes --
    # Sound intensity | type: data = number | unit: dB
    dev.new_attribute('sound')
    return dev

#=====================================================================
def switch(addr: Optional[UUID] = None) -> Device:
    """Simple switch button device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('switch.basic',addr)
    
    # -- Attributes --
    # Position of the switch (true=on false=off) | type: data = bool
    dev.new_attribute('position')
    return dev

#=====================================================================
def thermometer(addr: Optional[UUID] = None) -> Device:
    """Simple thermometer"""
    addr = addr or tools.get_random_uuid()
    dev = Device('thermometer.basic',addr)
    
    # -- Attributes --
    # Temperature | type: data = number | unit: Cel
    dev.new_attribute('temperature')
    return dev

#=====================================================================
def tts(addr: Optional[UUID] = None) -> Device:
    """Text-To-Speech device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('tts.basic',addr)

    # -- Methods --
    def default_say(_msg=None,_lang=None,_voice=None):
        """Say message"""
        logger.warning("default_say(msg=[%s],lang=[%s],voice=[%s],)" % (_msg,_lang,_voice))
        
    dev.add_method('say',default_say)
    
    return dev

#=====================================================================
def windgauge(addr: Optional[UUID] = None) -> Device:
    """Simple wind gauge"""
    addr = addr or tools.get_random_uuid()
    dev = Device('windgauge.basic',addr)
    
    # -- Attributes --
    # Strength of the wind | type: data = number | unit: m/s
    dev.new_attribute('wind_strength')
    # Direction of the wind | type: data = (0..360) / (0.0..360.0) | unit: °
    dev.new_attribute('wind_angle')
    # Strength of gusts | type: data = number | unit: m/s
    dev.new_attribute('gust_strength')
    # Direction of gusts | type: data = (0..360) / (0.0..360.0) | unit: °
    dev.new_attribute('gust_angle')
    return dev

#=====================================================================
def window(addr: Optional[UUID] = None) -> Device:
    """Simple window device"""
    addr = addr or tools.get_random_uuid()
    dev = Device('window.basic',addr)
    
    # -- Attributes --
    # Position of the window (true=open false=close) | type: data = bool
    dev.new_attribute('position')

    # -- Methods --
    def default_open():
        """Open the window"""
        logger.warning("default_open()")
        
    def default_close():
        """Close the window"""
        logger.warning("default_close()")
        
    dev.add_method('open',default_open)
    dev.add_method('close',default_close)
    
    return dev

#=====================================================================
def worktop(addr: Optional[UUID] = None) -> Device:
    """Simple worktop"""
    addr = addr or tools.get_random_uuid()
    dev = Device('worktop.basic',addr)
    
    # -- Attributes --
    # Ongoing action of the worktop | type: data = "up" / "down" / "stop"
    dev.new_attribute('action')

    # -- Methods --
    def default_up():
        """Up the worktop"""
        logger.warning("default_up()")
        
    def default_down():
        """Down the worktop"""
        logger.warning("default_down()")
        
    def default_stop():
        """Stop ongoing action of the worktop"""
        logger.warning("default_stop()")
        
    dev.add_method('up',default_up)
    dev.add_method('down',default_down)
    dev.add_method('stop',default_stop)
    
    return dev

