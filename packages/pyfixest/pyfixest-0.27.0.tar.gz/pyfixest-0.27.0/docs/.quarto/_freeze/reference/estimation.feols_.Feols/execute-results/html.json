{
  "hash": "7a75ec6dd1e0323ee3b006f131fad884",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: estimation.feols_.Feols\n---\n\n\n\n```python\nestimation.feols_.Feols(\n    self,\n    FixestFormula,\n    data,\n    ssc_dict,\n    drop_singletons,\n    drop_intercept,\n    weights,\n    weights_type,\n    collin_tol,\n    fixef_tol,\n    lookup_demeaned_data,\n    solver='np.linalg.solve',\n    store_data=True,\n    copy_data=True,\n    lean=False,\n    sample_split_var=None,\n    sample_split_value=None,\n)\n```\n\nNon user-facing class to estimate a linear regression via OLS.\n\nUsers should not directly instantiate this class,\nbut rather use the [feols()](/reference/estimation.feols.qmd) function. Note that\nno demeaning is performed in this class: demeaning is performed in the\n[FixestMulti](/reference/estimation.fixest_multi.qmd) class (to allow for caching\nof demeaned variables for multiple estimation).\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name         | Type            | Description                                                                                                                | Default             |\n|--------------|-----------------|----------------------------------------------------------------------------------------------------------------------------|---------------------|\n| Y            | np.ndarray      | Dependent variable, a two-dimensional numpy array.                                                                         | _required_          |\n| X            | np.ndarray      | Independent variables, a two-dimensional numpy array.                                                                      | _required_          |\n| weights      | np.ndarray      | Weights, a one-dimensional numpy array.                                                                                    | _required_          |\n| collin_tol   | float           | Tolerance level for collinearity checks.                                                                                   | _required_          |\n| coefnames    | list\\[str\\]     | Names of the coefficients (of the design matrix X).                                                                        | _required_          |\n| weights_name | Optional\\[str\\] | Name of the weights variable.                                                                                              | _required_          |\n| weights_type | Optional\\[str\\] | Type of the weights variable. Either \"aweights\" for analytic weights or \"fweights\" for frequency weights.                  | _required_          |\n| solver       | str, optional.  | The solver to use for the regression. Can be either \"np.linalg.solve\" or \"np.linalg.lstsq\". Defaults to \"np.linalg.solve\". | `'np.linalg.solve'` |\n\n## Attributes {.doc-section .doc-section-attributes}\n\n| Name                    | Type         | Description                                                                                     |\n|-------------------------|--------------|-------------------------------------------------------------------------------------------------|\n| _method                 | str          | Specifies the method used for regression, set to \"feols\".                                       |\n| _is_iv                  | bool         | Indicates whether instrumental variables are used, initialized as False.                        |\n| _Y                      | np.ndarray   | The demeaned dependent variable, a two-dimensional numpy array.                                 |\n| _X                      | np.ndarray   | The demeaned independent variables, a two-dimensional numpy array.                              |\n| _X_is_empty             | bool         | Indicates whether the X array is empty.                                                         |\n| _collin_tol             | float        | Tolerance level for collinearity checks.                                                        |\n| _coefnames              | list         | Names of the coefficients (of the design matrix X).                                             |\n| _collin_vars            | list         | Variables identified as collinear.                                                              |\n| _collin_index           | list         | Indices of collinear variables.                                                                 |\n| _Z                      | np.ndarray   | Alias for the _X array, used for calculations.                                                  |\n| _solver                 | str          | The solver used for the regression.                                                             |\n| _weights                | np.ndarray   | Array of weights for each observation.                                                          |\n| _N                      | int          | Number of observations.                                                                         |\n| _k                      | int          | Number of independent variables (or features).                                                  |\n| _support_crv3_inference | bool         | Indicates support for CRV3 inference.                                                           |\n| _data                   | Any          | Data used in the regression, to be enriched outside of the class.                               |\n| _fml                    | Any          | Formula used in the regression, to be enriched outside of the class.                            |\n| _has_fixef              | bool         | Indicates whether fixed effects are used.                                                       |\n| _fixef                  | Any          | Fixed effects used in the regression.                                                           |\n| _icovars                | Any          | Internal covariates, to be enriched outside of the class.                                       |\n| _ssc_dict               | dict         | dictionary for sum of squares and cross products matrices.                                      |\n| _tZX                    | np.ndarray   | Transpose of Z multiplied by X, set in get_fit().                                               |\n| _tXZ                    | np.ndarray   | Transpose of X multiplied by Z, set in get_fit().                                               |\n| _tZy                    | np.ndarray   | Transpose of Z multiplied by Y, set in get_fit().                                               |\n| _tZZinv                 | np.ndarray   | Inverse of the transpose of Z multiplied by Z, set in get_fit().                                |\n| _beta_hat               | np.ndarray   | Estimated regression coefficients.                                                              |\n| _Y_hat_link             | np.ndarray   | Prediction at the level of the explanatory variable, i.e., the linear predictor X @ beta.       |\n| _Y_hat_response         | np.ndarray   | Prediction at the level of the response variable, i.e., the expected predictor E(Y\\|X).         |\n| _u_hat                  | np.ndarray   | Residuals of the regression model.                                                              |\n| _scores                 | np.ndarray   | Scores used in the regression analysis.                                                         |\n| _hessian                | np.ndarray   | Hessian matrix used in the regression.                                                          |\n| _bread                  | np.ndarray   | Bread matrix, used in calculating the variance-covariance matrix.                               |\n| _vcov_type              | Any          | Type of variance-covariance matrix used.                                                        |\n| _vcov_type_detail       | Any          | Detailed specification of the variance-covariance matrix type.                                  |\n| _is_clustered           | bool         | Indicates if clustering is used in the variance-covariance calculation.                         |\n| _clustervar             | Any          | Variable used for clustering in the variance-covariance calculation.                            |\n| _G                      | Any          | Group information used in clustering.                                                           |\n| _ssc                    | Any          | Sum of squares and cross products matrix.                                                       |\n| _vcov                   | np.ndarray   | Variance-covariance matrix of the estimated coefficients.                                       |\n| _se                     | np.ndarray   | Standard errors of the estimated coefficients.                                                  |\n| _tstat                  | np.ndarray   | T-statistics of the estimated coefficients.                                                     |\n| _pvalue                 | np.ndarray   | P-values associated with the t-statistics.                                                      |\n| _conf_int               | np.ndarray   | Confidence intervals for the estimated coefficients.                                            |\n| _F_stat                 | Any          | F-statistic for the model, set in get_Ftest().                                                  |\n| _fixef_dict             | dict         | dictionary containing fixed effects estimates.                                                  |\n| _sumFE                  | np.ndarray   | Sum of all fixed effects for each observation.                                                  |\n| _rmse                   | float        | Root mean squared error of the model.                                                           |\n| _r2                     | float        | R-squared value of the model.                                                                   |\n| _r2_within              | float        | R-squared value computed on demeaned dependent variable.                                        |\n| _adj_r2                 | float        | Adjusted R-squared value of the model.                                                          |\n| _adj_r2_within          | float        | Adjusted R-squared value computed on demeaned dependent variable.                               |\n| _solver                 | str          | The solver used to fit the normal equation.                                                     |\n| _data                   | pd.DataFrame | The data frame used in the estimation. None if arguments `lean = True` or `store_data = False`. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [add_fixest_multi_context](#pyfixest.estimation.feols_.Feols.add_fixest_multi_context) | Enrich Feols object. |\n| [ccv](#pyfixest.estimation.feols_.Feols.ccv) | Compute the Causal Cluster Variance following Abadie et al (QJE 2023). |\n| [coef](#pyfixest.estimation.feols_.Feols.coef) | Fitted model coefficents. |\n| [confint](#pyfixest.estimation.feols_.Feols.confint) | Fitted model confidence intervals. |\n| [decompose](#pyfixest.estimation.feols_.Feols.decompose) | Implement the Gelbach (2016) decomposition method for mediation analysis. |\n| [demean](#pyfixest.estimation.feols_.Feols.demean) | Demean the dependent variable and covariates by the fixed effect(s). |\n| [drop_multicol_vars](#pyfixest.estimation.feols_.Feols.drop_multicol_vars) | Detect and drop multicollinear variables. |\n| [fixef](#pyfixest.estimation.feols_.Feols.fixef) | Compute the coefficients of (swept out) fixed effects for a regression model. |\n| [get_fit](#pyfixest.estimation.feols_.Feols.get_fit) | Fit an OLS model. |\n| [get_inference](#pyfixest.estimation.feols_.Feols.get_inference) | Compute standard errors, t-statistics, and p-values for the regression model. |\n| [get_performance](#pyfixest.estimation.feols_.Feols.get_performance) | Get Goodness-of-Fit measures. |\n| [plot_ritest](#pyfixest.estimation.feols_.Feols.plot_ritest) | Plot the distribution of the Randomization Inference Statistics. |\n| [predict](#pyfixest.estimation.feols_.Feols.predict) | Predict values of the model on new data. |\n| [prepare_model_matrix](#pyfixest.estimation.feols_.Feols.prepare_model_matrix) | Prepare model matrices for estimation. |\n| [pvalue](#pyfixest.estimation.feols_.Feols.pvalue) | Fitted model p-values. |\n| [resid](#pyfixest.estimation.feols_.Feols.resid) | Fitted model residuals. |\n| [ritest](#pyfixest.estimation.feols_.Feols.ritest) | Conduct Randomization Inference (RI) test against a null hypothesis of |\n| [se](#pyfixest.estimation.feols_.Feols.se) | Fitted model standard errors. |\n| [solve_ols](#pyfixest.estimation.feols_.Feols.solve_ols) | Solve the ordinary least squares problem using the specified solver. |\n| [tidy](#pyfixest.estimation.feols_.Feols.tidy) | Tidy model outputs. |\n| [to_array](#pyfixest.estimation.feols_.Feols.to_array) | Convert estimation data frames to np arrays. |\n| [tstat](#pyfixest.estimation.feols_.Feols.tstat) | Fitted model t-statistics. |\n| [update](#pyfixest.estimation.feols_.Feols.update) | Update coefficients for new observations using Sherman-Morrison formula. |\n| [vcov](#pyfixest.estimation.feols_.Feols.vcov) | Compute covariance matrices for an estimated regression model. |\n| [wald_test](#pyfixest.estimation.feols_.Feols.wald_test) | Conduct Wald test. |\n| [wildboottest](#pyfixest.estimation.feols_.Feols.wildboottest) | Run a wild cluster bootstrap based on an object of type \"Feols\". |\n| [wls_transform](#pyfixest.estimation.feols_.Feols.wls_transform) | Transform model matrices for WLS Estimation. |\n\n### add_fixest_multi_context { #pyfixest.estimation.feols_.Feols.add_fixest_multi_context }\n\n```python\nestimation.feols_.Feols.add_fixest_multi_context(\n    depvar,\n    Y,\n    _data,\n    _ssc_dict,\n    _k_fe,\n    fval,\n    store_data,\n)\n```\n\nEnrich Feols object.\n\nEnrich an instance of `Feols` Class with additional\nattributes set in the `FixestMulti` class.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name          | Type          | Description                                                             | Default    |\n|---------------|---------------|-------------------------------------------------------------------------|------------|\n| FixestFormula | FixestFormula | The formula(s) used for estimation encoded in a `FixestFormula` object. | _required_ |\n| depvar        | str           | The dependent variable of the regression model.                         | _required_ |\n| Y             | pd.Series     | The dependent variable of the regression model.                         | _required_ |\n| _data         | pd.DataFrame  | The data used for estimation.                                           | _required_ |\n| _ssc_dict     | dict          | A dictionary with the sum of squares and cross products matrices.       | _required_ |\n| _k_fe         | int           | The number of fixed effects.                                            | _required_ |\n| fval          | str           | The fixed effects formula.                                              | _required_ |\n| store_data    | bool          | Indicates whether to save the data used for estimation in the object    | _required_ |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type   | Description   |\n|--------|--------|---------------|\n|        | None   |               |\n\n### ccv { #pyfixest.estimation.feols_.Feols.ccv }\n\n```python\nestimation.feols_.Feols.ccv(\n    treatment,\n    cluster=None,\n    seed=None,\n    n_splits=8,\n    pk=1,\n    qk=1,\n)\n```\n\nCompute the Causal Cluster Variance following Abadie et al (QJE 2023).\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name      | Type   | Description                                                                                                                                         | Default    |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| treatment |        | The name of the treatment variable.                                                                                                                 | _required_ |\n| cluster   | str    | The name of the cluster variable. None by default. If None, uses the cluster variable from the model fit.                                           | `None`     |\n| seed      | int    | An integer to set the random seed. Defaults to None.                                                                                                | `None`     |\n| n_splits  | int    | The number of splits to use in the cross-fitting procedure. Defaults to 8.                                                                          | `8`        |\n| pk        | float  | The proportion of sampled clusters. Defaults to 1, which corresponds to all clusters of the population being sampled.                               | `1`        |\n| qk        | float  | The proportion of sampled observations within each cluster. Defaults to 1, which corresponds to all observations within each cluster being sampled. | `1`        |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type         | Description                                                                                     |\n|--------|--------------|-------------------------------------------------------------------------------------------------|\n|        | pd.DataFrame | A DataFrame with inference based on the \"Causal Cluster Variance\" and \"regular\" CRV1 inference. |\n\n#### Examples {.doc-section .doc-section-examples}\n\n\n::: {#bdd991de .cell execution_count=1}\n``` {.python .cell-code}\nimport pyfixest as pf\nimport numpy as np\n\ndata = pf.get_data()\ndata[\"D\"] = np.random.choice([0, 1], size=data.shape[0])\n\nfit = pf.feols(\"Y ~ D\", data=data, vcov={\"CRV1\": \"group_id\"})\nfit.ccv(treatment=\"D\", pk=0.05, qk=0.5, n_splits=8, seed=123).head()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"JATKcx\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.1/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"JATKcx\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"JATKcx\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"gk9XCk\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.1/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"gk9XCk\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"gk9XCk\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>CCV</th>\n      <td>-0.08355170587078944</td>\n      <td>0.2242</td>\n      <td>-0.372666</td>\n      <td>0.713749</td>\n      <td>-0.554578</td>\n      <td>0.387475</td>\n    </tr>\n    <tr>\n      <th>CRV1</th>\n      <td>-0.083552</td>\n      <td>0.143331</td>\n      <td>-0.582928</td>\n      <td>0.567174</td>\n      <td>-0.384679</td>\n      <td>0.217576</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### coef { #pyfixest.estimation.feols_.Feols.coef }\n\n```python\nestimation.feols_.Feols.coef()\n```\n\nFitted model coefficents.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                                          |\n|--------|-----------|----------------------------------------------------------------------|\n|        | pd.Series | A pd.Series with the estimated coefficients of the regression model. |\n\n### confint { #pyfixest.estimation.feols_.Feols.confint }\n\n```python\nestimation.feols_.Feols.confint(\n    alpha=0.05,\n    keep=None,\n    drop=None,\n    exact_match=False,\n    joint=False,\n    seed=None,\n    reps=10000,\n)\n```\n\nFitted model confidence intervals.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name        | Type                           | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Default   |\n|-------------|--------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|\n| alpha       | float                          | The significance level for confidence intervals. Defaults to 0.05. keep: str or list of str, optional                                                                                                                                                                                                                                                                                                                                                                       | `0.05`    |\n| joint       | bool                           | Whether to compute simultaneous confidence interval for joint null of parameters selected by `keep` and `drop`. Defaults to False. See https://www.causalml-book.org/assets/chapters/CausalML_chap_4.pdf, Remark 4.4.1 for details.                                                                                                                                                                                                                                         | `False`   |\n| keep        | Optional\\[Union\\[list, str\\]\\] | The pattern for retaining coefficient names. You can pass a string (one pattern) or a list (multiple patterns). Default is keeping all coefficients. You should use regular expressions to select coefficients.     \"age\",            # would keep all coefficients containing age     r\"^tr\",           # would keep all coefficients starting with tr     r\"\\\\d$\",          # would keep all coefficients ending with number Output will be in the order of the patterns. | `None`    |\n| drop        | Optional\\[Union\\[list, str\\]\\] | The pattern for excluding coefficient names. You can pass a string (one pattern) or a list (multiple patterns). Syntax is the same as for `keep`. Default is keeping all coefficients. Parameter `keep` and `drop` can be used simultaneously.                                                                                                                                                                                                                              | `None`    |\n| exact_match | Optional\\[bool\\]               | Whether to use exact match for `keep` and `drop`. Default is False. If True, the pattern will be matched exactly to the coefficient name instead of using regular expressions.                                                                                                                                                                                                                                                                                              | `False`   |\n| reps        | int                            | The number of bootstrap iterations to run for joint confidence intervals. Defaults to 10_000. Only used if `joint` is True.                                                                                                                                                                                                                                                                                                                                                 | `10000`   |\n| seed        | int                            | The seed for the random number generator. Defaults to None. Only used if `joint` is True.                                                                                                                                                                                                                                                                                                                                                                                   | `None`    |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type         | Description                                                                                               |\n|--------|--------------|-----------------------------------------------------------------------------------------------------------|\n|        | pd.DataFrame | A pd.DataFrame with confidence intervals of the estimated regression model for the selected coefficients. |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#22f5a9f2 .cell execution_count=2}\n``` {.python .cell-code}\nfrom pyfixest.utils import get_data\nfrom pyfixest.estimation import feols\n\ndata = get_data()\nfit = feols(\"Y ~ C(f1)\", data=data)\nfit.confint(alpha=0.10).head()\nfit.confint(alpha=0.10, joint=True, reps=9999).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>5.0%</th>\n      <th>95.0%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Intercept</th>\n      <td>-1.374352</td>\n      <td>0.400634</td>\n    </tr>\n    <tr>\n      <th>C(f1)[T.1.0]</th>\n      <td>1.347593</td>\n      <td>3.740983</td>\n    </tr>\n    <tr>\n      <th>C(f1)[T.2.0]</th>\n      <td>-2.889785</td>\n      <td>-0.379576</td>\n    </tr>\n    <tr>\n      <th>C(f1)[T.3.0]</th>\n      <td>-1.757712</td>\n      <td>0.829751</td>\n    </tr>\n    <tr>\n      <th>C(f1)[T.4.0]</th>\n      <td>-3.026750</td>\n      <td>-0.498675</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### decompose { #pyfixest.estimation.feols_.Feols.decompose }\n\n```python\nestimation.feols_.Feols.decompose(\n    param,\n    type='gelbach',\n    cluster=None,\n    combine_covariates=None,\n    reps=1000,\n    seed=None,\n    nthreads=None,\n    agg_first=None,\n    only_coef=False,\n    digits=4,\n)\n```\n\nImplement the Gelbach (2016) decomposition method for mediation analysis.\n\nCompares the short model depvar on {param} with the long model\nspecified in the original feols() call. For details, take a look at\n\"When do covariates matter?\" by Gelbach (2016, JoLe). You can find\nan ungated version of the paper on SSRN under the following link:\nhttps://papers.ssrn.com/sol3/papers.cfm?abstract_id=1425737 .\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name               | Type                                 | Description                                                                                                                                                                                                                        | Default     |\n|--------------------|--------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|\n| param              | str                                  | The name of the parameter to decompose.                                                                                                                                                                                            | _required_  |\n| type               | str                                  | The type of decomposition method to use. Defaults to \"gelbach\", which currently is the only supported option.                                                                                                                      | `'gelbach'` |\n| cluster            | Optional\\[str\\]                      | The name of the cluster variable. If None, uses the cluster variable from the model fit. Defaults to None.                                                                                                                         | `None`      |\n| combine_covariates | Optional\\[dict\\[str, list\\[str\\]\\]\\] | A dictionary that specifies which covariates to combine into groups. See the example for how to use this argument. Defaults to None.                                                                                               | `None`      |\n| reps               | int                                  | The number of bootstrap iterations to run. Defaults to 1000.                                                                                                                                                                       | `1000`      |\n| seed               | int                                  | An integer to set the random seed. Defaults to None.                                                                                                                                                                               | `None`      |\n| nthreads           | int                                  | The number of threads to use for the bootstrap. Defaults to None. If None, uses all available threads minus one.                                                                                                                   | `None`      |\n| agg_first          | bool                                 | If True, use the 'aggregate first' algorithm described in Gelbach (2016). Recommended in cases with many (potentially high-dimensional) covariates. False by default if the 'combine_covariates' argument is None, True otherwise. | `None`      |\n| only_coef          | bool                                 | Indicates whether to compute inference for the decomposition. Defaults to False. If True, skips the inference step and only returns the decomposition results.                                                                     | `False`     |\n| digits             | int                                  | The number of digits to round the results to. Defaults to 4.                                                                                                                                                                       | `4`         |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#f6fc703e .cell execution_count=3}\n``` {.python .cell-code}\nfrom pyfixest.utils.dgps import gelbach_data\nimport pyfixest as pf\n\ndata = gelbach_data(nobs = 1000)\nfit = pf.feols(\"y ~ x1 + x21 + x22 + x23\", data=data)\n\n# simple decomposition\nres = fit.decompose(param = \"x1\")\npf.make_table(res)\n# group covariates via \"combine_covariates\" argument\nres = fit.decompose(param = \"x1\", combine_covariates={\"g1\": [\"x21\", \"x22\"], \"g2\": [\"x23\"]})\npf.make_table(res)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:Joblib is not installed. Parallel processing will not be available. Please install the joblib module to enable parallelization.\n\r  0%|          | 0/1000 [00:00<?, ?it/s]\r  4%|▍         | 42/1000 [00:00<00:02, 416.51it/s]\r  9%|▊         | 86/1000 [00:00<00:02, 426.82it/s]\r 13%|█▎        | 129/1000 [00:00<00:02, 425.66it/s]\r 17%|█▋        | 172/1000 [00:00<00:02, 396.02it/s]\r 21%|██        | 212/1000 [00:00<00:02, 382.99it/s]\r 25%|██▌       | 251/1000 [00:00<00:02, 371.57it/s]\r 29%|██▉       | 289/1000 [00:00<00:01, 368.25it/s]\r 33%|███▎      | 328/1000 [00:00<00:01, 374.32it/s]\r 37%|███▋      | 368/1000 [00:00<00:01, 381.65it/s]\r 41%|████      | 407/1000 [00:01<00:01, 383.99it/s]\r 45%|████▍     | 446/1000 [00:01<00:01, 384.21it/s]\r 49%|████▊     | 487/1000 [00:01<00:01, 389.69it/s]\r 53%|█████▎    | 527/1000 [00:01<00:01, 346.49it/s]\r 56%|█████▋    | 563/1000 [00:01<00:01, 300.44it/s]\r 60%|█████▉    | 595/1000 [00:01<00:01, 285.00it/s]\r 62%|██████▎   | 625/1000 [00:01<00:01, 278.79it/s]\r 65%|██████▌   | 654/1000 [00:01<00:01, 271.94it/s]\r 68%|██████▊   | 682/1000 [00:02<00:01, 256.19it/s]\r 71%|███████   | 708/1000 [00:02<00:01, 238.86it/s]\r 73%|███████▎  | 733/1000 [00:02<00:01, 234.17it/s]\r 76%|███████▌  | 757/1000 [00:02<00:01, 219.43it/s]\r 78%|███████▊  | 780/1000 [00:02<00:00, 220.62it/s]\r 81%|████████  | 812/1000 [00:02<00:00, 246.42it/s]\r 84%|████████▍ | 838/1000 [00:02<00:00, 231.20it/s]\r 86%|████████▌ | 862/1000 [00:02<00:00, 218.02it/s]\r 88%|████████▊ | 885/1000 [00:02<00:00, 213.81it/s]\r 91%|█████████ | 907/1000 [00:03<00:00, 192.83it/s]\r 93%|█████████▎| 927/1000 [00:03<00:00, 190.61it/s]\r 95%|█████████▍| 947/1000 [00:03<00:00, 185.86it/s]\r 97%|█████████▋| 966/1000 [00:03<00:00, 155.52it/s]\r 98%|█████████▊| 984/1000 [00:03<00:00, 159.80it/s]\r100%|██████████| 1000/1000 [00:03<00:00, 267.42it/s]\nWARNING:root:Joblib is not installed. Parallel processing will not be available. Please install the joblib module to enable parallelization.\n\r  0%|          | 0/1000 [00:00<?, ?it/s]\r  2%|▏         | 16/1000 [00:00<00:06, 151.63it/s]\r  3%|▎         | 32/1000 [00:00<00:06, 145.58it/s]\r  5%|▍         | 47/1000 [00:00<00:06, 143.28it/s]\r  6%|▋         | 65/1000 [00:00<00:05, 156.06it/s]\r  8%|▊         | 81/1000 [00:00<00:05, 155.59it/s]\r 10%|▉         | 97/1000 [00:00<00:05, 153.98it/s]\r 11%|█▏        | 113/1000 [00:00<00:06, 146.57it/s]\r 13%|█▎        | 130/1000 [00:00<00:05, 151.32it/s]\r 15%|█▍        | 148/1000 [00:00<00:05, 158.02it/s]\r 16%|█▋        | 165/1000 [00:01<00:05, 161.49it/s]\r 18%|█▊        | 182/1000 [00:01<00:05, 161.60it/s]\r 20%|██        | 202/1000 [00:01<00:04, 172.18it/s]\r 23%|██▎       | 227/1000 [00:01<00:03, 193.78it/s]\r 26%|██▌       | 257/1000 [00:01<00:03, 223.80it/s]\r 29%|██▉       | 288/1000 [00:01<00:02, 246.80it/s]\r 32%|███▏      | 317/1000 [00:01<00:02, 258.98it/s]\r 35%|███▍      | 348/1000 [00:01<00:02, 272.21it/s]\r 38%|███▊      | 376/1000 [00:01<00:02, 267.87it/s]\r 41%|████      | 406/1000 [00:01<00:02, 277.09it/s]\r 44%|████▎     | 435/1000 [00:02<00:02, 280.46it/s]\r 47%|████▋     | 468/1000 [00:02<00:01, 292.32it/s]\r 50%|█████     | 500/1000 [00:02<00:01, 298.64it/s]\r 53%|█████▎    | 530/1000 [00:02<00:01, 273.55it/s]\r 56%|█████▌    | 558/1000 [00:02<00:01, 266.72it/s]\r 59%|█████▉    | 588/1000 [00:02<00:01, 274.06it/s]\r 62%|██████▏   | 617/1000 [00:02<00:01, 278.06it/s]\r 64%|██████▍   | 645/1000 [00:02<00:01, 273.69it/s]\r 68%|██████▊   | 675/1000 [00:02<00:01, 279.47it/s]\r 70%|███████   | 704/1000 [00:03<00:01, 244.70it/s]\r 73%|███████▎  | 730/1000 [00:03<00:01, 248.03it/s]\r 76%|███████▌  | 757/1000 [00:03<00:00, 252.05it/s]\r 78%|███████▊  | 784/1000 [00:03<00:00, 254.61it/s]\r 81%|████████▏ | 813/1000 [00:03<00:00, 262.54it/s]\r 84%|████████▍ | 840/1000 [00:03<00:00, 257.64it/s]\r 87%|████████▋ | 868/1000 [00:03<00:00, 261.14it/s]\r 90%|████████▉ | 895/1000 [00:03<00:00, 249.96it/s]\r 92%|█████████▏| 921/1000 [00:03<00:00, 238.98it/s]\r 95%|█████████▍| 946/1000 [00:04<00:00, 234.57it/s]\r 97%|█████████▋| 970/1000 [00:04<00:00, 217.54it/s]\r 99%|█████████▉| 993/1000 [00:04<00:00, 209.69it/s]\r100%|██████████| 1000/1000 [00:04<00:00, 227.39it/s]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div id=\"axjkwcdxvq\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#axjkwcdxvq table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#axjkwcdxvq thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#axjkwcdxvq p { margin: 0; padding: 0; }\n #axjkwcdxvq .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: hidden; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #axjkwcdxvq .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #axjkwcdxvq .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #axjkwcdxvq .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #axjkwcdxvq .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #axjkwcdxvq .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #axjkwcdxvq .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #axjkwcdxvq .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 0px; border-left-color: white; border-right-style: none; border-right-width: 0px; border-right-color: white; vertical-align: bottom; padding-top: 4px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #axjkwcdxvq .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #axjkwcdxvq .gt_column_spanner_outer:first-child { padding-left: 0; }\n #axjkwcdxvq .gt_column_spanner_outer:last-child { padding-right: 0; }\n #axjkwcdxvq .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; vertical-align: bottom; padding-top: 4px; padding-bottom: 4px; overflow-x: hidden; display: inline-block; width: 100%; }\n #axjkwcdxvq .gt_spanner_row { border-bottom-style: hidden; }\n #axjkwcdxvq .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 0.5px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; border-left-style: none; border-left-width: 1px; border-left-color: white; border-right-style: none; border-right-width: 1px; border-right-color: white; vertical-align: middle; text-align: left; }\n #axjkwcdxvq .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 0.5px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; vertical-align: middle; }\n #axjkwcdxvq .gt_from_md> :first-child { margin-top: 0; }\n #axjkwcdxvq .gt_from_md> :last-child { margin-bottom: 0; }\n #axjkwcdxvq .gt_row { padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: none; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 0px; border-left-color: white; border-right-style: none; border-right-width: 0px; border-right-color: white; vertical-align: middle; overflow-x: hidden; }\n #axjkwcdxvq .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: hidden; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #axjkwcdxvq .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #axjkwcdxvq .gt_row_group_first td { border-top-width: 0.5px; }\n #axjkwcdxvq .gt_row_group_first th { border-top-width: 0.5px; }\n #axjkwcdxvq .gt_striped { background-color: rgba(128,128,128,0.05); }\n #axjkwcdxvq .gt_table_body { border-top-style: solid; border-top-width: 0.5px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: black; }\n #axjkwcdxvq .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #axjkwcdxvq .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #axjkwcdxvq .gt_left { text-align: left; }\n #axjkwcdxvq .gt_center { text-align: center; }\n #axjkwcdxvq .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #axjkwcdxvq .gt_font_normal { font-weight: normal; }\n #axjkwcdxvq .gt_font_bold { font-weight: bold; }\n #axjkwcdxvq .gt_font_italic { font-style: italic; }\n #axjkwcdxvq .gt_super { font-size: 65%; }\n #axjkwcdxvq .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #axjkwcdxvq .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"\"></th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"direct_effect\">direct_effect</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"full_effect\">full_effect</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"explained_effect\">explained_effect</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">x1</th>\n    <td class=\"gt_row gt_center\">4.5257</td>\n    <td class=\"gt_row gt_center\">0.9702</td>\n    <td class=\"gt_row gt_center\">3.5555</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\"></th>\n    <td class=\"gt_row gt_center\">[4.4719, 4.5825]</td>\n    <td class=\"gt_row gt_center\">[0.9051, 1.0382]</td>\n    <td class=\"gt_row gt_center\">[3.4754, 3.6391]</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">g1</th>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\">2.5320</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\"></th>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\">[2.4370, 2.6346]</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">g2</th>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\">1.0235</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\"></th>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\"></td>\n    <td class=\"gt_row gt_center\">[0.9351, 1.1148]</td>\n  </tr>\n</tbody>\n  <tfoot class=\"gt_sourcenotes\">\n  \n  <tr>\n    <td class=\"gt_sourcenote\" colspan=\"4\"></td>\n  </tr>\n\n</tfoot>\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n### demean { #pyfixest.estimation.feols_.Feols.demean }\n\n```python\nestimation.feols_.Feols.demean()\n```\n\nDemean the dependent variable and covariates by the fixed effect(s).\n\n### drop_multicol_vars { #pyfixest.estimation.feols_.Feols.drop_multicol_vars }\n\n```python\nestimation.feols_.Feols.drop_multicol_vars()\n```\n\nDetect and drop multicollinear variables.\n\n### fixef { #pyfixest.estimation.feols_.Feols.fixef }\n\n```python\nestimation.feols_.Feols.fixef(atol=1e-06, btol=1e-06)\n```\n\nCompute the coefficients of (swept out) fixed effects for a regression model.\n\nThis method creates the following attributes:\n- `alphaDF` (pd.DataFrame): A DataFrame with the estimated fixed effects.\n- `sumFE` (np.array): An array with the sum of fixed effects for each\nobservation (i = 1, ..., N).\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type   | Description   |\n|--------|--------|---------------|\n|        | None   |               |\n\n### get_fit { #pyfixest.estimation.feols_.Feols.get_fit }\n\n```python\nestimation.feols_.Feols.get_fit()\n```\n\nFit an OLS model.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type   | Description   |\n|--------|--------|---------------|\n|        | None   |               |\n\n### get_inference { #pyfixest.estimation.feols_.Feols.get_inference }\n\n```python\nestimation.feols_.Feols.get_inference(alpha=0.05)\n```\n\nCompute standard errors, t-statistics, and p-values for the regression model.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name   | Type   | Description                                                                                                  | Default   |\n|--------|--------|--------------------------------------------------------------------------------------------------------------|-----------|\n| alpha  | float  | The significance level for confidence intervals. Defaults to 0.05, which produces a 95% confidence interval. | `0.05`    |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type   | Description   |\n|--------|--------|---------------|\n|        | None   |               |\n\n### get_performance { #pyfixest.estimation.feols_.Feols.get_performance }\n\n```python\nestimation.feols_.Feols.get_performance()\n```\n\nGet Goodness-of-Fit measures.\n\nCompute multiple additional measures commonly reported with linear\nregression output, including R-squared and adjusted R-squared. Note that\nvariables with the suffix _within use demeaned dependent variables Y,\nwhile variables without do not or are invariant to demeaning.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type                                                                 | Description   |\n|--------|----------------------------------------------------------------------|---------------|\n|        | None                                                                 |               |\n|        | Creates the following instances:                                     |               |\n|        | - r2 (float): R-squared of the regression model.                     |               |\n|        | - adj_r2 (float): Adjusted R-squared of the regression model.        |               |\n|        | - r2_within (float): R-squared of the regression model, computed on  |               |\n|        | demeaned dependent variable.                                         |               |\n|        | - adj_r2_within (float): Adjusted R-squared of the regression model, |               |\n|        | computed on demeaned dependent variable.                             |               |\n\n### plot_ritest { #pyfixest.estimation.feols_.Feols.plot_ritest }\n\n```python\nestimation.feols_.Feols.plot_ritest(plot_backend='lets_plot')\n```\n\nPlot the distribution of the Randomization Inference Statistics.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name         | Type   | Description                                                                                     | Default       |\n|--------------|--------|-------------------------------------------------------------------------------------------------|---------------|\n| plot_backend | str    | The plotting backend to use. Defaults to \"lets_plot\". Alternatively, \"matplotlib\" is available. | `'lets_plot'` |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type                                                                        | Description   |\n|--------|-----------------------------------------------------------------------------|---------------|\n|        | A lets_plot or matplotlib figure with the distribution of the Randomization |               |\n|        | Inference Statistics.                                                       |               |\n\n### predict { #pyfixest.estimation.feols_.Feols.predict }\n\n```python\nestimation.feols_.Feols.predict(\n    newdata=None,\n    atol=1e-06,\n    btol=1e-06,\n    type='link',\n)\n```\n\nPredict values of the model on new data.\n\nReturn a flat np.array with predicted values of the regression model.\nIf new fixed effect levels are introduced in `newdata`, predicted values\nfor such observations will be set to NaN.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name    | Type                      | Description                                                                                                                                                    | Default    |\n|---------|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| newdata | Optional\\[DataFrameType\\] | A narwhals compatible DataFrame (polars, pandas, duckdb, etc). If None (default), the data used for fitting the model is used.                                 | `None`     |\n| type    | str                       | The type of prediction to be computed. Can be either \"response\" (default) or \"link\". For linear models, both are identical.                                    | `'link'`   |\n| atol    | Float                     | Stopping tolerance for scipy.sparse.linalg.lsqr(). See https://docs.scipy.org/doc/     scipy/reference/generated/scipy.sparse.linalg.lsqr.html                 | `1e-6`     |\n| btol    | Float                     | Another stopping tolerance for scipy.sparse.linalg.lsqr(). See https://docs.scipy.org/doc/     scipy/reference/generated/scipy.sparse.linalg.lsqr.html         | `1e-6`     |\n| link    |                           | The type of prediction to be made. Can be either 'link' or 'response'.  Defaults to 'link'. 'link' and 'response' lead to identical results for linear models. | _required_ |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type       | Description                                                    |\n|--------|------------|----------------------------------------------------------------|\n| y_hat  | np.ndarray | A flat np.array with predicted values of the regression model. |\n\n### prepare_model_matrix { #pyfixest.estimation.feols_.Feols.prepare_model_matrix }\n\n```python\nestimation.feols_.Feols.prepare_model_matrix()\n```\n\nPrepare model matrices for estimation.\n\n### pvalue { #pyfixest.estimation.feols_.Feols.pvalue }\n\n```python\nestimation.feols_.Feols.pvalue()\n```\n\nFitted model p-values.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                                  |\n|--------|-----------|--------------------------------------------------------------|\n|        | pd.Series | A pd.Series with p-values of the estimated regression model. |\n\n### resid { #pyfixest.estimation.feols_.Feols.resid }\n\n```python\nestimation.feols_.Feols.resid()\n```\n\nFitted model residuals.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type       | Description                                                        |\n|--------|------------|--------------------------------------------------------------------|\n|        | np.ndarray | A np.ndarray with the residuals of the estimated regression model. |\n\n### ritest { #pyfixest.estimation.feols_.Feols.ritest }\n\n```python\nestimation.feols_.Feols.ritest(\n    resampvar,\n    cluster=None,\n    reps=100,\n    type='randomization-c',\n    rng=None,\n    choose_algorithm='auto',\n    store_ritest_statistics=False,\n    level=0.95,\n)\n```\n\nConduct Randomization Inference (RI) test against a null hypothesis of\n`resampvar = 0`.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name                    | Type                | Description                                                                                                                                                                                                                                             | Default             |\n|-------------------------|---------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------|\n| resampvar               | str                 | The name of the variable to be resampled.                                                                                                                                                                                                               | _required_          |\n| cluster                 | str                 | The name of the cluster variable in case of cluster random assignment. If provided, `resampvar` is held constant within each `cluster`. Defaults to None.                                                                                               | `None`              |\n| reps                    | int                 | The number of randomization iterations. Defaults to 100.                                                                                                                                                                                                | `100`               |\n| type                    | str                 | The type of the randomization inference test. Can be \"randomization-c\" or \"randomization-t\". Note that the \"randomization-c\" is much faster, while the \"randomization-t\" is recommended by Wu & Ding (JASA, 2021).                                      | `'randomization-c'` |\n| rng                     | np.random.Generator | A random number generator. Defaults to None.                                                                                                                                                                                                            | `None`              |\n| choose_algorithm        | str                 | The algorithm to use for the computation. Defaults to \"auto\". The alternative is \"fast\" and \"slow\", and should only be used for running CI tests. Ironically, this argument is not tested for any input errors from the user! So please don't use it =) | `'auto'`            |\n| include_plot            |                     | Whether to include a plot of the distribution p-values. Defaults to False.                                                                                                                                                                              | _required_          |\n| store_ritest_statistics | bool                | Whether to store the simulated statistics of the RI procedure. Defaults to False. If True, stores the simulated statistics in the model object via the `ritest_statistics` attribute as a numpy array.                                                  | `False`             |\n| level                   | float               | The level for the confidence interval of the randomization inference p-value. Defaults to 0.95.                                                                                                                                                         | `0.95`              |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type                                                                        | Description   |\n|--------|-----------------------------------------------------------------------------|---------------|\n|        | A pd.Series with the regression coefficient of `resampvar` and the p-value  |               |\n|        | of the RI test. Additionally, reports the standard error and the confidence |               |\n|        | interval of the p-value.                                                    |               |\n\n### se { #pyfixest.estimation.feols_.Feols.se }\n\n```python\nestimation.feols_.Feols.se()\n```\n\nFitted model standard errors.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                                             |\n|--------|-----------|-------------------------------------------------------------------------|\n|        | pd.Series | A pd.Series with the standard errors of the estimated regression model. |\n\n### solve_ols { #pyfixest.estimation.feols_.Feols.solve_ols }\n\n```python\nestimation.feols_.Feols.solve_ols(tZX, tZY, solver)\n```\n\nSolve the ordinary least squares problem using the specified solver.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name   | Type       | Description   | Default    |\n|--------|------------|---------------|------------|\n| tZX    | np.ndarray |               | _required_ |\n| tZY    | np.ndarray |               | _required_ |\n| solver | str        |               | _required_ |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type                                                            | Description   |\n|--------|-----------------------------------------------------------------|---------------|\n|        | array-like: The solution to the ordinary least squares problem. |               |\n\n#### Raises {.doc-section .doc-section-raises}\n\n| Name   | Type                                                  | Description   |\n|--------|-------------------------------------------------------|---------------|\n|        | ValueError: If the specified solver is not supported. |               |\n\n### tidy { #pyfixest.estimation.feols_.Feols.tidy }\n\n```python\nestimation.feols_.Feols.tidy(alpha=None)\n```\n\nTidy model outputs.\n\nReturn a tidy pd.DataFrame with the point estimates, standard errors,\nt-statistics, and p-values.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name   | Type              | Description                                                                                                        | Default   |\n|--------|-------------------|--------------------------------------------------------------------------------------------------------------------|-----------|\n| alpha  | Optional\\[float\\] | The significance level for the confidence intervals. If None, computes a 95% confidence interval (`alpha = 0.05`). | `None`    |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name    | Type         | Description                                                                                                                    |\n|---------|--------------|--------------------------------------------------------------------------------------------------------------------------------|\n| tidy_df | pd.DataFrame | A tidy pd.DataFrame containing the regression results, including point estimates, standard errors, t-statistics, and p-values. |\n\n### to_array { #pyfixest.estimation.feols_.Feols.to_array }\n\n```python\nestimation.feols_.Feols.to_array()\n```\n\nConvert estimation data frames to np arrays.\n\n### tstat { #pyfixest.estimation.feols_.Feols.tstat }\n\n```python\nestimation.feols_.Feols.tstat()\n```\n\nFitted model t-statistics.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                                      |\n|--------|-----------|------------------------------------------------------------------|\n|        | pd.Series | A pd.Series with t-statistics of the estimated regression model. |\n\n### update { #pyfixest.estimation.feols_.Feols.update }\n\n```python\nestimation.feols_.Feols.update(X_new, y_new, inplace=False)\n```\n\nUpdate coefficients for new observations using Sherman-Morrison formula.\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type       | Description          |\n|--------|------------|----------------------|\n|        | np.ndarray | Updated coefficients |\n\n### vcov { #pyfixest.estimation.feols_.Feols.vcov }\n\n```python\nestimation.feols_.Feols.vcov(vcov, data=None)\n```\n\nCompute covariance matrices for an estimated regression model.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name   | Type                           | Description                                                                                                                                                                                                                                                                                                                                                                  | Default    |\n|--------|--------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| vcov   | Union\\[str, dict\\[str, str\\]\\] | A string or dictionary specifying the type of variance-covariance matrix to use for inference. If a string, it can be one of \"iid\", \"hetero\", \"HC1\", \"HC2\", \"HC3\". If a dictionary, it should have the format {\"CRV1\": \"clustervar\"} for CRV1 inference or {\"CRV3\": \"clustervar\"} for CRV3 inference. Note that CRV3 inference is currently not supported for IV estimation. | _required_ |\n| data   | Optional\\[DataFrameType\\]      | The data used for estimation. If None, tries to fetch the data from the model object. Defaults to None.                                                                                                                                                                                                                                                                      | `None`     |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type   | Description                                                               |\n|--------|--------|---------------------------------------------------------------------------|\n|        | Feols  | An instance of class [Feols(/reference/Feols.qmd) with updated inference. |\n\n### wald_test { #pyfixest.estimation.feols_.Feols.wald_test }\n\n```python\nestimation.feols_.Feols.wald_test(R=None, q=None, distribution='F')\n```\n\nConduct Wald test.\n\nCompute a Wald test for a linear hypothesis of the form R * β = q.\nwhere R is m x k matrix, β is a k x 1 vector of coefficients,\nand q is m x 1 vector.\nBy default, tests the joint null hypothesis that all coefficients are zero.\n\nThis method producues the following attriutes\n\n_dfd : int\n    degree of freedom in denominator\n_dfn : int\n    degree of freedom in numerator\n_wald_statistic : scalar\n    Wald-statistics computed for hypothesis testing\n_f_statistic : scalar\n    Wald-statistics(when R is an indentity matrix, and q being zero vector)\n    computed for hypothesis testing\n_p_value : scalar\n    corresponding p-value for statistics\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name         | Type         | Description                                                                            | Default   |\n|--------------|--------------|----------------------------------------------------------------------------------------|-----------|\n| R            | array - like | The matrix R of the linear hypothesis. If None, defaults to an identity matrix.        | `None`    |\n| q            | array - like | The vector q of the linear hypothesis. If None, defaults to a vector of zeros.         | `None`    |\n| distribution | str          | The distribution to use for the p-value. Can be either \"F\" or \"chi2\". Defaults to \"F\". | `'F'`     |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                      |\n|--------|-----------|--------------------------------------------------|\n|        | pd.Series | A pd.Series with the Wald statistic and p-value. |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#85716bcd .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport pyfixest as pf\n\ndata = pf.get_data()\nfit = pf.feols(\"Y ~ X1 + X2| f1\", data, vcov={\"CRV1\": \"f1\"}, ssc=pf.ssc(adj=False))\n\nR = np.array([[1,-1]] )\nq = np.array([0.0])\n\n# Wald test\nfit.wald_test(R=R, q=q, distribution = \"chi2\")\nf_stat = fit._f_statistic\np_stat = fit._p_value\n\nprint(f\"Python f_stat: {f_stat}\")\nprint(f\"Python p_stat: {p_stat}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython f_stat: 126.4065047404348\nPython p_stat: 2.505309282814187e-29\n```\n:::\n:::\n\n\n### wildboottest { #pyfixest.estimation.feols_.Feols.wildboottest }\n\n```python\nestimation.feols_.Feols.wildboottest(\n    reps,\n    cluster=None,\n    param=None,\n    weights_type='rademacher',\n    impose_null=True,\n    bootstrap_type='11',\n    seed=None,\n    adj=True,\n    cluster_adj=True,\n    parallel=False,\n    return_bootstrapped_t_stats=False,\n)\n```\n\nRun a wild cluster bootstrap based on an object of type \"Feols\".\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name                        | Type               | Description                                                                                                                                                                                                               | Default        |\n|-----------------------------|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------|\n| reps                        | int                | The number of bootstrap iterations to run.                                                                                                                                                                                | _required_     |\n| cluster                     | Union\\[str, None\\] | The variable used for clustering. Defaults to None. If None, then uses the variable specified in the model's `clustervar` attribute. If no `_clustervar` attribute is found, runs a heteroskedasticity- robust bootstrap. | `None`         |\n| param                       | Union\\[str, None\\] | A string of length one, containing the test parameter of interest. Defaults to None.                                                                                                                                      | `None`         |\n| weights_type                | str                | The type of bootstrap weights. Options are 'rademacher', 'mammen', 'webb', or 'normal'. Defaults to 'rademacher'.                                                                                                         | `'rademacher'` |\n| impose_null                 | bool               | Indicates whether to impose the null hypothesis on the bootstrap DGP. Defaults to True.                                                                                                                                   | `True`         |\n| bootstrap_type              | str                | A string of length one to choose the bootstrap type. Options are '11', '31', '13', or '33'. Defaults to '11'.                                                                                                             | `'11'`         |\n| seed                        | Union\\[int, None\\] | An option to provide a random seed. Defaults to None.                                                                                                                                                                     | `None`         |\n| adj                         | bool               | Indicates whether to apply a small sample adjustment for the number of observations and covariates. Defaults to True.                                                                                                     | `True`         |\n| cluster_adj                 | bool               | Indicates whether to apply a small sample adjustment for the number of clusters. Defaults to True.                                                                                                                        | `True`         |\n| parallel                    | bool               | Indicates whether to run the bootstrap in parallel. Defaults to False.                                                                                                                                                    | `False`        |\n| seed                        | Union\\[str, None\\] | An option to provide a random seed. Defaults to None.                                                                                                                                                                     | `None`         |\n| return_bootstrapped_t_stats | bool, optional:    | If True, the method returns a tuple of the regular output and the bootstrapped t-stats. Defaults to False.                                                                                                                | `False`        |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type         | Description                                                                                                                                                                                                                                                                                                                                 |\n|--------|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|        | pd.DataFrame | A DataFrame with the original, non-bootstrapped t-statistic and bootstrapped p-value, along with the bootstrap type, inference type (HC vs CRV), and whether the null hypothesis was imposed on the bootstrap DGP. If `return_bootstrapped_t_stats` is True, the method returns a tuple of the regular output and the bootstrapped t-stats. |\n\n### wls_transform { #pyfixest.estimation.feols_.Feols.wls_transform }\n\n```python\nestimation.feols_.Feols.wls_transform()\n```\n\nTransform model matrices for WLS Estimation.\n\n",
    "supporting": [
      "estimation.feols_.Feols_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}