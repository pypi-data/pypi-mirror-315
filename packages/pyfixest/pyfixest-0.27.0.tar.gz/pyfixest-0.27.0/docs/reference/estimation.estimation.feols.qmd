# estimation.estimation.feols { #pyfixest.estimation.estimation.feols }

```python
estimation.estimation.feols(
    fml,
    data,
    vcov=None,
    weights=None,
    ssc=ssc(),
    fixef_rm='none',
    fixef_tol=1e-08,
    collin_tol=1e-10,
    drop_intercept=False,
    i_ref1=None,
    copy_data=True,
    store_data=True,
    lean=False,
    weights_type='aweights',
    solver='np.linalg.solve',
    use_compression=False,
    reps=100,
    seed=None,
    split=None,
    fsplit=None,
)
```

Estimate a linear regression models with fixed effects using fixest formula syntax.

## Parameters {.doc-section .doc-section-parameters}

| Name            | Type                           | Description| Default             |
|-----------------|--------------------------------||---------------------|
| fml             | str                            | A three-sided formula string using fixest formula syntax. Syntax: "Y ~ X1 + X2 \| FE1 + FE2 \| X1 ~ Z1". "\|" separates dependent variable, fixed effects, and instruments. Special syntax includes stepwise regressions, cumulative stepwise regression, multiple dependent variables, interaction of variables (i(X1,X2)), and interacted fixed effects (fe1^fe2).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | _required_          |
| data            | DataFrameType                  | A pandas or polars dataframe containing the variables in the formula.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | _required_          |
| vcov            | Union\[str, dict\[str, str\]\] | Type of variance-covariance matrix for inference. Options include "iid", "hetero", "HC1", "HC2", "HC3", or a dictionary for CRV1/CRV3 inference| `None`              |
| weights         | Union\[None, str\], optional.  | Default is None. Weights for WLS estimation. If None, all observations are weighted equally. If a string, the name of the column in `data` that contains the weights| `None`              |
| ssc             | str                            | A ssc object specifying the small sample correction for inference| `ssc()`             |
| fixef_rm        | str                            | Specifies whether to drop singleton fixed effects. Options: "none" (default), "singleton| `'none'`            |
| collin_tol      | float                          | Tolerance for collinearity check, by default 1e| `1e-10`             |
| fixef_tol       |                                | Tolerance for the fixed effects demeaning algorithm. Defaults to 1e| `1e-08`             |
| drop_intercept  | bool                           | Whether to drop the intercept from the model, by default False| `False`             |
| i_ref1          |                                | Deprecated with pyfixest version 0.18.0. Please use i-syntax instead, i.e. feols('Y~ i(f1, ref=1)', data = data) instead of the former feols('Y~ i(f1)', data = data, i_ref=1).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `None`              |
| copy_data       | bool                           | Whether to copy the data before estimation, by default True. If set to False, the data is not copied, which can save memory but may lead to unintended changes in the input data outside of `fepois`. For example, the input data set is re-index within the function. As far as I know, the only other relevant case is when using interacted fixed effects, in which case you'll find a column with interacted fixed effects in the data set| `True`              |
| store_data      | bool                           | Whether to store the data in the model object, by default True. If set to False, the data is not stored in the model object, which can improve performance and save memory. However, it will no longer be possible to access the data via the `data` attribute of the model object. This has impact on post-estimation capabilities that rely on the data, e.g. `predict()` or `vcov()`| `True`              |
| lean            | bool                           | False by default. If True, then all large objects are removed from the returned result: this will save memory but will block the possibility to use many methods. It is recommended to use the argument vcov to obtain the appropriate standard-errors at estimation time, since obtaining different SEs won't be possible afterwards.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | `False`             |
| weights_type    | str                            | Options include `aweights` or `fweights`. `aweights` implement analytic or precision weights, while `fweights` implement frequency weights. For details see this blog post: https://notstatschat.rbind.io/2020/08/04/weights-in-statistics| `'aweights'`        |
| solver          | str, optional.                 | The solver to use for the regression. Can be either "np.linalg.solve" or "np.linalg.lstsq". Defaults to "np.linalg.solve| `'np.linalg.solve'` |
| use_compression | bool                           | Whether to use sufficient statistics to losslessly fit the regression model on compressed data. False by default. If True, the model is estimated on compressed data, which can lead to a significant speed-up for large data sets. See the paper by Wong et al (2021) for more details https://arxiv.org/abs/2102.11297. Note that if `use_compression = True`, inference is lossless. If standard errors are clustered, a wild cluster bootstrap is employed. Parameters for the wild bootstrap can be specified via the `reps` and `seed` arguments. Additionally, note that for one-way fixed effects, the estimation method uses a Mundlak transform to "control" for the fixed effects. For two-way fixed effects, a two-way Mundlak transform is employed. For two-way fixed effects, the Mundlak transform is only identical to a two-way fixed effects model if the data set is a panel. We do not provide any checks for the panel status of the data set. | `False`             |
| reps            | int                            | Number of bootstrap repetitions. Only relevant for boostrap inference applied to compute cluster robust errors when `use_compression = True`| `100`               |
| seed            | Optional\[int\]                | Seed for the random number generator. Only relevant for boostrap inference applied to compute cluster robust errors when `use_compression = True`| `None`              |
| split           | Optional\[str\]                | A character string, i.e. 'split = var'. If provided, the sample is split according to the variable and one estimation is performed for each value of that variable. If you also want to include the estimation for the full sample, use the argument fsplit instead| `None`              |
| fsplit          | Optional\[str\]                | This argument is the same as split but also includes the full sample as the first estimation| `None`              |

## Returns {.doc-section .doc-section-returns}

| Name   | Type   | Description                                                                                                           |
|--------|--------|-----------------------------------------------------------------------------------------------------------------------|
|        | object | An instance of the [Feols(/reference/Feols.qmd) class or `FixestMulti` class for multiple models specified via `fml`. |

## Examples {.doc-section .doc-section-examples}

As in `fixest`, the [Feols(/reference/Feols.qmd) function can be used to
estimate a simple linear regression model with fixed effects.
The following example regresses `Y` on `X1` and `X2` with fixed effects for
`f1` and `f2`: fixed effects are specified after the `|` symbol.

```{python}
import pyfixest as pf

data = pf.get_data()

fit = pf.feols("Y ~ X1 + X2 | f1 + f2", data)
fit.summary()
```

Calling `feols()` returns an instance of the [Feols(/reference/Feols.qmd)
class. The `summary()` method can be used to print the results.

An alternative way to retrieve model results is via the `tidy()` method, which
returns a pandas dataframe with the estimated coefficients, standard errors,
t-statistics, and p-values.

```{python}
fit.tidy()
```

You can also access all elements in the tidy data frame by dedicated methods,
e.g. `fit.coef()` for the coefficients, `fit.se()` for the standard errors,
`fit.tstat()` for the t-statistics, and `fit.pval()` for the p-values, and
`fit.confint()` for the confidence intervals.

The employed type of inference can be specified via the `vcov` argument. If
vcov is not provided, `PyFixest` employs the `fixest` default of iid inference,
unless there are fixed effects in the model, in which case `feols()` clusters
the standard error by the first fixed effect (CRV1 inference).

```{python}
fit1 = pf.feols("Y ~ X1 + X2 | f1 + f2", data, vcov="iid")
fit2 = pf.feols("Y ~ X1 + X2 | f1 + f2", data, vcov="hetero")
fit3 = pf.feols("Y ~ X1 + X2 | f1 + f2", data, vcov={"CRV1": "f1"})
```

Supported inference types are "iid", "hetero", "HC1", "HC2", "HC3", and
"CRV1"/"CRV3". Clustered standard errors are specified via a dictionary,
e.g. `{"CRV1": "f1"}` for CRV1 inference with clustering by `f1` or
`{"CRV3": "f1"}` for CRV3 inference with clustering by `f1`. For two-way
clustering, you can provide a formula string, e.g. `{"CRV1": "f1 + f2"}` for
CRV1 inference with clustering by `f1`.

```{python}
fit4 = pf.feols("Y ~ X1 + X2 | f1 + f2", data, vcov={"CRV1": "f1 + f2"})
```

Inference can be adjusted post estimation via the `vcov` method:

```{python}
fit.summary()
fit.vcov("iid").summary()
```

The `ssc` argument specifies the small sample correction for inference. In
general, `feols()` uses all of `fixest::feols()` defaults, but sets the
`fixef.K` argument to `"none"` whereas the `fixest::feols()` default is `"nested"`.
See here for more details: [link to github](https://github.com/py-econometrics/pyfixest/issues/260).

`feols()` supports a range of multiple estimation syntax, i.e. you can estimate
multiple models in one call. The following example estimates two models, one with
fixed effects for `f1` and one with fixed effects for `f2` using the `sw()` syntax.

```{python}
fit = pf.feols("Y ~ X1 + X2 | sw(f1, f2)", data)
type(fit)
```

The returned object is an instance of the `FixestMulti` class. You can access
the results of the first model via `fit.fetch_model(0)` and the results of
the second model via `fit.fetch_model(1)`. You can compare the model results
via the `etable()` function:

```{python}
pf.etable(fit)
```

Other supported multiple estimation syntax include `sw0()`, `csw()` and `csw0()`.
While `sw()` adds variables in a "stepwise" fashion, `csw()` does so cumulatively.

```{python}
fit = pf.feols("Y ~ X1 + X2 | csw(f1, f2)", data)
pf.etable(fit)
```

The `sw0()` and `csw0()` syntax are similar to `sw()` and `csw()`, but start
with a model that excludes the variables specified in `sw()` and `csw()`:

```{python}
fit = pf.feols("Y ~ X1 + X2 | sw0(f1, f2)", data)
pf.etable(fit)
```

The `feols()` function also supports multiple dependent variables. The following
example estimates two models, one with `Y1` as the dependent variable and one
with `Y2` as the dependent variable.

```{python}
fit = pf.feols("Y + Y2 ~ X1 | f1 + f2", data)
pf.etable(fit)
```

It is possible to combine different multiple estimation operators:

```{python}
fit = pf.feols("Y + Y2 ~ X1 | sw(f1, f2)", data)
pf.etable(fit)
```

In general, using muliple estimation syntax can improve the estimation time
as covariates that are demeaned in one model and are used in another model do
not need to be demeaned again: `feols()` implements a caching mechanism that
stores the demeaned covariates.

Additionally, you can fit models on different samples via the split and fsplit
arguments. The split argument splits the sample according to the variable
specified in the argument, while the fsplit argument also includes the full
sample in the estimation.

```{python}
fit = pf.feols("Y ~ X1 + X2 | f1 + f2", data, split = "f1")
pf.etable(fit)
```

Besides OLS, `feols()` also supports IV estimation via three part formulas:

```{python}
fit = pf.feols("Y ~  X2 | f1 + f2 | X1 ~ Z1", data)
fit.tidy()
```
Here, `X1` is the endogenous variable and `Z1` is the instrument. `f1` and `f2`
are the fixed effects, as before. To estimate IV models without fixed effects,
simply omit the fixed effects part of the formula:

```{python}
fit = pf.feols("Y ~  X2 | X1 ~ Z1", data)
fit.tidy()
```

Last, `feols()` supports interaction of variables via the `i()` syntax.
Documentation on this is tba.

After fitting a model via `feols()`, you can use the `predict()` method to
get the predicted values:

```{python}
fit = pf.feols("Y ~ X1 + X2 | f1 + f2", data)
fit.predict()[0:5]
```

The `predict()` method also supports a `newdata` argument to predict on new data,
which returns a numpy array of the predicted values:

```{python}
fit = pf.feols("Y ~ X1 + X2 | f1 + f2", data)
fit.predict(newdata=data)[0:5]
```

Last, you can plot the results of a model via the `coefplot()` method:

```{python}
fit = pf.feols("Y ~ X1 + X2 | f1 + f2", data)
fit.coefplot()
```

Objects of type `Feols` support a range of other methods to conduct inference.
For example, you can run a wild (cluster) bootstrap via the `wildboottest()` method:

```{python}
fit.wildboottest(param = "X1", reps=1000)
```
would run a wild bootstrap test for the coefficient of `X1` with 1000
bootstrap repetitions.

For a wild cluster bootstrap, you can specify the cluster variable
  via the `cluster` argument:

```{python}
fit.wildboottest(param = "X1", reps=1000, cluster="group_id")
```

The `ritest()` method can be used to conduct randomization inference:

```{python}
fit.ritest(resampvar = "X1", reps=1000)
```

Last, you can compute the cluster causal variance estimator by Athey et
al by using the `ccv()` method:

```{python}
import numpy as np
rng = np.random.default_rng(1234)
data["D"] = rng.choice([0, 1], size = data.shape[0])
fit_D = pf.feols("Y ~ D", data = data)
fit_D.ccv(treatment = "D", cluster = "group_id")
```