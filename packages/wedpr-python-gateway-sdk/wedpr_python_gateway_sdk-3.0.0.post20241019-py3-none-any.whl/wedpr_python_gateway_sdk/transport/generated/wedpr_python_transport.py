# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

import weakref
from sys import version_info as _swig_python_version_info

# Import the low-level C/C++ module
from wedpr_python_gateway_sdk.libs import _wedpr_python_transport


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError(
                "You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_SwigPyIterator

    def value(self):
        return _wedpr_python_transport.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _wedpr_python_transport.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _wedpr_python_transport.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _wedpr_python_transport.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _wedpr_python_transport.SwigPyIterator_equal(self, x)

    def copy(self):
        return _wedpr_python_transport.SwigPyIterator_copy(self)

    def next(self):
        return _wedpr_python_transport.SwigPyIterator_next(self)

    def __next__(self):
        return _wedpr_python_transport.SwigPyIterator___next__(self)

    def previous(self):
        return _wedpr_python_transport.SwigPyIterator_previous(self)

    def advance(self, n):
        return _wedpr_python_transport.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _wedpr_python_transport.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _wedpr_python_transport.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _wedpr_python_transport.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _wedpr_python_transport.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _wedpr_python_transport.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _wedpr_python_transport.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self


# Register SwigPyIterator in _wedpr_python_transport:
_wedpr_python_transport.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _wedpr_python_transport.SHARED_PTR_DISOWN


class SharedBcosError(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedBcosError_swiginit(
            self, _wedpr_python_transport.new_SharedBcosError())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedBcosError


# Register SharedBcosError in _wedpr_python_transport:
_wedpr_python_transport.SharedBcosError_swigregister(SharedBcosError)


class SharedFrontConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedFrontConfig_swiginit(
            self, _wedpr_python_transport.new_SharedFrontConfig())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedFrontConfig


# Register SharedFrontConfig in _wedpr_python_transport:
_wedpr_python_transport.SharedFrontConfig_swigregister(SharedFrontConfig)


class SharedGrpcConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedGrpcConfig_swiginit(
            self, _wedpr_python_transport.new_SharedGrpcConfig())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedGrpcConfig


# Register SharedGrpcConfig in _wedpr_python_transport:
_wedpr_python_transport.SharedGrpcConfig_swigregister(SharedGrpcConfig)


class SharedFront(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedFront_swiginit(
            self, _wedpr_python_transport.new_SharedFront())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedFront


# Register SharedFront in _wedpr_python_transport:
_wedpr_python_transport.SharedFront_swigregister(SharedFront)


class SharedNodeDiscovery(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedNodeDiscovery_swiginit(
            self, _wedpr_python_transport.new_SharedNodeDiscovery())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedNodeDiscovery


# Register SharedNodeDiscovery in _wedpr_python_transport:
_wedpr_python_transport.SharedNodeDiscovery_swigregister(SharedNodeDiscovery)


class SharedNodeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedNodeInfo_swiginit(
            self, _wedpr_python_transport.new_SharedNodeInfo())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedNodeInfo


# Register SharedNodeInfo in _wedpr_python_transport:
_wedpr_python_transport.SharedNodeInfo_swigregister(SharedNodeInfo)


class SharedFrontClient(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedFrontClient_swiginit(
            self, _wedpr_python_transport.new_SharedFrontClient())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedFrontClient


# Register SharedFrontClient in _wedpr_python_transport:
_wedpr_python_transport.SharedFrontClient_swigregister(SharedFrontClient)


class SharedErrorCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedErrorCallback_swiginit(
            self, _wedpr_python_transport.new_SharedErrorCallback())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedErrorCallback


# Register SharedErrorCallback in _wedpr_python_transport:
_wedpr_python_transport.SharedErrorCallback_swigregister(SharedErrorCallback)


class SharedMessageDispatcherHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessageDispatcherHandler_swiginit(
            self, _wedpr_python_transport.new_SharedMessageDispatcherHandler())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessageDispatcherHandler


# Register SharedMessageDispatcherHandler in _wedpr_python_transport:
_wedpr_python_transport.SharedMessageDispatcherHandler_swigregister(
    SharedMessageDispatcherHandler)


class SharedIMessageHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedIMessageHandler_swiginit(
            self, _wedpr_python_transport.new_SharedIMessageHandler())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedIMessageHandler


# Register SharedIMessageHandler in _wedpr_python_transport:
_wedpr_python_transport.SharedIMessageHandler_swigregister(
    SharedIMessageHandler)


class SharedGetPeersInfoHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedGetPeersInfoHandler_swiginit(
            self, _wedpr_python_transport.new_SharedGetPeersInfoHandler())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedGetPeersInfoHandler


# Register SharedGetPeersInfoHandler in _wedpr_python_transport:
_wedpr_python_transport.SharedGetPeersInfoHandler_swigregister(
    SharedGetPeersInfoHandler)


class SharedGateway(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedGateway_swiginit(
            self, _wedpr_python_transport.new_SharedGateway())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedGateway


# Register SharedGateway in _wedpr_python_transport:
_wedpr_python_transport.SharedGateway_swigregister(SharedGateway)


class SharedMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessage_swiginit(
            self, _wedpr_python_transport.new_SharedMessage())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessage


# Register SharedMessage in _wedpr_python_transport:
_wedpr_python_transport.SharedMessage_swigregister(SharedMessage)


class SharedMessageHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessageHeader_swiginit(
            self, _wedpr_python_transport.new_SharedMessageHeader())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessageHeader


# Register SharedMessageHeader in _wedpr_python_transport:
_wedpr_python_transport.SharedMessageHeader_swigregister(SharedMessageHeader)


class SharedMessagePayload(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessagePayload_swiginit(
            self, _wedpr_python_transport.new_SharedMessagePayload())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessagePayload


# Register SharedMessagePayload in _wedpr_python_transport:
_wedpr_python_transport.SharedMessagePayload_swigregister(SharedMessagePayload)


class SharedRouteInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedRouteInfo_swiginit(
            self, _wedpr_python_transport.new_SharedRouteInfo())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedRouteInfo


# Register SharedRouteInfo in _wedpr_python_transport:
_wedpr_python_transport.SharedRouteInfo_swigregister(SharedRouteInfo)


class SharedMessageBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessageBuilder_swiginit(
            self, _wedpr_python_transport.new_SharedMessageBuilder())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessageBuilder


# Register SharedMessageBuilder in _wedpr_python_transport:
_wedpr_python_transport.SharedMessageBuilder_swigregister(SharedMessageBuilder)


class SharedMessageHeaderBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessageHeaderBuilder_swiginit(
            self, _wedpr_python_transport.new_SharedMessageHeaderBuilder())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessageHeaderBuilder


# Register SharedMessageHeaderBuilder in _wedpr_python_transport:
_wedpr_python_transport.SharedMessageHeaderBuilder_swigregister(
    SharedMessageHeaderBuilder)


class SharedMessagePayloadBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedMessagePayloadBuilder_swiginit(
            self, _wedpr_python_transport.new_SharedMessagePayloadBuilder())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedMessagePayloadBuilder


# Register SharedMessagePayloadBuilder in _wedpr_python_transport:
_wedpr_python_transport.SharedMessagePayloadBuilder_swigregister(
    SharedMessagePayloadBuilder)


class SharedRouteInfoBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.SharedRouteInfoBuilder_swiginit(
            self, _wedpr_python_transport.new_SharedRouteInfoBuilder())
    __swig_destroy__ = _wedpr_python_transport.delete_SharedRouteInfoBuilder


# Register SharedRouteInfoBuilder in _wedpr_python_transport:
_wedpr_python_transport.SharedRouteInfoBuilder_swigregister(
    SharedRouteInfoBuilder)


class ubytes(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _wedpr_python_transport.ubytes_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wedpr_python_transport.ubytes___nonzero__(self)

    def __bool__(self):
        return _wedpr_python_transport.ubytes___bool__(self)

    def __len__(self):
        return _wedpr_python_transport.ubytes___len__(self)

    def __getslice__(self, i, j):
        return _wedpr_python_transport.ubytes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wedpr_python_transport.ubytes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wedpr_python_transport.ubytes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wedpr_python_transport.ubytes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wedpr_python_transport.ubytes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wedpr_python_transport.ubytes___setitem__(self, *args)

    def pop(self):
        return _wedpr_python_transport.ubytes_pop(self)

    def append(self, x):
        return _wedpr_python_transport.ubytes_append(self, x)

    def empty(self):
        return _wedpr_python_transport.ubytes_empty(self)

    def size(self):
        return _wedpr_python_transport.ubytes_size(self)

    def swap(self, v):
        return _wedpr_python_transport.ubytes_swap(self, v)

    def begin(self):
        return _wedpr_python_transport.ubytes_begin(self)

    def end(self):
        return _wedpr_python_transport.ubytes_end(self)

    def rbegin(self):
        return _wedpr_python_transport.ubytes_rbegin(self)

    def rend(self):
        return _wedpr_python_transport.ubytes_rend(self)

    def clear(self):
        return _wedpr_python_transport.ubytes_clear(self)

    def get_allocator(self):
        return _wedpr_python_transport.ubytes_get_allocator(self)

    def pop_back(self):
        return _wedpr_python_transport.ubytes_pop_back(self)

    def erase(self, *args):
        return _wedpr_python_transport.ubytes_erase(self, *args)

    def __init__(self, *args):
        _wedpr_python_transport.ubytes_swiginit(
            self, _wedpr_python_transport.new_ubytes(*args))

    def push_back(self, x):
        return _wedpr_python_transport.ubytes_push_back(self, x)

    def front(self):
        return _wedpr_python_transport.ubytes_front(self)

    def back(self):
        return _wedpr_python_transport.ubytes_back(self)

    def assign(self, n, x):
        return _wedpr_python_transport.ubytes_assign(self, n, x)

    def resize(self, *args):
        return _wedpr_python_transport.ubytes_resize(self, *args)

    def insert(self, *args):
        return _wedpr_python_transport.ubytes_insert(self, *args)

    def reserve(self, n):
        return _wedpr_python_transport.ubytes_reserve(self, n)

    def capacity(self):
        return _wedpr_python_transport.ubytes_capacity(self)
    __swig_destroy__ = _wedpr_python_transport.delete_ubytes


# Register ubytes in _wedpr_python_transport:
_wedpr_python_transport.ubytes_swigregister(ubytes)


class ibytes(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _wedpr_python_transport.ibytes_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wedpr_python_transport.ibytes___nonzero__(self)

    def __bool__(self):
        return _wedpr_python_transport.ibytes___bool__(self)

    def __len__(self):
        return _wedpr_python_transport.ibytes___len__(self)

    def __getslice__(self, i, j):
        return _wedpr_python_transport.ibytes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wedpr_python_transport.ibytes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wedpr_python_transport.ibytes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wedpr_python_transport.ibytes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wedpr_python_transport.ibytes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wedpr_python_transport.ibytes___setitem__(self, *args)

    def pop(self):
        return _wedpr_python_transport.ibytes_pop(self)

    def append(self, x):
        return _wedpr_python_transport.ibytes_append(self, x)

    def empty(self):
        return _wedpr_python_transport.ibytes_empty(self)

    def size(self):
        return _wedpr_python_transport.ibytes_size(self)

    def swap(self, v):
        return _wedpr_python_transport.ibytes_swap(self, v)

    def begin(self):
        return _wedpr_python_transport.ibytes_begin(self)

    def end(self):
        return _wedpr_python_transport.ibytes_end(self)

    def rbegin(self):
        return _wedpr_python_transport.ibytes_rbegin(self)

    def rend(self):
        return _wedpr_python_transport.ibytes_rend(self)

    def clear(self):
        return _wedpr_python_transport.ibytes_clear(self)

    def get_allocator(self):
        return _wedpr_python_transport.ibytes_get_allocator(self)

    def pop_back(self):
        return _wedpr_python_transport.ibytes_pop_back(self)

    def erase(self, *args):
        return _wedpr_python_transport.ibytes_erase(self, *args)

    def __init__(self, *args):
        _wedpr_python_transport.ibytes_swiginit(
            self, _wedpr_python_transport.new_ibytes(*args))

    def push_back(self, x):
        return _wedpr_python_transport.ibytes_push_back(self, x)

    def front(self):
        return _wedpr_python_transport.ibytes_front(self)

    def back(self):
        return _wedpr_python_transport.ibytes_back(self)

    def assign(self, n, x):
        return _wedpr_python_transport.ibytes_assign(self, n, x)

    def resize(self, *args):
        return _wedpr_python_transport.ibytes_resize(self, *args)

    def insert(self, *args):
        return _wedpr_python_transport.ibytes_insert(self, *args)

    def reserve(self, n):
        return _wedpr_python_transport.ibytes_reserve(self, n)

    def capacity(self):
        return _wedpr_python_transport.ibytes_capacity(self)
    __swig_destroy__ = _wedpr_python_transport.delete_ibytes


# Register ibytes in _wedpr_python_transport:
_wedpr_python_transport.ibytes_swigregister(ibytes)


class StringVec(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _wedpr_python_transport.StringVec_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wedpr_python_transport.StringVec___nonzero__(self)

    def __bool__(self):
        return _wedpr_python_transport.StringVec___bool__(self)

    def __len__(self):
        return _wedpr_python_transport.StringVec___len__(self)

    def __getslice__(self, i, j):
        return _wedpr_python_transport.StringVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wedpr_python_transport.StringVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wedpr_python_transport.StringVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wedpr_python_transport.StringVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wedpr_python_transport.StringVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wedpr_python_transport.StringVec___setitem__(self, *args)

    def pop(self):
        return _wedpr_python_transport.StringVec_pop(self)

    def append(self, x):
        return _wedpr_python_transport.StringVec_append(self, x)

    def empty(self):
        return _wedpr_python_transport.StringVec_empty(self)

    def size(self):
        return _wedpr_python_transport.StringVec_size(self)

    def swap(self, v):
        return _wedpr_python_transport.StringVec_swap(self, v)

    def begin(self):
        return _wedpr_python_transport.StringVec_begin(self)

    def end(self):
        return _wedpr_python_transport.StringVec_end(self)

    def rbegin(self):
        return _wedpr_python_transport.StringVec_rbegin(self)

    def rend(self):
        return _wedpr_python_transport.StringVec_rend(self)

    def clear(self):
        return _wedpr_python_transport.StringVec_clear(self)

    def get_allocator(self):
        return _wedpr_python_transport.StringVec_get_allocator(self)

    def pop_back(self):
        return _wedpr_python_transport.StringVec_pop_back(self)

    def erase(self, *args):
        return _wedpr_python_transport.StringVec_erase(self, *args)

    def __init__(self, *args):
        _wedpr_python_transport.StringVec_swiginit(
            self, _wedpr_python_transport.new_StringVec(*args))

    def push_back(self, x):
        return _wedpr_python_transport.StringVec_push_back(self, x)

    def front(self):
        return _wedpr_python_transport.StringVec_front(self)

    def back(self):
        return _wedpr_python_transport.StringVec_back(self)

    def assign(self, n, x):
        return _wedpr_python_transport.StringVec_assign(self, n, x)

    def resize(self, *args):
        return _wedpr_python_transport.StringVec_resize(self, *args)

    def insert(self, *args):
        return _wedpr_python_transport.StringVec_insert(self, *args)

    def reserve(self, n):
        return _wedpr_python_transport.StringVec_reserve(self, n)

    def capacity(self):
        return _wedpr_python_transport.StringVec_capacity(self)
    __swig_destroy__ = _wedpr_python_transport.delete_StringVec


# Register StringVec in _wedpr_python_transport:
_wedpr_python_transport.StringVec_swigregister(StringVec)


class NodeInfoVec(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _wedpr_python_transport.NodeInfoVec_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wedpr_python_transport.NodeInfoVec___nonzero__(self)

    def __bool__(self):
        return _wedpr_python_transport.NodeInfoVec___bool__(self)

    def __len__(self):
        return _wedpr_python_transport.NodeInfoVec___len__(self)

    def __getslice__(self, i, j):
        return _wedpr_python_transport.NodeInfoVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wedpr_python_transport.NodeInfoVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wedpr_python_transport.NodeInfoVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wedpr_python_transport.NodeInfoVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wedpr_python_transport.NodeInfoVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wedpr_python_transport.NodeInfoVec___setitem__(self, *args)

    def pop(self):
        return _wedpr_python_transport.NodeInfoVec_pop(self)

    def append(self, x):
        return _wedpr_python_transport.NodeInfoVec_append(self, x)

    def empty(self):
        return _wedpr_python_transport.NodeInfoVec_empty(self)

    def size(self):
        return _wedpr_python_transport.NodeInfoVec_size(self)

    def swap(self, v):
        return _wedpr_python_transport.NodeInfoVec_swap(self, v)

    def begin(self):
        return _wedpr_python_transport.NodeInfoVec_begin(self)

    def end(self):
        return _wedpr_python_transport.NodeInfoVec_end(self)

    def rbegin(self):
        return _wedpr_python_transport.NodeInfoVec_rbegin(self)

    def rend(self):
        return _wedpr_python_transport.NodeInfoVec_rend(self)

    def clear(self):
        return _wedpr_python_transport.NodeInfoVec_clear(self)

    def get_allocator(self):
        return _wedpr_python_transport.NodeInfoVec_get_allocator(self)

    def pop_back(self):
        return _wedpr_python_transport.NodeInfoVec_pop_back(self)

    def erase(self, *args):
        return _wedpr_python_transport.NodeInfoVec_erase(self, *args)

    def __init__(self, *args):
        _wedpr_python_transport.NodeInfoVec_swiginit(
            self, _wedpr_python_transport.new_NodeInfoVec(*args))

    def push_back(self, x):
        return _wedpr_python_transport.NodeInfoVec_push_back(self, x)

    def front(self):
        return _wedpr_python_transport.NodeInfoVec_front(self)

    def back(self):
        return _wedpr_python_transport.NodeInfoVec_back(self)

    def assign(self, n, x):
        return _wedpr_python_transport.NodeInfoVec_assign(self, n, x)

    def resize(self, *args):
        return _wedpr_python_transport.NodeInfoVec_resize(self, *args)

    def insert(self, *args):
        return _wedpr_python_transport.NodeInfoVec_insert(self, *args)

    def reserve(self, n):
        return _wedpr_python_transport.NodeInfoVec_reserve(self, n)

    def capacity(self):
        return _wedpr_python_transport.NodeInfoVec_capacity(self)
    __swig_destroy__ = _wedpr_python_transport.delete_NodeInfoVec


# Register NodeInfoVec in _wedpr_python_transport:
_wedpr_python_transport.NodeInfoVec_swigregister(NodeInfoVec)


class Error(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def buildError(*args):
        return _wedpr_python_transport.Error_buildError(*args)

    def __init__(self, *args):
        _wedpr_python_transport.Error_swiginit(
            self, _wedpr_python_transport.new_Error(*args))
    __swig_destroy__ = _wedpr_python_transport.delete_Error

    def errorCode(self):
        return _wedpr_python_transport.Error_errorCode(self)

    def errorMessage(self):
        return _wedpr_python_transport.Error_errorMessage(self)

    def setErrorCode(self, _errorCode):
        return _wedpr_python_transport.Error_setErrorCode(self, _errorCode)

    def setErrorMessage(self, _errorMessage):
        return _wedpr_python_transport.Error_setErrorMessage(self, _errorMessage)


# Register Error in _wedpr_python_transport:
_wedpr_python_transport.Error_swigregister(Error)


class InputBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_wedpr_python_transport.InputBuffer_data_get,
                    _wedpr_python_transport.InputBuffer_data_set)
    len = property(_wedpr_python_transport.InputBuffer_len_get,
                   _wedpr_python_transport.InputBuffer_len_set)

    def __init__(self):
        _wedpr_python_transport.InputBuffer_swiginit(
            self, _wedpr_python_transport.new_InputBuffer())
    __swig_destroy__ = _wedpr_python_transport.delete_InputBuffer


# Register InputBuffer in _wedpr_python_transport:
_wedpr_python_transport.InputBuffer_swigregister(InputBuffer)


class OutputBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_wedpr_python_transport.OutputBuffer_data_get,
                    _wedpr_python_transport.OutputBuffer_data_set)
    len = property(_wedpr_python_transport.OutputBuffer_len_get,
                   _wedpr_python_transport.OutputBuffer_len_set)

    def __init__(self):
        _wedpr_python_transport.OutputBuffer_swiginit(
            self, _wedpr_python_transport.new_OutputBuffer())
    __swig_destroy__ = _wedpr_python_transport.delete_OutputBuffer


# Register OutputBuffer in _wedpr_python_transport:
_wedpr_python_transport.OutputBuffer_swigregister(OutputBuffer)


class FrontConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_FrontConfig

    def threadPoolSize(self):
        return _wedpr_python_transport.FrontConfig_threadPoolSize(self)

    def setThreadPoolSize(self, threadPoolSize):
        return _wedpr_python_transport.FrontConfig_setThreadPoolSize(self, threadPoolSize)

    def nodeID(self):
        return _wedpr_python_transport.FrontConfig_nodeID(self)

    def setNodeID(self, nodeID):
        return _wedpr_python_transport.FrontConfig_setNodeID(self, nodeID)

    def selfEndPoint(self):
        return _wedpr_python_transport.FrontConfig_selfEndPoint(self)

    def mutableSelfEndPoint(self):
        return _wedpr_python_transport.FrontConfig_mutableSelfEndPoint(self)

    def setSelfEndPoint(self, endPoint):
        return _wedpr_python_transport.FrontConfig_setSelfEndPoint(self, endPoint)

    def setGatewayGrpcTarget(self, gatewayGrpcTarget):
        return _wedpr_python_transport.FrontConfig_setGatewayGrpcTarget(self, gatewayGrpcTarget)

    def gatewayGrpcTarget(self):
        return _wedpr_python_transport.FrontConfig_gatewayGrpcTarget(self)

    def setGrpcConfig(self, grpcConfig):
        return _wedpr_python_transport.FrontConfig_setGrpcConfig(self, grpcConfig)

    def grpcConfig(self):
        return _wedpr_python_transport.FrontConfig_grpcConfig(self)

    def generateNodeInfo(self):
        return _wedpr_python_transport.FrontConfig_generateNodeInfo(self)

    def getComponents(self):
        return _wedpr_python_transport.FrontConfig_getComponents(self)

    def setComponents(self, components):
        return _wedpr_python_transport.FrontConfig_setComponents(self, components)

    def addComponent(self, component):
        return _wedpr_python_transport.FrontConfig_addComponent(self, component)

    def mutableComponents(self):
        return _wedpr_python_transport.FrontConfig_mutableComponents(self)

    def meta(self):
        return _wedpr_python_transport.FrontConfig_meta(self)

    def setMeta(self, meta):
        return _wedpr_python_transport.FrontConfig_setMeta(self, meta)


# Register FrontConfig in _wedpr_python_transport:
_wedpr_python_transport.FrontConfig_swigregister(FrontConfig)


class FrontConfigBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_FrontConfigBuilder

    def build(self, *args):
        return _wedpr_python_transport.FrontConfigBuilder_build(self, *args)


# Register FrontConfigBuilder in _wedpr_python_transport:
_wedpr_python_transport.FrontConfigBuilder_swigregister(FrontConfigBuilder)


def printFrontDesc(config):
    return _wedpr_python_transport.printFrontDesc(config)


class EndPoint(object):
    r"""the endpoint"""

    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _wedpr_python_transport.EndPoint_swiginit(
            self, _wedpr_python_transport.new_EndPoint(*args))
    __swig_destroy__ = _wedpr_python_transport.delete_EndPoint

    def host(self):
        return _wedpr_python_transport.EndPoint_host(self)

    def port(self):
        return _wedpr_python_transport.EndPoint_port(self)

    def setHost(self, host):
        return _wedpr_python_transport.EndPoint_setHost(self, host)

    def setPort(self, port):
        return _wedpr_python_transport.EndPoint_setPort(self, port)

    def setListenIp(self, listenIp):
        return _wedpr_python_transport.EndPoint_setListenIp(self, listenIp)

    def entryPoint(self):
        return _wedpr_python_transport.EndPoint_entryPoint(self)

    def listenEndPoint(self):
        return _wedpr_python_transport.EndPoint_listenEndPoint(self)

    def listenIp(self):
        return _wedpr_python_transport.EndPoint_listenIp(self)


# Register EndPoint in _wedpr_python_transport:
_wedpr_python_transport.EndPoint_swigregister(EndPoint)


class GrpcConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.GrpcConfig_swiginit(
            self, _wedpr_python_transport.new_GrpcConfig())

    def loadBalancePolicy(self):
        return _wedpr_python_transport.GrpcConfig_loadBalancePolicy(self)

    def setLoadBalancePolicy(self, loadBalancePolicy):
        return _wedpr_python_transport.GrpcConfig_setLoadBalancePolicy(self, loadBalancePolicy)

    def enableHealthCheck(self):
        return _wedpr_python_transport.GrpcConfig_enableHealthCheck(self)

    def setEnableHealthCheck(self, enableHealthCheck):
        return _wedpr_python_transport.GrpcConfig_setEnableHealthCheck(self, enableHealthCheck)

    def setEnableDnslookup(self, enableDnslookup):
        return _wedpr_python_transport.GrpcConfig_setEnableDnslookup(self, enableDnslookup)

    def enableDnslookup(self):
        return _wedpr_python_transport.GrpcConfig_enableDnslookup(self)

    def maxSendMessageSize(self):
        return _wedpr_python_transport.GrpcConfig_maxSendMessageSize(self)

    def maxReceivedMessageSize(self):
        return _wedpr_python_transport.GrpcConfig_maxReceivedMessageSize(self)

    def setMaxSendMessageSize(self, maxSendMessageSize):
        return _wedpr_python_transport.GrpcConfig_setMaxSendMessageSize(self, maxSendMessageSize)

    def setMaxReceivedMessageSize(self, maxReceivedMessageSize):
        return _wedpr_python_transport.GrpcConfig_setMaxReceivedMessageSize(self, maxReceivedMessageSize)

    def compressAlgorithm(self):
        return _wedpr_python_transport.GrpcConfig_compressAlgorithm(self)

    def setCompressAlgorithm(self, compressAlgorithm):
        return _wedpr_python_transport.GrpcConfig_setCompressAlgorithm(self, compressAlgorithm)

    def maxMsgSize(self):
        return _wedpr_python_transport.GrpcConfig_maxMsgSize(self)

    def setMaxMsgSize(self, maxMsgSize):
        return _wedpr_python_transport.GrpcConfig_setMaxMsgSize(self, maxMsgSize)


# Register GrpcConfig in _wedpr_python_transport:
_wedpr_python_transport.GrpcConfig_swigregister(GrpcConfig)


class GrpcServerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _wedpr_python_transport.GrpcServerConfig_swiginit(
            self, _wedpr_python_transport.new_GrpcServerConfig(*args))

    def listenEndPoint(self):
        return _wedpr_python_transport.GrpcServerConfig_listenEndPoint(self)

    def setEndPoint(self, endPoint):
        return _wedpr_python_transport.GrpcServerConfig_setEndPoint(self, endPoint)

    def setEnableHealthCheck(self, enableHealthCheck):
        return _wedpr_python_transport.GrpcServerConfig_setEnableHealthCheck(self, enableHealthCheck)

    def endPoint(self):
        return _wedpr_python_transport.GrpcServerConfig_endPoint(self)

    def mutableEndPoint(self):
        return _wedpr_python_transport.GrpcServerConfig_mutableEndPoint(self)

    def enableHealthCheck(self):
        return _wedpr_python_transport.GrpcServerConfig_enableHealthCheck(self)

    def grpcConfig(self):
        return _wedpr_python_transport.GrpcServerConfig_grpcConfig(self)


# Register GrpcServerConfig in _wedpr_python_transport:
_wedpr_python_transport.GrpcServerConfig_swigregister(GrpcServerConfig)


def printGrpcConfig(grpcConfig):
    return _wedpr_python_transport.printGrpcConfig(grpcConfig)


class MessageOptionalHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessageOptionalHeader

    def encode(self, buffer):
        return _wedpr_python_transport.MessageOptionalHeader_encode(self, buffer)

    def decode(self, data, _offset):
        return _wedpr_python_transport.MessageOptionalHeader_decode(self, data, _offset)

    def componentType(self):
        return _wedpr_python_transport.MessageOptionalHeader_componentType(self)

    def setComponentType(self, componentType):
        return _wedpr_python_transport.MessageOptionalHeader_setComponentType(self, componentType)

    def srcNodeBuffer(self):
        r""" for swig-wrapper(pass the binary data)"""
        return _wedpr_python_transport.MessageOptionalHeader_srcNodeBuffer(self)

    def setSrcNodeBuffer(self, data):
        return _wedpr_python_transport.MessageOptionalHeader_setSrcNodeBuffer(self, data)

    def dstNodeBuffer(self):
        return _wedpr_python_transport.MessageOptionalHeader_dstNodeBuffer(self)

    def setDstNodeBuffer(self, data):
        return _wedpr_python_transport.MessageOptionalHeader_setDstNodeBuffer(self, data)

    def dstInst(self):
        return _wedpr_python_transport.MessageOptionalHeader_dstInst(self)

    def setDstInst(self, dstInst):
        return _wedpr_python_transport.MessageOptionalHeader_setDstInst(self, dstInst)

    def topic(self):
        return _wedpr_python_transport.MessageOptionalHeader_topic(self)

    def setTopic(self, *args):
        return _wedpr_python_transport.MessageOptionalHeader_setTopic(self, *args)

    def srcInst(self):
        return _wedpr_python_transport.MessageOptionalHeader_srcInst(self)

    def setSrcInst(self, srcInst):
        return _wedpr_python_transport.MessageOptionalHeader_setSrcInst(self, srcInst)


# Register MessageOptionalHeader in _wedpr_python_transport:
_wedpr_python_transport.MessageOptionalHeader_swigregister(
    MessageOptionalHeader)


class MessageHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessageHeader

    def encode(self, buffer):
        return _wedpr_python_transport.MessageHeader_encode(self, buffer)

    def decode(self, data):
        return _wedpr_python_transport.MessageHeader_decode(self, data)

    def version(self):
        return _wedpr_python_transport.MessageHeader_version(self)

    def setVersion(self, version):
        return _wedpr_python_transport.MessageHeader_setVersion(self, version)

    def traceID(self):
        return _wedpr_python_transport.MessageHeader_traceID(self)

    def setTraceID(self, traceID):
        return _wedpr_python_transport.MessageHeader_setTraceID(self, traceID)

    def srcGwNode(self):
        return _wedpr_python_transport.MessageHeader_srcGwNode(self)

    def setSrcGwNode(self, srcGwNode):
        return _wedpr_python_transport.MessageHeader_setSrcGwNode(self, srcGwNode)

    def dstGwNode(self):
        return _wedpr_python_transport.MessageHeader_dstGwNode(self)

    def setDstGwNode(self, dstGwNode):
        return _wedpr_python_transport.MessageHeader_setDstGwNode(self, dstGwNode)

    def packetType(self):
        return _wedpr_python_transport.MessageHeader_packetType(self)

    def setPacketType(self, packetType):
        return _wedpr_python_transport.MessageHeader_setPacketType(self, packetType)

    def ttl(self):
        return _wedpr_python_transport.MessageHeader_ttl(self)

    def setTTL(self, ttl):
        return _wedpr_python_transport.MessageHeader_setTTL(self, ttl)

    def ext(self):
        return _wedpr_python_transport.MessageHeader_ext(self)

    def setExt(self, ext):
        return _wedpr_python_transport.MessageHeader_setExt(self, ext)

    def optionalField(self):
        return _wedpr_python_transport.MessageHeader_optionalField(self)

    def setOptionalField(self, optionalField):
        return _wedpr_python_transport.MessageHeader_setOptionalField(self, optionalField)

    def length(self):
        return _wedpr_python_transport.MessageHeader_length(self)

    def isRespPacket(self):
        return _wedpr_python_transport.MessageHeader_isRespPacket(self)

    def setRespPacket(self):
        return _wedpr_python_transport.MessageHeader_setRespPacket(self)

    def srcP2PNodeIDView(self):
        return _wedpr_python_transport.MessageHeader_srcP2PNodeIDView(self)

    def dstP2PNodeIDView(self):
        return _wedpr_python_transport.MessageHeader_dstP2PNodeIDView(self)

    def routeType(self):
        return _wedpr_python_transport.MessageHeader_routeType(self)

    def setRouteType(self, type):
        return _wedpr_python_transport.MessageHeader_setRouteType(self, type)

    def hasOptionalField(self):
        return _wedpr_python_transport.MessageHeader_hasOptionalField(self)


# Register MessageHeader in _wedpr_python_transport:
_wedpr_python_transport.MessageHeader_swigregister(MessageHeader)


class Message(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_Message

    def header(self):
        return _wedpr_python_transport.Message_header(self)

    def setHeader(self, header):
        return _wedpr_python_transport.Message_setHeader(self, header)

    def version(self):
        r""" the overloaed implementation ==="""
        return _wedpr_python_transport.Message_version(self)

    def setVersion(self, version):
        return _wedpr_python_transport.Message_setVersion(self, version)

    def packetType(self):
        return _wedpr_python_transport.Message_packetType(self)

    def setPacketType(self, packetType):
        return _wedpr_python_transport.Message_setPacketType(self, packetType)

    def seq(self):
        return _wedpr_python_transport.Message_seq(self)

    def setSeq(self, traceID):
        return _wedpr_python_transport.Message_setSeq(self, traceID)

    def ext(self):
        return _wedpr_python_transport.Message_ext(self)

    def setExt(self, ext):
        return _wedpr_python_transport.Message_setExt(self, ext)

    def isRespPacket(self):
        return _wedpr_python_transport.Message_isRespPacket(self)

    def setRespPacket(self):
        return _wedpr_python_transport.Message_setRespPacket(self)

    def setPayload(self, _payload):
        return _wedpr_python_transport.Message_setPayload(self, _payload)

    def payloadBuffer(self):
        return _wedpr_python_transport.Message_payloadBuffer(self)

    def frontMessage(self):
        return _wedpr_python_transport.Message_frontMessage(self)

    def encode(self, _buffer):
        return _wedpr_python_transport.Message_encode(self, _buffer)

    def decode(self, _buffer):
        return _wedpr_python_transport.Message_decode(self, _buffer)

    def length(self):
        return _wedpr_python_transport.Message_length(self)

    def payload(self):
        return _wedpr_python_transport.Message_payload(self)

    def releasePayload(self):
        return _wedpr_python_transport.Message_releasePayload(self)


# Register Message in _wedpr_python_transport:
_wedpr_python_transport.Message_swigregister(Message)


class MessageHeaderBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessageHeaderBuilder

    def build(self, *args):
        return _wedpr_python_transport.MessageHeaderBuilder_build(self, *args)


# Register MessageHeaderBuilder in _wedpr_python_transport:
_wedpr_python_transport.MessageHeaderBuilder_swigregister(MessageHeaderBuilder)


class MessageBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessageBuilder

    def build(self, *args):
        return _wedpr_python_transport.MessageBuilder_build(self, *args)


# Register MessageBuilder in _wedpr_python_transport:
_wedpr_python_transport.MessageBuilder_swigregister(MessageBuilder)


class MessageOptionalHeaderBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessageOptionalHeaderBuilder

    def build(self, *args):
        return _wedpr_python_transport.MessageOptionalHeaderBuilder_build(self, *args)


# Register MessageOptionalHeaderBuilder in _wedpr_python_transport:
_wedpr_python_transport.MessageOptionalHeaderBuilder_swigregister(
    MessageOptionalHeaderBuilder)


def printOptionalField(optionalHeader):
    return _wedpr_python_transport.printOptionalField(optionalHeader)


def printMessage(_msg):
    return _wedpr_python_transport.printMessage(_msg)


FrontMsgExtFlag_Response = _wedpr_python_transport.FrontMsgExtFlag_Response


class MessagePayload(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessagePayload

    def encode(self, buffer):
        return _wedpr_python_transport.MessagePayload_encode(self, buffer)

    def decode(self, data):
        return _wedpr_python_transport.MessagePayload_decode(self, data)

    def version(self):
        return _wedpr_python_transport.MessagePayload_version(self)

    def setVersion(self, version):
        return _wedpr_python_transport.MessagePayload_setVersion(self, version)

    def dataBuffer(self):
        return _wedpr_python_transport.MessagePayload_dataBuffer(self)

    def seq(self):
        return _wedpr_python_transport.MessagePayload_seq(self)

    def setSeq(self, seq):
        return _wedpr_python_transport.MessagePayload_setSeq(self, seq)

    def length(self):
        return _wedpr_python_transport.MessagePayload_length(self)

    def traceID(self):
        return _wedpr_python_transport.MessagePayload_traceID(self)

    def setTraceID(self, traceID):
        return _wedpr_python_transport.MessagePayload_setTraceID(self, traceID)

    def ext(self):
        return _wedpr_python_transport.MessagePayload_ext(self)

    def setExt(self, ext):
        return _wedpr_python_transport.MessagePayload_setExt(self, ext)

    def setRespPacket(self):
        return _wedpr_python_transport.MessagePayload_setRespPacket(self)

    def isRespPacket(self):
        return _wedpr_python_transport.MessagePayload_isRespPacket(self)

    def releasePayload(self):
        return _wedpr_python_transport.MessagePayload_releasePayload(self)


# Register MessagePayload in _wedpr_python_transport:
_wedpr_python_transport.MessagePayload_swigregister(MessagePayload)


class MessagePayloadBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_MessagePayloadBuilder

    def build(self, *args):
        return _wedpr_python_transport.MessagePayloadBuilder_build(self, *args)


# Register MessagePayloadBuilder in _wedpr_python_transport:
_wedpr_python_transport.MessagePayloadBuilder_swigregister(
    MessagePayloadBuilder)


class IFrontClient(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_IFrontClient

    def onReceiveMessage(self, _msg, _callback):
        r"""
        : receive message from gateway, call by gateway
        :param _message:: received ppc message
        :rtype: void
        :return: void
        """
        return _wedpr_python_transport.IFrontClient_onReceiveMessage(self, _msg, _callback)


# Register IFrontClient in _wedpr_python_transport:
_wedpr_python_transport.IFrontClient_swigregister(IFrontClient)


class ErrorCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ErrorCallback:
            _self = None
        else:
            _self = self
        _wedpr_python_transport.ErrorCallback_swiginit(
            self, _wedpr_python_transport.new_ErrorCallback(_self, ))
    __swig_destroy__ = _wedpr_python_transport.delete_ErrorCallback

    def onError(self, error):
        return _wedpr_python_transport.ErrorCallback_onError(self, error)

    def __disown__(self):
        self.this.disown()
        _wedpr_python_transport.disown_ErrorCallback(self)
        return weakref.proxy(self)


# Register ErrorCallback in _wedpr_python_transport:
_wedpr_python_transport.ErrorCallback_swigregister(ErrorCallback)


class MessageDispatcherHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MessageDispatcherHandler:
            _self = None
        else:
            _self = self
        _wedpr_python_transport.MessageDispatcherHandler_swiginit(
            self, _wedpr_python_transport.new_MessageDispatcherHandler(_self, ))
    __swig_destroy__ = _wedpr_python_transport.delete_MessageDispatcherHandler

    def onMessage(self, msg):
        return _wedpr_python_transport.MessageDispatcherHandler_onMessage(self, msg)

    def __disown__(self):
        self.this.disown()
        _wedpr_python_transport.disown_MessageDispatcherHandler(self)
        return weakref.proxy(self)


# Register MessageDispatcherHandler in _wedpr_python_transport:
_wedpr_python_transport.MessageDispatcherHandler_swigregister(
    MessageDispatcherHandler)


class SendResponseHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, responseFunc):
        _wedpr_python_transport.SendResponseHandler_swiginit(
            self, _wedpr_python_transport.new_SendResponseHandler(responseFunc))
    __swig_destroy__ = _wedpr_python_transport.delete_SendResponseHandler

    def sendResponse(self, payload):
        return _wedpr_python_transport.SendResponseHandler_sendResponse(self, payload)


# Register SendResponseHandler in _wedpr_python_transport:
_wedpr_python_transport.SendResponseHandler_swigregister(SendResponseHandler)


class IMessageHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IMessageHandler:
            _self = None
        else:
            _self = self
        _wedpr_python_transport.IMessageHandler_swiginit(
            self, _wedpr_python_transport.new_IMessageHandler(_self, ))
    __swig_destroy__ = _wedpr_python_transport.delete_IMessageHandler

    def onMessage(self, e, msg, sendResponseHandler):
        return _wedpr_python_transport.IMessageHandler_onMessage(self, e, msg, sendResponseHandler)

    def __disown__(self):
        self.this.disown()
        _wedpr_python_transport.disown_IMessageHandler(self)
        return weakref.proxy(self)


# Register IMessageHandler in _wedpr_python_transport:
_wedpr_python_transport.IMessageHandler_swigregister(IMessageHandler)


class GetPeersInfoHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GetPeersInfoHandler:
            _self = None
        else:
            _self = self
        _wedpr_python_transport.GetPeersInfoHandler_swiginit(
            self, _wedpr_python_transport.new_GetPeersInfoHandler(_self, ))
    __swig_destroy__ = _wedpr_python_transport.delete_GetPeersInfoHandler

    def onPeersInfo(self, e, peersInfo):
        return _wedpr_python_transport.GetPeersInfoHandler_onPeersInfo(self, e, peersInfo)

    def __disown__(self):
        self.this.disown()
        _wedpr_python_transport.disown_GetPeersInfoHandler(self)
        return weakref.proxy(self)


# Register GetPeersInfoHandler in _wedpr_python_transport:
_wedpr_python_transport.GetPeersInfoHandler_swigregister(GetPeersInfoHandler)


class IFront(IFrontClient):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_IFront

    def start(self):
        r"""
        start the IFront

        :param front: the IFront to start
        """
        return _wedpr_python_transport.IFront_start(self)

    def stop(self):
        r"""
        stop the IFront

        :param front: the IFront to stop
        """
        return _wedpr_python_transport.IFront_stop(self)

    def register_topic_handler(self, topic, callback):
        return _wedpr_python_transport.IFront_register_topic_handler(self, topic, callback)

    def register_msg_handler(self, componentType, callback):
        return _wedpr_python_transport.IFront_register_msg_handler(self, componentType, callback)

    def async_send_message(self, routeType, routeInfo, payload, seq, timeout, errorCallback, msgHandler):
        return _wedpr_python_transport.IFront_async_send_message(self, routeType, routeInfo, payload, seq, timeout, errorCallback, msgHandler)

    def async_send_response(self, dstNode, dstNodeSize, traceID, payload, seq, errorCallback):
        return _wedpr_python_transport.IFront_async_send_response(self, dstNode, dstNodeSize, traceID, payload, seq, errorCallback)

    def push_msg(self, routeType, routeInfo, payload, seq, timeout):
        return _wedpr_python_transport.IFront_push_msg(self, routeType, routeInfo, payload, seq, timeout)

    def pop(self, topic, timeoutMs):
        return _wedpr_python_transport.IFront_pop(self, topic, timeoutMs)

    def peek(self, topic):
        return _wedpr_python_transport.IFront_peek(self, topic)

    def asyncGetPeers(self, getPeersCallback):
        return _wedpr_python_transport.IFront_asyncGetPeers(self, getPeersCallback)

    def nodeInfo(self):
        return _wedpr_python_transport.IFront_nodeInfo(self)

    def registerTopic(self, topic):
        r"""
        register the topic

        :type topic: string
        :param topic: the topic to register
        """
        return _wedpr_python_transport.IFront_registerTopic(self, topic)

    def unRegisterTopic(self, topic):
        r"""
        unRegister the topic

        :type topic: string
        :param topic: the topic to unregister
        """
        return _wedpr_python_transport.IFront_unRegisterTopic(self, topic)

    def registerComponent(self, component):
        return _wedpr_python_transport.IFront_registerComponent(self, component)

    def unRegisterComponent(self, component):
        return _wedpr_python_transport.IFront_unRegisterComponent(self, component)

    def updateMetaInfo(self, meta):
        return _wedpr_python_transport.IFront_updateMetaInfo(self, meta)

    def selectNodesByRoutePolicy(self, routeType, routeInfo):
        return _wedpr_python_transport.IFront_selectNodesByRoutePolicy(self, routeType, routeInfo)

    def getNodeDiscovery(self):
        return _wedpr_python_transport.IFront_getNodeDiscovery(self)


# Register IFront in _wedpr_python_transport:
_wedpr_python_transport.IFront_swigregister(IFront)


class IFrontBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_IFrontBuilder

    def buildClient(self, endPoint, onUnHealthHandler, removeHandlerOnUnhealth):
        return _wedpr_python_transport.IFrontBuilder_buildClient(self, endPoint, onUnHealthHandler, removeHandlerOnUnhealth)


# Register IFrontBuilder in _wedpr_python_transport:
_wedpr_python_transport.IFrontBuilder_swigregister(IFrontBuilder)


class INodeDiscovery(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_INodeDiscovery

    def getAliveNodeList(self):
        return _wedpr_python_transport.INodeDiscovery_getAliveNodeList(self)


# Register INodeDiscovery in _wedpr_python_transport:
_wedpr_python_transport.INodeDiscovery_swigregister(INodeDiscovery)
SDKMode_AIR = _wedpr_python_transport.SDKMode_AIR
SDKMode_PRO = _wedpr_python_transport.SDKMode_PRO


class TransportBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _wedpr_python_transport.TransportBuilder_swiginit(
            self, _wedpr_python_transport.new_TransportBuilder())
    __swig_destroy__ = _wedpr_python_transport.delete_TransportBuilder

    def buildProTransport(self, config):
        return _wedpr_python_transport.TransportBuilder_buildProTransport(self, config)

    def buildConfig(self, threadPoolSize, nodeID):
        return _wedpr_python_transport.TransportBuilder_buildConfig(self, threadPoolSize, nodeID)

    def frontConfigBuilder(self):
        return _wedpr_python_transport.TransportBuilder_frontConfigBuilder(self)

    def initLog(self, configPath):
        return _wedpr_python_transport.TransportBuilder_initLog(self, configPath)


# Register TransportBuilder in _wedpr_python_transport:
_wedpr_python_transport.TransportBuilder_swigregister(TransportBuilder)


class Transport(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, config):
        _wedpr_python_transport.Transport_swiginit(
            self, _wedpr_python_transport.new_Transport(config))
    __swig_destroy__ = _wedpr_python_transport.delete_Transport

    def start(self):
        return _wedpr_python_transport.Transport_start(self)

    def stop(self):
        return _wedpr_python_transport.Transport_stop(self)

    def getFront(self):
        return _wedpr_python_transport.Transport_getFront(self)

    def gateway(self):
        return _wedpr_python_transport.Transport_gateway(self)

    def msgPayloadBuilder(self):
        return _wedpr_python_transport.Transport_msgPayloadBuilder(self)

    def msgBuilder(self):
        return _wedpr_python_transport.Transport_msgBuilder(self)

    def msgHeaderBuilder(self):
        return _wedpr_python_transport.Transport_msgHeaderBuilder(self)

    def routeInfoBuilder(self):
        return _wedpr_python_transport.Transport_routeInfoBuilder(self)

    def getConfig(self):
        return _wedpr_python_transport.Transport_getConfig(self)


# Register Transport in _wedpr_python_transport:
_wedpr_python_transport.Transport_swigregister(Transport)


class INodeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x,
                       v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wedpr_python_transport.delete_INodeInfo

    def endPoint(self):
        return _wedpr_python_transport.INodeInfo_endPoint(self)

    def nodeID(self):
        return _wedpr_python_transport.INodeInfo_nodeID(self)

    def setNodeID(self, nodeID):
        return _wedpr_python_transport.INodeInfo_setNodeID(self, nodeID)

    def setEndPoint(self, endPoint):
        return _wedpr_python_transport.INodeInfo_setEndPoint(self, endPoint)

    def addComponent(self, component):
        return _wedpr_python_transport.INodeInfo_addComponent(self, component)

    def eraseComponent(self, component):
        return _wedpr_python_transport.INodeInfo_eraseComponent(self, component)

    def componentExist(self, component):
        return _wedpr_python_transport.INodeInfo_componentExist(self, component)

    def copiedComponents(self):
        return _wedpr_python_transport.INodeInfo_copiedComponents(self)

    def meta(self):
        return _wedpr_python_transport.INodeInfo_meta(self)

    def setMeta(self, meta):
        return _wedpr_python_transport.INodeInfo_setMeta(self, meta)


# Register INodeInfo in _wedpr_python_transport:
_wedpr_python_transport.INodeInfo_swigregister(INodeInfo)


def printNodeInfo(nodeInfo):
    return _wedpr_python_transport.printNodeInfo(nodeInfo)
