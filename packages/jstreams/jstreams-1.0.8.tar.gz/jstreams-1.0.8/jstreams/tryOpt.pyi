from jstreams.stream import Opt as Opt
from typing import Any, Callable, Generic, Protocol, TypeVar

T = TypeVar('T')

class ErrorLog(Protocol):
    def error(self, msg, *args, **kwargs) -> None: ...

class Try(Generic[T]):
    def __init__(self, fn: Callable[[], T]) -> None: ...
    @staticmethod
    def of(val: T) -> Try[T]:...
    def andThen(self, fn: Callable[[T], Any]) -> Try[T]: ...
    def onFailure(self, fn: Callable[[BaseException], Any]) -> Try[T]: ...
    def onFailureLog(self, message: str, errorLog: ErrorLog) -> Try[T]: ...
    def get(self) -> Opt[T]: ...
    def hasFailed(self) -> bool: ...