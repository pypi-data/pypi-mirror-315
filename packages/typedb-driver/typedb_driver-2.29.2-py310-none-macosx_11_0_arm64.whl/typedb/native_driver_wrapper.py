# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import native_driver_python
else:
    import native_driver_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


TypeDBDriverExceptionNative = native_driver_python.TypeDBDriverExceptionNative

native_driver_python.init_logging()

class Error(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Error

# Register Error in native_driver_python:
native_driver_python.Error_swigregister(Error)
class SchemaException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_SchemaException

# Register SchemaException in native_driver_python:
native_driver_python.SchemaException_swigregister(SchemaException)
class SchemaExceptionIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_SchemaExceptionIterator

# Register SchemaExceptionIterator in native_driver_python:
native_driver_python.SchemaExceptionIterator_swigregister(SchemaExceptionIterator)
class Credential(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Credential

# Register Credential in native_driver_python:
native_driver_python.Credential_swigregister(Credential)
class Options(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Options

# Register Options in native_driver_python:
native_driver_python.Options_swigregister(Options)
class Connection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Connection

# Register Connection in native_driver_python:
native_driver_python.Connection_swigregister(Connection)
class Session(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Session

# Register Session in native_driver_python:
native_driver_python.Session_swigregister(Session)
class Transaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Transaction

# Register Transaction in native_driver_python:
native_driver_python.Transaction_swigregister(Transaction)
class DatabaseManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_DatabaseManager

# Register DatabaseManager in native_driver_python:
native_driver_python.DatabaseManager_swigregister(DatabaseManager)
class Database(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Database

# Register Database in native_driver_python:
native_driver_python.Database_swigregister(Database)
class DatabaseIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_DatabaseIterator

# Register DatabaseIterator in native_driver_python:
native_driver_python.DatabaseIterator_swigregister(DatabaseIterator)
class ReplicaInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ReplicaInfo

# Register ReplicaInfo in native_driver_python:
native_driver_python.ReplicaInfo_swigregister(ReplicaInfo)
class ReplicaInfoIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ReplicaInfoIterator

# Register ReplicaInfoIterator in native_driver_python:
native_driver_python.ReplicaInfoIterator_swigregister(ReplicaInfoIterator)
class UserManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_UserManager

# Register UserManager in native_driver_python:
native_driver_python.UserManager_swigregister(UserManager)
class User(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_User

# Register User in native_driver_python:
native_driver_python.User_swigregister(User)
class UserIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_UserIterator

# Register UserIterator in native_driver_python:
native_driver_python.UserIterator_swigregister(UserIterator)
class Concept(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Concept

# Register Concept in native_driver_python:
native_driver_python.Concept_swigregister(Concept)
class ConceptIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptIterator

# Register ConceptIterator in native_driver_python:
native_driver_python.ConceptIterator_swigregister(ConceptIterator)
class Annotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Annotation

# Register Annotation in native_driver_python:
native_driver_python.Annotation_swigregister(Annotation)
class RolePlayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_RolePlayer

# Register RolePlayer in native_driver_python:
native_driver_python.RolePlayer_swigregister(RolePlayer)
class RolePlayerIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_RolePlayerIterator

# Register RolePlayerIterator in native_driver_python:
native_driver_python.RolePlayerIterator_swigregister(RolePlayerIterator)
class ConceptMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptMap

# Register ConceptMap in native_driver_python:
native_driver_python.ConceptMap_swigregister(ConceptMap)
class ConceptMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptMapIterator

# Register ConceptMapIterator in native_driver_python:
native_driver_python.ConceptMapIterator_swigregister(ConceptMapIterator)
class Explainables(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Explainables

# Register Explainables in native_driver_python:
native_driver_python.Explainables_swigregister(Explainables)
class Explainable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Explainable

# Register Explainable in native_driver_python:
native_driver_python.Explainable_swigregister(Explainable)
class ConceptMapGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptMapGroup

# Register ConceptMapGroup in native_driver_python:
native_driver_python.ConceptMapGroup_swigregister(ConceptMapGroup)
class ConceptMapGroupIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptMapGroupIterator

# Register ConceptMapGroupIterator in native_driver_python:
native_driver_python.ConceptMapGroupIterator_swigregister(ConceptMapGroupIterator)
class StringIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_StringIterator

# Register StringIterator in native_driver_python:
native_driver_python.StringIterator_swigregister(StringIterator)
class StringPairIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_StringPairIterator

# Register StringPairIterator in native_driver_python:
native_driver_python.StringPairIterator_swigregister(StringPairIterator)
class ValueGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ValueGroup

# Register ValueGroup in native_driver_python:
native_driver_python.ValueGroup_swigregister(ValueGroup)
class ValueGroupIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ValueGroupIterator

# Register ValueGroupIterator in native_driver_python:
native_driver_python.ValueGroupIterator_swigregister(ValueGroupIterator)
class Explanation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Explanation

# Register Explanation in native_driver_python:
native_driver_python.Explanation_swigregister(Explanation)
class ExplanationIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ExplanationIterator

# Register ExplanationIterator in native_driver_python:
native_driver_python.ExplanationIterator_swigregister(ExplanationIterator)
class Rule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Rule

# Register Rule in native_driver_python:
native_driver_python.Rule_swigregister(Rule)
class RuleIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_RuleIterator

# Register RuleIterator in native_driver_python:
native_driver_python.RuleIterator_swigregister(RuleIterator)
class BoolPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_BoolPromise

# Register BoolPromise in native_driver_python:
native_driver_python.BoolPromise_swigregister(BoolPromise)
class ConceptPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptPromise

# Register ConceptPromise in native_driver_python:
native_driver_python.ConceptPromise_swigregister(ConceptPromise)
class RulePromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_RulePromise

# Register RulePromise in native_driver_python:
native_driver_python.RulePromise_swigregister(RulePromise)
class StringPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_StringPromise

# Register StringPromise in native_driver_python:
native_driver_python.StringPromise_swigregister(StringPromise)
class VoidPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_VoidPromise

# Register VoidPromise in native_driver_python:
native_driver_python.VoidPromise_swigregister(VoidPromise)
class SessionCallbackDirector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SessionCallbackDirector:
            _self = None
        else:
            _self = self
        native_driver_python.SessionCallbackDirector_swiginit(self, native_driver_python.new_SessionCallbackDirector(_self, ))
    __swig_destroy__ = native_driver_python.delete_SessionCallbackDirector

    def callback(self):
        return native_driver_python.SessionCallbackDirector_callback(self)
    def __disown__(self):
        self.this.disown()
        native_driver_python.disown_SessionCallbackDirector(self)
        return weakref.proxy(self)

# Register SessionCallbackDirector in native_driver_python:
native_driver_python.SessionCallbackDirector_swigregister(SessionCallbackDirector)

def session_callback_register(handler):
    return native_driver_python.session_callback_register(handler)

def session_callback_execute(ID):
    return native_driver_python.session_callback_execute(ID)

def session_callback_erase(ID):
    return native_driver_python.session_callback_erase(ID)

def session_on_close(session, handler):
    return native_driver_python.session_on_close(session, handler)

def session_on_reopen(session, handler):
    return native_driver_python.session_on_reopen(session, handler)
class TransactionCallbackDirector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TransactionCallbackDirector:
            _self = None
        else:
            _self = self
        native_driver_python.TransactionCallbackDirector_swiginit(self, native_driver_python.new_TransactionCallbackDirector(_self, ))
    __swig_destroy__ = native_driver_python.delete_TransactionCallbackDirector

    def callback(self, arg0):
        return native_driver_python.TransactionCallbackDirector_callback(self, arg0)
    def __disown__(self):
        self.this.disown()
        native_driver_python.disown_TransactionCallbackDirector(self)
        return weakref.proxy(self)

# Register TransactionCallbackDirector in native_driver_python:
native_driver_python.TransactionCallbackDirector_swigregister(TransactionCallbackDirector)
cvar = native_driver_python.cvar


def transaction_on_close(transaction, handler):
    return native_driver_python.transaction_on_close(transaction, handler)
Data = native_driver_python.Data
Schema = native_driver_python.Schema
Read = native_driver_python.Read
Write = native_driver_python.Write
Explicit = native_driver_python.Explicit
Transitive = native_driver_python.Transitive
Object = native_driver_python.Object
Boolean = native_driver_python.Boolean
Long = native_driver_python.Long
Double = native_driver_python.Double
String = native_driver_python.String
DateTime = native_driver_python.DateTime
class StringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    _0 = property(native_driver_python.StringPair__0_get, native_driver_python.StringPair__0_set)
    _1 = property(native_driver_python.StringPair__1_get, native_driver_python.StringPair__1_set)
    __swig_destroy__ = native_driver_python.delete_StringPair

# Register StringPair in native_driver_python:
native_driver_python.StringPair_swigregister(StringPair)

def concept_map_get_variables(concept_map):
    return native_driver_python.concept_map_get_variables(concept_map)

def concept_map_get_values(concept_map):
    return native_driver_python.concept_map_get_values(concept_map)

def concept_map_get(concept_map, var):
    return native_driver_python.concept_map_get(concept_map, var)

def concept_map_get_explainables(concept_map):
    return native_driver_python.concept_map_get_explainables(concept_map)

def concept_map_equals(lhs, rhs):
    return native_driver_python.concept_map_equals(lhs, rhs)

def concept_map_to_string(concept_map):
    return native_driver_python.concept_map_to_string(concept_map)

def explainables_equals(lhs, rhs):
    return native_driver_python.explainables_equals(lhs, rhs)

def explainables_to_string(explainables):
    return native_driver_python.explainables_to_string(explainables)

def explainables_get_relation(explainables, var):
    return native_driver_python.explainables_get_relation(explainables, var)

def explainables_get_attribute(explainables, var):
    return native_driver_python.explainables_get_attribute(explainables, var)

def explainables_get_ownership(explainables, owner, attribute):
    return native_driver_python.explainables_get_ownership(explainables, owner, attribute)

def explainables_get_relations_keys(explainables):
    return native_driver_python.explainables_get_relations_keys(explainables)

def explainables_get_attributes_keys(explainables):
    return native_driver_python.explainables_get_attributes_keys(explainables)

def explainables_get_ownerships_keys(explainables):
    return native_driver_python.explainables_get_ownerships_keys(explainables)

def explainable_get_id(explainable):
    return native_driver_python.explainable_get_id(explainable)

def explainable_get_conjunction(explainable):
    return native_driver_python.explainable_get_conjunction(explainable)

def explanation_equals(lhs, rhs):
    return native_driver_python.explanation_equals(lhs, rhs)

def explanation_to_string(explanation):
    return native_driver_python.explanation_to_string(explanation)

def explanation_get_rule(explanation):
    return native_driver_python.explanation_get_rule(explanation)

def explanation_get_conclusion(explanation):
    return native_driver_python.explanation_get_conclusion(explanation)

def explanation_get_condition(explanation):
    return native_driver_python.explanation_get_condition(explanation)

def explanation_get_mapped_variables(explanation):
    return native_driver_python.explanation_get_mapped_variables(explanation)

def explanation_get_mapping(explanation, var):
    return native_driver_python.explanation_get_mapping(explanation, var)

def concept_map_group_get_owner(concept_map_group):
    return native_driver_python.concept_map_group_get_owner(concept_map_group)

def concept_map_group_get_concept_maps(concept_map_group):
    return native_driver_python.concept_map_group_get_concept_maps(concept_map_group)

def concept_map_group_to_string(concept_map_group):
    return native_driver_python.concept_map_group_to_string(concept_map_group)

def concept_map_group_equals(lhs, rhs):
    return native_driver_python.concept_map_group_equals(lhs, rhs)

def value_group_to_string(value_group):
    return native_driver_python.value_group_to_string(value_group)

def value_group_equals(lhs, rhs):
    return native_driver_python.value_group_equals(lhs, rhs)

def value_group_get_owner(value_group):
    return native_driver_python.value_group_get_owner(value_group)

def value_group_get_value(value_group):
    return native_driver_python.value_group_get_value(value_group)

def string_iterator_next(it):
    return native_driver_python.string_iterator_next(it)

def string_pair_drop(string_pair):
    return native_driver_python.string_pair_drop(string_pair)

def string_pair_iterator_next(it):
    return native_driver_python.string_pair_iterator_next(it)

def concept_promise_resolve(promise):
    return native_driver_python.concept_promise_resolve(promise)

def concept_iterator_next(it):
    return native_driver_python.concept_iterator_next(it)

def role_player_iterator_next(it):
    return native_driver_python.role_player_iterator_next(it)

def role_player_get_role_type(role_player):
    return native_driver_python.role_player_get_role_type(role_player)

def role_player_get_player(role_player):
    return native_driver_python.role_player_get_player(role_player)

def value_new_boolean(bool_):
    return native_driver_python.value_new_boolean(bool_)

def value_new_long(long_):
    return native_driver_python.value_new_long(long_)

def value_new_double(double_):
    return native_driver_python.value_new_double(double_)

def value_new_string(string):
    return native_driver_python.value_new_string(string)

def value_new_date_time_from_millis(millis):
    return native_driver_python.value_new_date_time_from_millis(millis)

def value_is_boolean(value):
    return native_driver_python.value_is_boolean(value)

def value_is_long(value):
    return native_driver_python.value_is_long(value)

def value_is_double(value):
    return native_driver_python.value_is_double(value)

def value_is_string(value):
    return native_driver_python.value_is_string(value)

def value_is_date_time(value):
    return native_driver_python.value_is_date_time(value)

def value_get_boolean(value):
    return native_driver_python.value_get_boolean(value)

def value_get_long(value):
    return native_driver_python.value_get_long(value)

def value_get_double(value):
    return native_driver_python.value_get_double(value)

def value_get_string(value):
    return native_driver_python.value_get_string(value)

def value_get_date_time_as_millis(value):
    return native_driver_python.value_get_date_time_as_millis(value)

def annotation_new_key():
    return native_driver_python.annotation_new_key()

def annotation_new_unique():
    return native_driver_python.annotation_new_unique()

def annotation_to_string(annotation):
    return native_driver_python.annotation_to_string(annotation)

def annotation_equals(lhs, rhs):
    return native_driver_python.annotation_equals(lhs, rhs)

def annotation_is_key(annotation):
    return native_driver_python.annotation_is_key(annotation)

def annotation_is_unique(annotation):
    return native_driver_python.annotation_is_unique(annotation)

def concept_equals(lhs, rhs):
    return native_driver_python.concept_equals(lhs, rhs)

def concept_is_entity(concept):
    return native_driver_python.concept_is_entity(concept)

def concept_is_relation(concept):
    return native_driver_python.concept_is_relation(concept)

def concept_is_attribute(concept):
    return native_driver_python.concept_is_attribute(concept)

def concept_is_value(concept):
    return native_driver_python.concept_is_value(concept)

def concept_is_root_thing_type(concept):
    return native_driver_python.concept_is_root_thing_type(concept)

def concept_is_entity_type(concept):
    return native_driver_python.concept_is_entity_type(concept)

def concept_is_relation_type(concept):
    return native_driver_python.concept_is_relation_type(concept)

def concept_is_attribute_type(concept):
    return native_driver_python.concept_is_attribute_type(concept)

def concept_is_role_type(concept):
    return native_driver_python.concept_is_role_type(concept)

def concept_to_string(concept):
    return native_driver_python.concept_to_string(concept)

def concepts_get_root_entity_type():
    return native_driver_python.concepts_get_root_entity_type()

def concepts_get_root_relation_type():
    return native_driver_python.concepts_get_root_relation_type()

def concepts_get_root_attribute_type():
    return native_driver_python.concepts_get_root_attribute_type()

def concepts_get_entity_type(transaction, label):
    return native_driver_python.concepts_get_entity_type(transaction, label)

def concepts_get_relation_type(transaction, label):
    return native_driver_python.concepts_get_relation_type(transaction, label)

def concepts_get_attribute_type(transaction, label):
    return native_driver_python.concepts_get_attribute_type(transaction, label)

def concepts_put_entity_type(transaction, label):
    return native_driver_python.concepts_put_entity_type(transaction, label)

def concepts_put_relation_type(transaction, label):
    return native_driver_python.concepts_put_relation_type(transaction, label)

def concepts_put_attribute_type(transaction, label, value_type):
    return native_driver_python.concepts_put_attribute_type(transaction, label, value_type)

def concepts_get_entity(transaction, iid):
    return native_driver_python.concepts_get_entity(transaction, iid)

def concepts_get_relation(transaction, iid):
    return native_driver_python.concepts_get_relation(transaction, iid)

def concepts_get_attribute(transaction, iid):
    return native_driver_python.concepts_get_attribute(transaction, iid)

def schema_exception_iterator_next(it):
    return native_driver_python.schema_exception_iterator_next(it)

def schema_exception_code(schema_exception):
    return native_driver_python.schema_exception_code(schema_exception)

def schema_exception_message(schema_exception):
    return native_driver_python.schema_exception_message(schema_exception)

def concepts_get_schema_exceptions(transaction):
    return native_driver_python.concepts_get_schema_exceptions(transaction)

def thing_get_iid(thing):
    return native_driver_python.thing_get_iid(thing)

def thing_get_is_inferred(thing):
    return native_driver_python.thing_get_is_inferred(thing)

def entity_get_type(entity):
    return native_driver_python.entity_get_type(entity)

def relation_get_type(relation):
    return native_driver_python.relation_get_type(relation)

def attribute_get_type(attribute):
    return native_driver_python.attribute_get_type(attribute)

def attribute_get_value(attribute):
    return native_driver_python.attribute_get_value(attribute)

def thing_delete(transaction, thing):
    return native_driver_python.thing_delete(transaction, thing)

def thing_is_deleted(transaction, thing):
    return native_driver_python.thing_is_deleted(transaction, thing)

def thing_get_has(transaction, thing, attribute_types, annotations):
    return native_driver_python.thing_get_has(transaction, thing, attribute_types, annotations)

def thing_set_has(transaction, thing, attribute):
    return native_driver_python.thing_set_has(transaction, thing, attribute)

def thing_unset_has(transaction, thing, attribute):
    return native_driver_python.thing_unset_has(transaction, thing, attribute)

def thing_get_relations(transaction, thing, role_types):
    return native_driver_python.thing_get_relations(transaction, thing, role_types)

def thing_get_playing(transaction, thing):
    return native_driver_python.thing_get_playing(transaction, thing)

def relation_add_role_player(transaction, relation, role_type, player):
    return native_driver_python.relation_add_role_player(transaction, relation, role_type, player)

def relation_remove_role_player(transaction, relation, role_type, player):
    return native_driver_python.relation_remove_role_player(transaction, relation, role_type, player)

def relation_get_players_by_role_type(transaction, relation, role_types):
    return native_driver_python.relation_get_players_by_role_type(transaction, relation, role_types)

def relation_get_role_players(transaction, relation):
    return native_driver_python.relation_get_role_players(transaction, relation)

def relation_get_relating(transaction, relation):
    return native_driver_python.relation_get_relating(transaction, relation)

def attribute_get_owners(transaction, attribute, thing_type):
    return native_driver_python.attribute_get_owners(transaction, attribute, thing_type)

def thing_type_is_root(thing_type):
    return native_driver_python.thing_type_is_root(thing_type)

def thing_type_is_abstract(thing_type):
    return native_driver_python.thing_type_is_abstract(thing_type)

def thing_type_get_label(thing_type):
    return native_driver_python.thing_type_get_label(thing_type)

def thing_type_is_deleted(transaction, thing_type):
    return native_driver_python.thing_type_is_deleted(transaction, thing_type)

def thing_type_delete(transaction, thing_type):
    return native_driver_python.thing_type_delete(transaction, thing_type)

def thing_type_set_label(transaction, thing_type, new_label):
    return native_driver_python.thing_type_set_label(transaction, thing_type, new_label)

def thing_type_set_abstract(transaction, thing_type):
    return native_driver_python.thing_type_set_abstract(transaction, thing_type)

def thing_type_unset_abstract(transaction, thing_type):
    return native_driver_python.thing_type_unset_abstract(transaction, thing_type)

def thing_type_get_owns(transaction, thing_type, value_type, transitivity, annotations):
    return native_driver_python.thing_type_get_owns(transaction, thing_type, value_type, transitivity, annotations)

def thing_type_get_owns_overridden(transaction, thing_type, overridden_attribute_type):
    return native_driver_python.thing_type_get_owns_overridden(transaction, thing_type, overridden_attribute_type)

def thing_type_set_owns(transaction, thing_type, attribute_type, overridden_attribute_type, annotations):
    return native_driver_python.thing_type_set_owns(transaction, thing_type, attribute_type, overridden_attribute_type, annotations)

def thing_type_unset_owns(transaction, thing_type, attribute_type):
    return native_driver_python.thing_type_unset_owns(transaction, thing_type, attribute_type)

def thing_type_get_plays(transaction, thing_type, transitivity):
    return native_driver_python.thing_type_get_plays(transaction, thing_type, transitivity)

def thing_type_get_plays_overridden(transaction, thing_type, overridden_role_type):
    return native_driver_python.thing_type_get_plays_overridden(transaction, thing_type, overridden_role_type)

def thing_type_set_plays(transaction, thing_type, role_type, overridden_role_type):
    return native_driver_python.thing_type_set_plays(transaction, thing_type, role_type, overridden_role_type)

def thing_type_unset_plays(transaction, thing_type, role_type):
    return native_driver_python.thing_type_unset_plays(transaction, thing_type, role_type)

def thing_type_get_syntax(transaction, thing_type):
    return native_driver_python.thing_type_get_syntax(transaction, thing_type)

def entity_type_create(transaction, entity_type):
    return native_driver_python.entity_type_create(transaction, entity_type)

def entity_type_get_supertype(transaction, entity_type):
    return native_driver_python.entity_type_get_supertype(transaction, entity_type)

def entity_type_set_supertype(transaction, entity_type, supertype):
    return native_driver_python.entity_type_set_supertype(transaction, entity_type, supertype)

def entity_type_get_supertypes(transaction, entity_type):
    return native_driver_python.entity_type_get_supertypes(transaction, entity_type)

def entity_type_get_subtypes(transaction, entity_type, transitivity):
    return native_driver_python.entity_type_get_subtypes(transaction, entity_type, transitivity)

def entity_type_get_instances(transaction, entity_type, transitivity):
    return native_driver_python.entity_type_get_instances(transaction, entity_type, transitivity)

def relation_type_create(transaction, relation_type):
    return native_driver_python.relation_type_create(transaction, relation_type)

def relation_type_get_supertype(transaction, relation_type):
    return native_driver_python.relation_type_get_supertype(transaction, relation_type)

def relation_type_set_supertype(transaction, relation_type, supertype):
    return native_driver_python.relation_type_set_supertype(transaction, relation_type, supertype)

def relation_type_get_supertypes(transaction, relation_type):
    return native_driver_python.relation_type_get_supertypes(transaction, relation_type)

def relation_type_get_subtypes(transaction, relation_type, transitivity):
    return native_driver_python.relation_type_get_subtypes(transaction, relation_type, transitivity)

def relation_type_get_instances(transaction, relation_type, transitivity):
    return native_driver_python.relation_type_get_instances(transaction, relation_type, transitivity)

def relation_type_get_relates(transaction, relation_type, transitivity):
    return native_driver_python.relation_type_get_relates(transaction, relation_type, transitivity)

def relation_type_get_relates_for_role_label(transaction, relation_type, role_label):
    return native_driver_python.relation_type_get_relates_for_role_label(transaction, relation_type, role_label)

def relation_type_get_relates_overridden(transaction, relation_type, overridden_role_label):
    return native_driver_python.relation_type_get_relates_overridden(transaction, relation_type, overridden_role_label)

def relation_type_set_relates(transaction, relation_type, role_label, overridden_role_label):
    return native_driver_python.relation_type_set_relates(transaction, relation_type, role_label, overridden_role_label)

def relation_type_unset_relates(transaction, relation_type, role_label):
    return native_driver_python.relation_type_unset_relates(transaction, relation_type, role_label)

def attribute_type_get_value_type(attribute_type):
    return native_driver_python.attribute_type_get_value_type(attribute_type)

def attribute_type_put(transaction, attribute_type, value):
    return native_driver_python.attribute_type_put(transaction, attribute_type, value)

def attribute_type_get(transaction, attribute_type, value):
    return native_driver_python.attribute_type_get(transaction, attribute_type, value)

def attribute_type_get_supertype(transaction, attribute_type):
    return native_driver_python.attribute_type_get_supertype(transaction, attribute_type)

def attribute_type_set_supertype(transaction, attribute_type, supertype):
    return native_driver_python.attribute_type_set_supertype(transaction, attribute_type, supertype)

def attribute_type_get_supertypes(transaction, attribute_type):
    return native_driver_python.attribute_type_get_supertypes(transaction, attribute_type)

def attribute_type_get_subtypes(transaction, attribute_type, transitivity):
    return native_driver_python.attribute_type_get_subtypes(transaction, attribute_type, transitivity)

def attribute_type_get_subtypes_with_value_type(transaction, attribute_type, value_type, transitivity):
    return native_driver_python.attribute_type_get_subtypes_with_value_type(transaction, attribute_type, value_type, transitivity)

def attribute_type_get_instances(transaction, attribute_type, transitivity):
    return native_driver_python.attribute_type_get_instances(transaction, attribute_type, transitivity)

def attribute_type_get_regex(transaction, attribute_type):
    return native_driver_python.attribute_type_get_regex(transaction, attribute_type)

def attribute_type_set_regex(transaction, attribute_type, regex):
    return native_driver_python.attribute_type_set_regex(transaction, attribute_type, regex)

def attribute_type_unset_regex(transaction, attribute_type):
    return native_driver_python.attribute_type_unset_regex(transaction, attribute_type)

def attribute_type_get_owners(transaction, attribute_type, transitivity, annotations):
    return native_driver_python.attribute_type_get_owners(transaction, attribute_type, transitivity, annotations)

def role_type_is_root(role_type):
    return native_driver_python.role_type_is_root(role_type)

def role_type_is_abstract(role_type):
    return native_driver_python.role_type_is_abstract(role_type)

def role_type_is_deleted(transaction, role_type):
    return native_driver_python.role_type_is_deleted(transaction, role_type)

def role_type_get_relation_type(transaction, role_type):
    return native_driver_python.role_type_get_relation_type(transaction, role_type)

def role_type_delete(transaction, role_type):
    return native_driver_python.role_type_delete(transaction, role_type)

def role_type_get_scope(role_type):
    return native_driver_python.role_type_get_scope(role_type)

def role_type_get_name(role_type):
    return native_driver_python.role_type_get_name(role_type)

def role_type_set_label(transaction, role_type, new_label):
    return native_driver_python.role_type_set_label(transaction, role_type, new_label)

def role_type_get_supertype(transaction, role_type):
    return native_driver_python.role_type_get_supertype(transaction, role_type)

def role_type_get_supertypes(transaction, role_type):
    return native_driver_python.role_type_get_supertypes(transaction, role_type)

def role_type_get_subtypes(transaction, role_type, transitivity):
    return native_driver_python.role_type_get_subtypes(transaction, role_type, transitivity)

def role_type_get_relation_types(transaction, role_type):
    return native_driver_python.role_type_get_relation_types(transaction, role_type)

def role_type_get_player_types(transaction, role_type, transitivity):
    return native_driver_python.role_type_get_player_types(transaction, role_type, transitivity)

def role_type_get_relation_instances(transaction, role_type, transitivity):
    return native_driver_python.role_type_get_relation_instances(transaction, role_type, transitivity)

def role_type_get_player_instances(transaction, role_type, transitivity):
    return native_driver_python.role_type_get_player_instances(transaction, role_type, transitivity)

def connection_open_core(address):
    return native_driver_python.connection_open_core(address)

def connection_open_cloud(addresses, credential):
    return native_driver_python.connection_open_cloud(addresses, credential)

def connection_open_cloud_translated(public_addresses, private_addresses, credential):
    return native_driver_python.connection_open_cloud_translated(public_addresses, private_addresses, credential)

def connection_is_open(connection):
    return native_driver_python.connection_is_open(connection)

def connection_force_close(connection):
    return native_driver_python.connection_force_close(connection)

def credential_new(username, password, tls_root_ca, with_tls):
    return native_driver_python.credential_new(username, password, tls_root_ca, with_tls)

def database_get_name(database):
    return native_driver_python.database_get_name(database)

def database_delete(database):
    return native_driver_python.database_delete(database)

def database_schema(database):
    return native_driver_python.database_schema(database)

def database_type_schema(database):
    return native_driver_python.database_type_schema(database)

def database_rule_schema(database):
    return native_driver_python.database_rule_schema(database)

def replica_info_iterator_next(it):
    return native_driver_python.replica_info_iterator_next(it)

def database_get_replicas_info(database):
    return native_driver_python.database_get_replicas_info(database)

def database_get_primary_replica_info(database):
    return native_driver_python.database_get_primary_replica_info(database)

def database_get_preferred_replica_info(database):
    return native_driver_python.database_get_preferred_replica_info(database)

def replica_info_get_server(replica_info):
    return native_driver_python.replica_info_get_server(replica_info)

def replica_info_is_primary(replica_info):
    return native_driver_python.replica_info_is_primary(replica_info)

def replica_info_is_preferred(replica_info):
    return native_driver_python.replica_info_is_preferred(replica_info)

def replica_info_get_term(replica_info):
    return native_driver_python.replica_info_get_term(replica_info)

def database_manager_new(connection):
    return native_driver_python.database_manager_new(connection)

def database_iterator_next(it):
    return native_driver_python.database_iterator_next(it)

def databases_all(databases):
    return native_driver_python.databases_all(databases)

def databases_create(databases, name):
    return native_driver_python.databases_create(databases, name)

def databases_contains(databases, name):
    return native_driver_python.databases_contains(databases, name)

def databases_get(databases, name):
    return native_driver_python.databases_get(databases, name)

def init_logging():
    return native_driver_python.init_logging()

def check_error():
    return native_driver_python.check_error()

def get_last_error():
    return native_driver_python.get_last_error()

def error_code(error):
    return native_driver_python.error_code(error)

def error_message(error):
    return native_driver_python.error_message(error)

def rule_to_string(rule):
    return native_driver_python.rule_to_string(rule)

def rule_get_label(rule):
    return native_driver_python.rule_get_label(rule)

def rule_get_when(rule):
    return native_driver_python.rule_get_when(rule)

def rule_get_then(rule):
    return native_driver_python.rule_get_then(rule)

def rule_set_label(transaction, rule, new_label):
    return native_driver_python.rule_set_label(transaction, rule, new_label)

def rule_delete(transaction, rule):
    return native_driver_python.rule_delete(transaction, rule)

def rule_is_deleted(transaction, rule):
    return native_driver_python.rule_is_deleted(transaction, rule)

def rule_promise_resolve(promise):
    return native_driver_python.rule_promise_resolve(promise)

def logic_manager_put_rule(transaction, label, when, then):
    return native_driver_python.logic_manager_put_rule(transaction, label, when, then)

def logic_manager_get_rule(transaction, label):
    return native_driver_python.logic_manager_get_rule(transaction, label)

def rule_iterator_next(it):
    return native_driver_python.rule_iterator_next(it)

def logic_manager_get_rules(transaction):
    return native_driver_python.logic_manager_get_rules(transaction)

def options_new():
    return native_driver_python.options_new()

def options_set_infer(options, infer):
    return native_driver_python.options_set_infer(options, infer)

def options_set_trace_inference(options, trace_inference):
    return native_driver_python.options_set_trace_inference(options, trace_inference)

def options_set_explain(options, explain):
    return native_driver_python.options_set_explain(options, explain)

def options_set_parallel(options, parallel):
    return native_driver_python.options_set_parallel(options, parallel)

def options_set_prefetch(options, prefetch):
    return native_driver_python.options_set_prefetch(options, prefetch)

def options_set_prefetch_size(options, prefetch_size):
    return native_driver_python.options_set_prefetch_size(options, prefetch_size)

def options_set_session_idle_timeout_millis(options, timeout_millis):
    return native_driver_python.options_set_session_idle_timeout_millis(options, timeout_millis)

def options_set_transaction_timeout_millis(options, timeout_millis):
    return native_driver_python.options_set_transaction_timeout_millis(options, timeout_millis)

def options_set_schema_lock_acquire_timeout_millis(options, timeout_millis):
    return native_driver_python.options_set_schema_lock_acquire_timeout_millis(options, timeout_millis)

def options_set_read_any_replica(options, read_any_replica):
    return native_driver_python.options_set_read_any_replica(options, read_any_replica)

def options_get_infer(options):
    return native_driver_python.options_get_infer(options)

def options_get_trace_inference(options):
    return native_driver_python.options_get_trace_inference(options)

def options_get_explain(options):
    return native_driver_python.options_get_explain(options)

def options_get_parallel(options):
    return native_driver_python.options_get_parallel(options)

def options_get_prefetch(options):
    return native_driver_python.options_get_prefetch(options)

def options_get_prefetch_size(options):
    return native_driver_python.options_get_prefetch_size(options)

def options_get_session_idle_timeout_millis(options):
    return native_driver_python.options_get_session_idle_timeout_millis(options)

def options_get_transaction_timeout_millis(options):
    return native_driver_python.options_get_transaction_timeout_millis(options)

def options_get_schema_lock_acquire_timeout_millis(options):
    return native_driver_python.options_get_schema_lock_acquire_timeout_millis(options)

def options_get_read_any_replica(options):
    return native_driver_python.options_get_read_any_replica(options)

def options_has_infer(options):
    return native_driver_python.options_has_infer(options)

def options_has_trace_inference(options):
    return native_driver_python.options_has_trace_inference(options)

def options_has_explain(options):
    return native_driver_python.options_has_explain(options)

def options_has_parallel(options):
    return native_driver_python.options_has_parallel(options)

def options_has_prefetch(options):
    return native_driver_python.options_has_prefetch(options)

def options_has_prefetch_size(options):
    return native_driver_python.options_has_prefetch_size(options)

def options_has_session_idle_timeout_millis(options):
    return native_driver_python.options_has_session_idle_timeout_millis(options)

def options_has_transaction_timeout_millis(options):
    return native_driver_python.options_has_transaction_timeout_millis(options)

def options_has_schema_lock_acquire_timeout_millis(options):
    return native_driver_python.options_has_schema_lock_acquire_timeout_millis(options)

def options_has_read_any_replica(options):
    return native_driver_python.options_has_read_any_replica(options)

def void_promise_resolve(promise):
    return native_driver_python.void_promise_resolve(promise)

def bool_promise_resolve(promise):
    return native_driver_python.bool_promise_resolve(promise)

def string_promise_resolve(promise):
    return native_driver_python.string_promise_resolve(promise)

def query_define(transaction, query, options):
    return native_driver_python.query_define(transaction, query, options)

def query_undefine(transaction, query, options):
    return native_driver_python.query_undefine(transaction, query, options)

def query_delete(transaction, query, options):
    return native_driver_python.query_delete(transaction, query, options)

def concept_map_iterator_next(it):
    return native_driver_python.concept_map_iterator_next(it)

def query_get(transaction, query, options):
    return native_driver_python.query_get(transaction, query, options)

def query_fetch(transaction, query, options):
    return native_driver_python.query_fetch(transaction, query, options)

def query_insert(transaction, query, options):
    return native_driver_python.query_insert(transaction, query, options)

def query_update(transaction, query, options):
    return native_driver_python.query_update(transaction, query, options)

def query_get_aggregate(transaction, query, options):
    return native_driver_python.query_get_aggregate(transaction, query, options)

def concept_map_group_iterator_next(it):
    return native_driver_python.concept_map_group_iterator_next(it)

def query_get_group(transaction, query, options):
    return native_driver_python.query_get_group(transaction, query, options)

def value_group_iterator_next(it):
    return native_driver_python.value_group_iterator_next(it)

def query_get_group_aggregate(transaction, query, options):
    return native_driver_python.query_get_group_aggregate(transaction, query, options)

def explanation_iterator_next(it):
    return native_driver_python.explanation_iterator_next(it)

def query_explain(transaction, explainable, options):
    return native_driver_python.query_explain(transaction, explainable, options)

def session_new(databases, database_name, session_type, options):
    return native_driver_python.session_new(databases, database_name, session_type, options)

def session_get_database_name(session):
    return native_driver_python.session_get_database_name(session)

def session_is_open(session):
    return native_driver_python.session_is_open(session)

def session_force_close(session):
    return native_driver_python.session_force_close(session)

def transaction_new(session, type_, options):
    return native_driver_python.transaction_new(session, type_, options)

def transaction_force_close(txn):
    return native_driver_python.transaction_force_close(txn)

def transaction_commit(txn):
    return native_driver_python.transaction_commit(txn)

def transaction_rollback(txn):
    return native_driver_python.transaction_rollback(txn)

def transaction_is_open(txn):
    return native_driver_python.transaction_is_open(txn)

def user_get_username(user):
    return native_driver_python.user_get_username(user)

def user_get_password_expiry_seconds(user):
    return native_driver_python.user_get_password_expiry_seconds(user)

def user_password_update(user, user_manager, password_old, password_new):
    return native_driver_python.user_password_update(user, user_manager, password_old, password_new)

def user_manager_new(connection):
    return native_driver_python.user_manager_new(connection)

def users_current_user(user_manager):
    return native_driver_python.users_current_user(user_manager)

def user_iterator_next(it):
    return native_driver_python.user_iterator_next(it)

def users_all(user_manager):
    return native_driver_python.users_all(user_manager)

def users_contains(user_manager, username):
    return native_driver_python.users_contains(user_manager, username)

def users_create(user_manager, username, password):
    return native_driver_python.users_create(user_manager, username, password)

def users_delete(user_manager, username):
    return native_driver_python.users_delete(user_manager, username)

def users_get(user_manager, username):
    return native_driver_python.users_get(user_manager, username)

def users_set_password(user_manager, username, password):
    return native_driver_python.users_set_password(user_manager, username, password)

