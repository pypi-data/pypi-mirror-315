Metadata-Version: 2.1
Name: aerospike-vector-search
Version: 3.1.0
Summary: Aerospike Vector Search Client Library for Python
Author-email: "Aerospike, Inc." <info@aerospike.com>
License: Apache Software License
Project-URL: Homepage, https://aerospike.com
Keywords: aerospike,vector,database,ANN
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Database
Requires-Python: >3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: grpcio==1.68.1
Requires-Dist: protobuf==5.28.3
Requires-Dist: pyjwt==2.9.0
Requires-Dist: numpy
Requires-Dist: sphinx_rtd_theme

# Aerospike Vector Search Client Python
Python client for Aerospike Vector Search Database

## Prerequisites
 - Python 3.9 or higher
 - pip version 9.0.1 or higher
 - Aerospike Vector Search DB and Aerospike clusters running.


## Using the client from your application using pip
To resolve the client packages using pip, add the following to $HOME/.pip/pip.conf

```ini
[global]
extra-index-url=https://<jfrog-username>:<jfrog-access-token>@aerospike.jfrog.io/artifactory/api/pypi/ecosystem-python-dev-local/simple 
```

### Install the aerospike_vector_search using pip
```shell
python3 -m pip install aerospike-vector-search
```
Or 

You can add the package name `aerospike-vector-search` to your application's `requirements.txt` and install all dependencies using
```shell
python3 -m pip install -r requirements.txt
```

**Note**
This project makes use of the warnings module to communicate deprecations and upcoming changes.
Run your project with the `-Wd` or Python flag or the `PYTHONWARNINGS=default` environment variable to display relevant warnings.

## Building the client
### Setup build Python Virtual Environment
This is the recommended mode for building the python client.

```shell
# Create virtual environment to isolate dependencies.
python3 -m venv .venv
source .venv/bin/activate
```

### Install requirements
```shell
python3 -m pip install -vvv  -r requirements.txt
```

### Generate gRPC client code
```shell
# Generate the gRPC client code
./proto/codegen.sh
```

### Build the package
```shell
python3 -m pip install build
python3 -m build
```

## Examples

See [examples](https://github.com/aerospike/proximus-examples) for working samples.
