#lang ivy1.7

# a fake deserializer for quic

object quic_deser_random = {}

<<< member

    class `quic_deser_random`;

>>>

<<< impl


    class `quic_deser_random` : public ivy_binary_deser_128 {
        enum {quic_s_init,
              quic_s_type,
              quic_s_version,
	          quic_s_dcil,
	          quic_s_scil,
              quic_s_dcid,
              quic_s_scid,
              quic_s_retry_token_length,
              quic_s_retry_token,
	          quic_s_payload_length,
              quic_s_pkt_num,
              quic_s_payload,
              quic_stream_id,
              quic_stream_off,
              quic_stream_len,
              quic_stream_fin,
              quic_stream_offset,
              quic_stream_length,
              quic_stream_data,
              quic_crypto_offset,
              quic_crypto_length,
              quic_crypto_data,
              quic_ack_largest,
              quic_ack_delay,
              quic_ack_block_count,
              quic_ack_gap,
              quic_ack_block,
              quic_reset_stream_id,
              quic_reset_err_code,
              quic_reset_final_offset,
              quic_stop_sending_id,
              quic_stop_sending_err_code,
              quic_connection_close_err_code,
              quic_connection_close_frame_type,
              quic_connection_close_reason_length,
              quic_connection_close_reason,
              quic_application_close_err_code,
              quic_max_stream_data_id,
              quic_new_connection_id_length,
              quic_new_connection_id_seq_num,
              quic_new_connection_id_retire_prior_to,
              quic_new_connection_id_scid,
              quic_new_connection_id_token,
              quic_path_challenge_data,
              quic_retire_connection_id_seq_num,
              quic_handshake_done,
              quic_immediate_ack,
              quic_ack_frequency, //seq_num
              quic_ack_frequency_ack_eliciting_threshold,
              quic_ack_frequency_request_max_ack_delay,
              quic_ack_frequency_reordering_threshold,
              quic_padding,
              quic_unknow,
              quic_ping,
              quic_s_done} state;
        bool long_format;
        int hdr_type;
        int dcil_long;
        int dcil;
        int scil;
        long frame_type;
        int data_remaining;
        int128_t ack_blocks_expected;
        int128_t ack_block_count;
        int payload_length;
        int fence;
	    bool have_scid = false;
        bool ecn = false;
        int token_length;
        int token_count = 0;
        int token_len = 0;
        int packet_number_length;
        bool is_random_padding_packet = false;
        bool is_from_open_list = false;

    
    public:
        quic_deser_random(const std::vector<char> &inp) : ivy_binary_deser_128(inp),state(quic_s_payload) {
            fence = 0;
            data_remaining = inp.size();
        }

        virtual void  get(int128_t &res) {
            switch (state) {
                case quic_s_payload:
                {
                    getn(res,1);         
                }
                break;
                default:
                    std::cerr << "quic_deser_random 3\n";  
                    throw deser_err();
            }
        }

        int get_pkt_num(int128_t &res) {
            ivy_binary_deser_128::getn(res, packet_number_length); //TODO hack +2
            return packet_number_length;
            std::cerr << "quic_deser_random get_pkt_num test " << res << "\n";
            static int lens[4] = {0,0,1,3};
            int128_t lobyte;
            ivy_binary_deser_128::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            if (bytes == 0) {
                res = lobyte;
                return 1;
            }
            ivy_binary_deser_128::getn(res,bytes);
            //ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
            return bytes+1;
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            throw deser_err();
        }

        virtual bool open_list_elem() {
            if (state == quic_s_payload) {
               return data_remaining-- > 0; 
            }
            std::cerr << "quic_deser_random 1\n";  
            throw deser_err();
        }

        void open_list() {
            if (state == quic_s_payload) {
                std::cerr << "quic_deser_random open_list quic_s_payload\n";
                state = quic_s_payload;
            }
        }
        void close_list() {
            if (state == quic_s_payload) {
                state = quic_s_init;
                pos += QUIC_DESER_FAKE_CHECKSUM_LENGTH; // skip the fake checksum
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = quic_s_payload;
        }

        ~quic_deser_random(){}
    };

>>>
