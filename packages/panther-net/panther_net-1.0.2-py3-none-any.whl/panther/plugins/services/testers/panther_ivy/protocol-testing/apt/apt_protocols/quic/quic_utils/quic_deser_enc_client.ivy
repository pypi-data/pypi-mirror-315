#lang ivy1.7

# a fake deserializer for quic

object quic_deser_enc_client = {}

<<< member

    class `quic_deser_enc_client`;

>>>

<<< impl


    #define QUIC_DESER_FAKE_CHECKSUM_LENGTH 0
    //TODO
    #if defined(IS_NOT_DOCKER) 
        #include "/home/user/Documents/QUIC-RFC9000/panther_ivy/protocol-testing/quic/quic_utils/quic_ser_deser.h"
    #else 
         #include "/opt/panther_ivy/protocol-testing/apt/apt_protocols/quic/quic_utils/quic_ser_deser.h"
    #endif

    class `quic_deser_enc_client` : public ivy_binary_deser_128 {
    //class `quic_deser_enc_client` : public ivy_binary_deser {
        enum {quic_s_init,
              quic_s_type,
              quic_s_version,
	          quic_s_dcil,
	          quic_s_scil,
              quic_s_dcid,
              quic_s_scid,
              quic_s_retry_token_length,
              quic_s_retry_token,
	          quic_s_payload_length,
              quic_s_pkt_num,
              quic_s_payload,
              quic_stream_id,
              quic_stream_off,
              quic_stream_len,
              quic_stream_fin,
              quic_stream_offset,
              quic_stream_length,
              quic_stream_data,
              quic_crypto_offset,
              quic_crypto_length,
              quic_crypto_data,
              quic_ack_largest,
              quic_ack_delay,
              quic_ack_block_count,
              quic_ack_gap,
              quic_ack_block,
              quic_reset_stream_id,
              quic_reset_err_code,
              quic_reset_final_offset,
              quic_stop_sending_id,
              quic_stop_sending_err_code,
              quic_connection_close_err_code,
              quic_connection_close_frame_type,
              quic_connection_close_reason_length,
              quic_connection_close_reason,
              quic_application_close_err_code,
              quic_max_stream_data_id,
              quic_new_connection_id_length,
              quic_new_connection_id_seq_num,
              quic_new_connection_id_retire_prior_to,
              quic_new_connection_id_scid,
              quic_new_connection_id_token,
              quic_path_challenge_data,
              quic_retire_connection_id_seq_num,
              quic_handshake_done,
              quic_immediate_ack,
              quic_ack_frequency, //seq_num
              quic_ack_frequency_ack_eliciting_threshold,
              quic_ack_frequency_request_max_ack_delay,
              quic_ack_frequency_reordering_threshold,
              quic_padding,
              quic_unknow,
              quic_ping,
              quic_s_done} state;
        bool long_format;
        int hdr_type;
        int dcil_long;
        int dcil;
        int scil;
        long frame_type;
        int data_remaining;
        int128_t ack_blocks_expected;
        int128_t ack_block_count;
        //long long ack_blocks_expected;
        //long long ack_block_count;
        int payload_length;
        int fence;
	    bool have_scid = false;
        bool ecn = false;
        int token_length;
        int token_count = 0;
        int token_len = 0;
        int packet_number_length;
        bool is_random_padding_packet = false;
        bool is_from_open_list = false;
        int total_data = 0;

    
    public:
        quic_deser_enc_client(const std::vector<char> &inp) : ivy_binary_deser_128(inp),state(quic_s_init) {
        //quic_deser_enc_client(const std::vector<char> &inp) : ivy_binary_deser(inp),state(quic_s_init) {
            // pos = 42; // skip 42 bytes of IP and UDP header
            total_data = inp.size();
            fence = 0;
        }
        virtual void  get(int128_t &res) {
        //virtual void  get(long long &res) {
            switch (state) {
            case quic_s_init:
            {
                getn(res,1);
                long_format = (res & 0x80) ? true : false;
                //0x7f is 0111 1111 in binary. This means the lower 7 bits of res are significant.
                //0x30    0011 0000
                hdr_type = res & 0x7f; //0x7f;
                //hdr_type = (res >> 2) & 0x03;
                // detect random padding
              /*  if (hdr_type == 0) {
                    state = quic_s_payload;
                    break;
                };*/
                /*int first_byte = res;
                int is_loss_bit_enabled_incoming = 0;
                uint8_t mask_bytes[5] = { 0, 0, 0, 0, 0 };
                uint8_t first_mask = ((first_byte & 0x80) == 0x80) ? 0x0F : (is_loss_bit_enabled_incoming)?0x07:0x1F;
                first_byte ^= (mask_bytes[0] & first_mask);
                std::cerr << "quic_deser_enc_client res " << res << "\n";
                std::cerr << "inp size " << inp.size() << "\n";
                // first_byte ^= (mask_bytes[0] & first_mask);
                // pn_l = (first_byte & 3) + 1;*/  //(first_byte & 3); //
                //packet_number_length = (res >> 5) & 0x03;
                //packet_number_length += 1;

                //TODO big "hack" by lack of time TOFIX
                /*if(const char* env_p2 = std::getenv("PNUM_LEN")) { 
                    if(const char* env_p3 = std::getenv("PNUM_LEN")) {
                        packet_number_length = atoi(env_p3);
                        std::cerr << "PNUM_LEN " << env_p3 << "\n";
                    } 
                    else {
                        packet_number_length = (res >> 5) & 0x03; //might not work
                        packet_number_length += 1;
                    }
                } else {
                    packet_number_length = (res >> 5) & 0x03; //might not work
                    packet_number_length += 1;
                }*/

                std::cerr << "quic_deser_enc_client hdr_type " << hdr_type << "\n";
                std::cerr << "quic_deser_enc_client packet_number_length " << packet_number_length << "\n";
                std::cerr << "quic_deser_enc_client long_format " << long_format << "\n";
                //This is then shifted by 4 so that only the original 0xxx 0000 (3) bits are significant.
                //res = long_format ? ((hdr_type & 0x30) >> 4) : 3;
                /*if(res == hdr_type) {
                    std::cerr << "quic_deser_enc_client randombyte " << hdr_type << "\n";
                    data_remaining = inp.size();
                    is_random_padding_packet = true;
                    state = quic_s_payload;
                } else {*/
                state = quic_s_version;
                //}
            }
            break;
            case quic_s_version:
            {
                if (long_format) {
                    ivy_binary_deser_128::getn(res,4);
                    //ivy_binary_deser::getn(res,4);
	        	}
                else
                    res = 0;
                state = quic_s_dcid;
            }
            break;
            case quic_s_dcid:
            {   
                if (long_format) {
                    int128_t cil;
                    //long long cil;
                    getn(cil,1);
                    std::cerr << "dstID size " << cil << "\n";
                    dcil = cil;
                    dcid_h_client = cil;
                } else {
                    dcil = dcid_h_client; //dcil_long
                }
		        getn(res,(dcil));
                std::cerr << "dstID res " << res << "\n";
                state = quic_s_scid;
            }
            break;
            case quic_s_scid:
            {
                if (long_format) {
                    int128_t cil;
                    //long long cil;
                    getn(cil,1);
                    std::cerr << "sourceID size " << cil << "\n";  
                    if(cil > 0)
                        have_scid = true;
                    else 
                        have_scid = false;
                    scil = cil;
                    scid_h_client = cil;
                } else {
                    scil = 0;
                }
                getn(res,scil);
                std::cerr << "sourceID res " << res << "\n";

                /*if(scil != 8) { //tricks
                tls_field_bytes_map["scid"] = scil;
                }*/
                //int128_t tok_len;
                //long long len;
                //if (long_format & ((hdr_type & 0x30) == 0x00)){
                //get_var_int(tok_len);
		        //}
                // else len = 0;

               /* uint128_t len;
                get_var_int(res); // token length
                data_remaining = res;
                token_length = res;*/

                int128_t len;
                //long long len;
                if (long_format & ((hdr_type & 0x30) == 0x00)){
                    get_var_int(len);
		        }
                else len = 0;

                data_remaining = len;
                
		        std::cerr << "sourceID token len " << data_remaining << "\n";
                state = quic_s_retry_token;
            }
            break;
            case quic_s_retry_token_length:
            {
                int128_t len;
                //long long len;
                if (long_format & ((hdr_type & 0x30) == 0x00)){
                    std::cerr << "quic_deser_enc_client token length\n";
                    get_var_int(res);
                    len = res;
                } else {
                    len = 0;
                }
                token_length = len;
                data_remaining = len;
                std::cerr << "quic_deser_enc_client token " << token_length << "\n";
                state = quic_s_retry_token;
            }
            break;
            case quic_s_pkt_num:
            {
                fence = 0;
                if (payload_length > 0) {
                    fence = pos + payload_length - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                } else {
                    fence = inp.size() - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                }
                std::cerr << "quic_deser_enc_client fence " << fence << "\n";
                int pkt_num_len = get_pkt_num(res);
                std::cerr << "quic_deser_enc_client pkt_num_len " << pkt_num_len << "\n";
                data_remaining = payload_length - pkt_num_len;
                std::cerr << "quic_deser_enc_client pkt_num " << res << "\n";
                state = quic_s_payload;
            }
            break;
            case quic_s_payload_length:
            {
                int128_t len;
                //long long len;
                if (true) {
                    get_var_int(res);
                } else {
                    len = 0;
                }
                payload_length = res;
                data_remaining = res;
                std::cerr << "quic_deser_enc_client payload_length " << payload_length << "\n";
                std::cerr << "quic_deser_enc_client data_remaining " << data_remaining << "\n";
                std::cerr << "quic_deser_enc_client total_data " << total_data << "\n";
                state = quic_s_payload;
            }
            break;
            case quic_s_payload:
            {
                /*if(!is_from_open_list && is_random_padding_packet) {
                    data_remaining--;
                    
                }  
                if (is_random_padding_packet & data_remaining == 0) {
                    std::cerr << "quic_deser_enc_client end of random padding packet\n";
                    end();
                    close_struct();
                }*/
                getn(res,1);         
                // std::cerr << "quic_deser_enc_client payload remaining " << data_remaining << "\n";
            }
            break;
            case quic_s_retry_token:
            {
                //if(token_length > 0){
                    //std::cerr << "quic_deser_enc_client token_length " << token_length << "\n";
                    //getn(res,1);
                    getn(res,1);
                    //token_length--;
                //}
                //else
                    // state = quic_s_pkt_num;
                //std::cerr << "quic_deser_enc_client quic_s_retry_token remaining " << data_remaining << "\n";
            }
            break;
            default:
                std::cerr << "quic_deser_enc_client 3\n";  
                throw deser_err();
            }
        }

        void get_var_int(int128_t &res) {
        //void get_var_int(long long &res) {
            static int lens[4] = {0,1,3,7};
            int128_t lobyte;
            ivy_binary_deser_128::getn(lobyte,1);
            //long long lobyte;
            //ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            ivy_binary_deser_128::getn(res,bytes);
            //ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

       // void get_pkt_num(long long &res) {
       //     ivy_binary_deser::getn(res,(hdr_type & 3)+1);
        int get_pkt_num(int128_t &res) {
            ivy_binary_deser_128::getn(res, packet_number_length); //TODO hack +2
            return packet_number_length;
            std::cerr << "quic_deser_enc_client get_pkt_num test " << res << "\n";
            static int lens[4] = {0,0,1,3};
            int128_t lobyte;
            ivy_binary_deser_128::getn(lobyte,1);
            //long long lobyte;
            //ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            if (bytes == 0) {
                res = lobyte;
                return 1;
            }
            ivy_binary_deser_128::getn(res,bytes);
            //ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
            return bytes+1;
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            if (state == quic_s_payload) {
                int128_t ft;
                ivy_binary_deser_128::getn(ft,1); // could be bigger
                //long long ft;
                //ivy_binary_deser::getn(ft,1); // could be bigger

                /* 
                TODO we should get varint and then parse in consequence like in tls_deser_ser 
                */

                frame_type = ft;
                std::cerr << "recv frame_type = " << frame_type << "\n";
                std::cerr << "saw tag " << ft << "\n";  
            }
            std::cerr << "state          = " << state << "\n";  
            std::cerr << "quic_s_payload = " << quic_s_payload << "\n";
            std::cerr << "quic_s_payload == " << (quic_s_payload == state) << "\n";
            std::cerr << "quic_deser_enc_client 2\n";  
            throw deser_err();
        }

        virtual bool open_list_elem() {
            if (state == quic_s_payload) {
                // We must use/take in count the padding quic_frame since Picoquic client sometimes send packet
                // only with 1 padding quic_frame which make fails the requirement saying that a 
                // packet cannot be empty
               //while ((fence == 0 || pos < fence) && more(1) && inp[pos] == 0)
               //    pos++;  // skip padding frames
               return data_remaining-- > 0; //(fence == 0 || pos < fence) && more(1);
            }
            if (state == quic_s_retry_token) {
                //data_remaining--;
                return data_remaining-- > 0;
            }
            std::cerr << "quic_deser_enc_client 1\n";  
            throw deser_err();
        }

        void open_list() {
            if (state == quic_s_payload) {
                std::cerr << "quic_deser_enc_client open_list quic_s_payload\n";
                is_from_open_list = true; //hack for random bytes packet;
                state = quic_s_payload;
            }
            if (state == quic_ack_block_count) {
                get_var_int(ack_blocks_expected);
                ack_blocks_expected++;  // block count doesn't include first
                ack_block_count = 0;
                state = quic_ack_gap;
            }
        }
        void close_list() {
            if (state == quic_s_payload) {
                state = quic_s_init;
                pos += QUIC_DESER_FAKE_CHECKSUM_LENGTH; // skip the fake checksum
            }
            if (state == quic_s_retry_token) {
                int128_t len;
                std::cerr << "quic_deser_enc_client close_list quic_s_retry_token\n";
                if (long_format) {
                    get_var_int(len);
                } else {
                    len = 0;
                }
                payload_length = len;
                data_remaining = len;
                std::cerr << "Data remaining " << data_remaining << "\n";
                fence = 0;
                if (payload_length > 0) {
                    fence = pos + payload_length - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                } else {
                    fence = inp.size() - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                }
                state = quic_s_payload;
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = quic_s_payload;
        }

        ~quic_deser_enc_client(){}
    };

>>>
