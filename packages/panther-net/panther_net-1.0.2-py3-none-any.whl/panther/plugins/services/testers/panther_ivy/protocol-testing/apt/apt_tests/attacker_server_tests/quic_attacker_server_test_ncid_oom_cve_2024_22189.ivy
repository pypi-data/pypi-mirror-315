#lang ivy1.7

include order
include file
# include random_value

include ivy_quic_mim
include ivy_quic_target
include ivy_quic_attacker_client

include apt_shim
include ivy_quic_shim
include ivy_quic_shim_attacker_client

include ivy_quic_client_behavior
include ivy_quic_attacker_client_behavior

include ivy_quic_client_standard_tp

include apt_time


# An endpoint MUST NOT initiate
#   connection migration before the handshake is confirmed, as defined in
#   section 4.1.2 of [QUIC-TLS].

after init {
    call time_api.c_timer.start;
}

import action show_endpoint_debug_event(ep:ip.endpoint)

after init {
    call show_endpoint_debug_event(client.ep);
    call show_endpoint_debug_event(client.ep_server);
    call show_endpoint_debug_event(server.ep);
    verify_incoming_packet := true;
    # slow_loris := true;

    sock := quic_net.open(endpoint_id.client,client.ep);
    sock_alt := sock; # quic_net.open(endpoint_id.client_alt,client_alt);
    sock_vn  := sock; # quic_net.open(endpoint_id.client_vn,client_vn);
    
    client.set_tls_id(1);
    server.set_tls_id(0);

    client_current_connection_id := 1;
    tls_id_map_ep(client.tls_id)       := client.ep;
    other_tls_id_map_ep(client.tls_id) := server.ep;
    cid_map_tls_id(server_cid)         := client.tls_id;
    cid_map_tls_id(the_cid)            := client.tls_id;
    ep_map_tls_id(client.ep)           := client.tls_id;
    ep_map_cid(client.ep)              := the_cid;
    ep_present(client.ep)              := true;
    used_client_ports(client.ep.port)  := true;
    cid_map_sock(server_cid)           := sock;
    cid_map_sock(the_cid)              := sock;
    cid_map_ep(server_cid)             := server.ep;
    cid_map_ep(the_cid)                := client.ep;

    tls_id_map_cid(client.tls_id)       := the_cid;
    other_tls_id_map_cid(client.tls_id) := server_cid;
    tls_id_map_cid(server.tls_id)       := server_cid;
    other_tls_id_map_cid(server.tls_id) := the_cid;

    call show_cid_event(the_cid);
    call show_cid_event(server_cid);
    
    tls_id_map_ep(server.tls_id)       := server.ep;
    other_tls_id_map_ep(server.tls_id) := client.ep;
    ep_map_tls_id(server.ep)           := server.tls_id;
    # ep_map_cid(server.ep)              := the_cid;
   
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(client.tls_id,false,extns);  # false means this instance of tls is not a server
}

import action show_cid_event(cid:cid)

after init {
    token_saved := false;
}

#  An endpoint cannot send this quic_frame if it was provided with a zero-
#   length connection ID by its peer.  An endpoint that provides a zero-
#   length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID
#   quic_frame as a connection error of type PROTOCOL_VIOLATION.

before quic_frame.retire_connection_id.handle(f:quic_frame.retire_connection_id,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num, src:ip.endpoint) {
    if _generating {
        # require scid = the_cid;
	    require connected(the_cid) & dcid = connected_to(the_cid);
        #require scid = 0;
    }
}


#   Once a sender indicates a Retire Prior To value, smaller values sent
#   in subsequent NEW_CONNECTION_ID frames have no effect.  A receiver
#   MUST ignore any Retire Prior To fields that do not increase the
#   largest received Retire Prior To value7

# https://nvd.nist.gov/vuln/detail/CVE-2024-22189

# quic-go is an implementation of the QUIC protocol in Go. Prior to version 0.42.0, an attacker can
# cause its peer to run out of memory sending a large number of `NEW_CONNECTION_ID` frames that
# retire old connection IDs. The receiver is supposed to respond to each retirement frame with a 
#`RETIRE_CONNECTION_ID` frame. 

# The attacker can prevent the receiver from sending out (the vast majority
# of) these `RETIRE_CONNECTION_ID` frames by collapsing the peers congestion window (by selectively 
# acknowledging received packets) and by manipulating the peer's RTT estimate. Version 0.42.0 contains
#  a patch for the issue. No known workarounds are available.


before quic_frame.ack.handle(f:quic_frame.ack,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num, src:ip.endpoint) {
    if _generating {
        # require scid = the_cid;
	    require f.ack_delay > 0  &  f.ack_delay < 0x1000000;
        #require scid = 0;
    }
}

before quic_frame.new_connection_id.handle_maliciously(f:quic_frame.new_connection_id,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num, src:ip.endpoint) {
    if _generating {
        # require scid = the_cid;
        require used_client_ports(src.port);
        require src.protocol = ip.udp;
        require src.interface = ip.veth_ivy;
        require src.addr = client.ep.addr;
	    require ep_present(src) &  scid = ep_map_cid(src);
        
        require f.length          = 8; #[1]
        require f.retire_prior_to < f.seq_num; #[4]
        require f.seq_num         = last_cid_seq(scid) + 0x1;
        require ~new_connection_id_frame_pending(scid);
        var tp := trans_params(dcid);
        require f.token = stateless_reset_token.value(tp).data_8;
        call show_cid_seq_debug_event(last_cid_seq(scid));
    }
}

after quic_frame.new_connection_id.handle_maliciously(f:quic_frame.new_connection_id,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num, src:ip.endpoint) {
    if _generating {
        new_connection_id_frame_pending(scid) := true;
    }
}

import action show_cid_seq_debug_event(c:cid_seq)

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export quic_frame.stream.handle
export quic_frame.crypto.handle
export quic_frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event

export quic_frame.ack.handle
export quic_frame.new_connection_id.handle_maliciously

# export quic_frame.retire_connection_id.handle
#export quic_frame.rst_stream.handle
#export quic_frame.max_stream_id.handle
#export quic_frame.connection_close.handle
#export quic_frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require conn_total_data(the_cid) > 0;
}


