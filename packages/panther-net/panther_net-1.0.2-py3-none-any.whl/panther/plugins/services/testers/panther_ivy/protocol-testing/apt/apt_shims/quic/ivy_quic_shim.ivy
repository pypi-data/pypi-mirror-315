#lang ivy1.7

include apt_shim

include  quic_protection
# instance net_prot : protection.quic_protection(tls_api.id,tls_api.upper)
include ivy_mim
include ivy_target
include ivy_attacker

include ivy_quic_mim
include ivy_quic_target
include ivy_quic_attacker_client
include ivy_quic_attacker_server
include ivy_c2_server
include ivy_bot

implement quic_net.recv(host:endpoint_id, s: quic_net.socket, src:ip.endpoint, pkts:net_prot.arr) {
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
    call show_socket_debug_event(s);
    if host = endpoint_id.server {       
        call host_debug_event(host);
        call server.behavior(host,s,src,pkts);
    } else if host = endpoint_id.client | host = endpoint_id.client_alt { 
        call host_debug_event(host);
        call client.behavior(host,s,src,pkts);
    } else if host = endpoint_id.target {
        call host_debug_event(host);
    } else if host = endpoint_id.man_in_the_middle {
        call mim_agent.behavior(host,s,src,pkts);
    } else if host = endpoint_id.malicious_server {
        call server.behavior(host,s,src,pkts);
    } else if host = endpoint_id.malicious_client {
        call client.behavior(host,s,src,pkts);
    } else {
        # ERROR
        call undefined_host_error(host,s,src);
    };    
}

import action show_socket_debug_event(s:quic_net.socket)
import action host_debug_event(host:endpoint_id)
import action undefined_host_error(host:endpoint_id,s:quic_net.socket,src:ip.endpoint)

# This gives the interpretation of some of the basic data types.
# Some of these interpretations are chosen to make solving more efficient.
# Notably, the `intbv` type can be used to represent large numbers with
# small bit vector enodings.
