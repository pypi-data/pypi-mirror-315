#lang ivy1.7

include quic_shim
include quic_attack_connection
# include ivy_quic_shim_client
include apt_shim
include ping_shim
include malicious_stream_data

# The QUIC test shim
# ------------------


# Packet event shim
# -----------------
#
# When a packet even is generated, we encode the packet contents and
# route it to the network. The encoding involves serializing the packet
# to its byte-level representation, and then applying protection.
#
# TODO: We do not actually generate protection layer events. Instead,
# whenever a generated packet event occurs, we deterministically
# serialize and encrypt_quic the packet for transmission. This is not quite sound,
# since in fact there are a few choices to be made in the encoding (such
# as the number of bytes in the sequence number encoding) and these choices
# should in principle be randomized. We have not done this, however, since we
# are more interested in the higher-layer aspects of the protocol.
#
# TODO: We don't coalesce multiple packets into a datagram. To do
# this, we could enqueue packets (as frames are enqueued) and then
# randomly choose the moment to encode them.
#
# Note: To encode the packet, we need a reference sequence number,
# which is the sequence number of the most recently transmitted packet
# on the same connection. This information is obtained from the protocol
# state by the procedure `reference_pkt_num`.
#
# Note: We assume the each endpoint the tester can transmit on has been
# mapped to an open socket. This map is provided by `endpoint_to_socket`.
#


after malicious_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    if _generating {  # & ~conn_closed(pkt.the_cid) # TODO
        var spkt := quic_packet_serdes.to_bytes(pkt);
        var rnum := reference_pkt_num(spkt,false);
        var tls_id := ep_map_tls_id(src);
        
        var ppkt := net_prot.encrypt_quic(tls_id,rnum,spkt);
        var pkts := net_prot.arr.empty;
        pkts := pkts.append(ppkt);
        call on_packet_sent(src,dst,pkt, ppkt.size);
        total_data_sent := total_data_sent + ppkt.size;
        call show_socket_debug(cid_map_sock(pkt.dst_cid),pkt.dst_cid);
        call quic_net.send(endpoint_to_pid(src),cid_map_sock(pkt.dst_cid),dst,pkts);
    }
}

after packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    if _generating {  # & ~conn_closed(pkt.the_cid) # TODO
        var spkt := quic_packet_serdes.to_bytes(pkt);
        var rnum := reference_pkt_num(spkt,false);
        var tls_id := ep_map_tls_id(src);

        var ppkt := net_prot.encrypt_quic(tls_id,rnum,spkt);
        var pkts := net_prot.arr.empty;
        pkts := pkts.append(ppkt);
        call on_packet_sent(src,dst,pkt, ppkt.size);
        total_data_sent := total_data_sent + ppkt.size;
        call show_socket_debug(cid_map_sock(pkt.dst_cid),pkt.dst_cid);
        call quic_net.send(endpoint_to_pid(src),cid_map_sock(pkt.dst_cid),dst,pkts);
        used_client_ports_in_packet_event(src.port) := true;
    }
}

after open_connection(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    if _generating {  # & ~conn_closed(pkt.the_cid) # TODO
        var spkt := quic_packet_serdes.to_bytes(pkt);
        var rnum := reference_pkt_num(spkt,false);
        var tls_id := ep_map_tls_id(src);
        
        var ppkt := net_prot.encrypt_quic(tls_id,rnum,spkt);
        var pkts := net_prot.arr.empty;
        pkts := pkts.append(ppkt);
        
        call on_packet_sent(src,dst,pkt, ppkt.size);
        total_data_sent := total_data_sent + ppkt.size;
        call show_socket_debug(cid_map_sock(pkt.dst_cid),pkt.dst_cid);
        call quic_net.send(endpoint_to_pid(src),cid_map_sock(pkt.dst_cid),dst,pkts);

        # the_cid    := next_cid(the_cid);
        # server_cid := next_cid(server_cid);

        # nonce_cid(the_cid)           := server_cid;
        # client_current_connection_id := client_current_connection_id.next;
        
        # client.ep.port  := client.ep.port + 1;
        # client.set_tls_id(client_current_connection_id);
        
        # sock     := quic_net.open(endpoint_id.client,client.ep);
        # sock_alt := sock; # quic_net.open(endpoint_id.client_alt,client_alt);
        # sock_vn  := sock; # quic_net.open(endpoint_id.client_vn,client_vn);
        #  # server.set_tls_id(client_current_connection_id.next);

        # tls_id_map_ep(client.tls_id)       := client.ep;
        # other_tls_id_map_ep(client.tls_id) := server.ep;
        # cid_map_tls_id(server_cid)         := client.tls_id;
        # cid_map_tls_id(the_cid)            := client.tls_id;
        # ep_map_tls_id(client.ep)           := client.tls_id;
        # ep_map_cid(client.ep)              := the_cid;
        # ep_present(client.ep)              := true;
        # used_client_ports(client.ep.port)  := true;
        # cid_map_sock(server_cid)           := sock;
        # cid_map_sock(the_cid)              := sock;
        # cid_map_ep(server_cid)             := server.ep;
        # cid_map_ep(the_cid)                := client.ep;
    
        # call show_cid_event(the_cid);
        # call show_cid_event(server_cid);
        
        # tls_id_map_ep(server.tls_id)       := server.ep;
        # other_tls_id_map_ep(server.tls_id) := client.ep;
        # ep_map_tls_id(server.ep)           := server.tls_id;

        # var extns := tls_extensions.empty;
        # extns     := extns.append(make_transport_parameters);
        # call tls_api.upper.create(client_current_connection_id,false,extns); 
    }
}

import action show_socket_debug(sock:quic_net.socket,c:cid)

# after malicious_packet_event_vn(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet_vn) {
#     if _generating {  # & ~conn_closed(pkt.the_cid)
#         var spkt := quic_vn_packet_serdes.to_bytes(pkt);
#         # var rnum := reference_pkt_num(spkt,false);
#         # var tls_id := dst_tls_id(dst);
#         # var ppkt := net_prot.encrypt_quic(tls_id,rnum,spkt); # no encryption ?
#         var pkts := net_prot.arr.empty;
#         pkts := pkts.append(spkt);
#         total_data_sent := total_data_sent + spkt.size;
#         call quic_net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
#     }
# }

# after malicious_packet_event_retry(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet_retry) {
#     if _generating {  # & ~conn_closed(pkt.the_cid)
#         var spkt := quic_retry_packet_serdes.to_bytes(pkt);
#         var pkts := net_prot.arr.empty;
#         pkts := pkts.append(spkt);
#         total_data_sent := total_data_sent + spkt.size;
#         call quic_net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
#     }
# }

# after malicious_packet_event_coal_0rtt(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet_coal_0rtt) {
#     if _generating {  # & ~conn_closed(pkt.the_cid)
#         var spkt := quic_0rtt_coal_packet_serdes.to_bytes(pkt);
#         var pkts := net_prot.arr.empty;
#         var tls_id := src_tls_id(src);
#         var rnum := reference_pkt_num(spkt,false);
#         var ppkt := net_prot.encrypt_zrtt_quic(tls_id,rnum,spkt);
#         pkts := pkts.append(ppkt);
#         total_data_sent := total_data_sent + ppkt.size;
#         call quic_net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
#         zero_rtt_sent := true;
#     }
# }


# after malicious_packet_event_0rtt(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet_0rtt) {
#     if _generating {  # & ~conn_closed(pkt.the_cid)
#         var spkt := quic_0rtt_packet_serdes.to_bytes(pkt);
#         var pkts := net_prot.arr.empty;
#         var tls_id := src_tls_id(src);
#         var rnum := reference_pkt_num(spkt,false);
#         var ppkt := net_prot.encrypt_zrtt_quic(tls_id,rnum,spkt);
#         pkts := pkts.append(ppkt);
#         total_data_sent := total_data_sent + ppkt.size;
#         call quic_net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
#         zero_rtt_sent := true;
#     }
# }

