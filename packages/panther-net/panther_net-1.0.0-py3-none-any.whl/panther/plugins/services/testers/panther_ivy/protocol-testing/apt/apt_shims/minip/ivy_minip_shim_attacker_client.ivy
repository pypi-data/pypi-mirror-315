#lang ivy1.7

include ping_packet
include ping_shim
include quic_shim 
include apt_shim
include malicious_stream_data


# The QUIC test shim
# ------------------


# Packet event shim
# -----------------
#
# When a packet even is generated, we encode the packet contents and
# route it to the network. The encoding involves serializing the packet
# to its byte-level representation, and then applying protection.
#
# TODO: We do not actually generate protection layer events. Instead,
# whenever a generated packet event occurs, we deterministically
# serialize and encrypt_quic the packet for transmission. This is not quite sound,
# since in fact there are a few choices to be made in the encoding (such
# as the number of bytes in the sequence number encoding) and these choices
# should in principle be randomized. We have not done this, however, since we
# are more interested in the higher-layer aspects of the protocol.
#
# TODO: We don't coalesce multiple packets into a datagram. To do
# this, we could enqueue packets (as frames are enqueued) and then
# randomly choose the moment to encode them.
#
# Note: To encode the packet, we need a reference sequence number,
# which is the sequence number of the most recently transmitted packet
# on the same connection. This information is obtained from the protocol
# state by the procedure `reference_pkt_num`.
#
# Note: We assume the each endpoint the tester can transmit on has been
# mapped to an open socket. This map is provided by `endpoint_to_socket_mim`.
#

after init {
    is_mim := true;
}

after ping_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.ping_packet) {
    if _generating {  
        var spkt := ping_packet_serdes.to_bytes(pkt);
        var tls_id := src_tls_id(src);
        var pkts := net_prot.arr.empty;
        pkts := pkts.append(spkt);
        call quic_net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
    }
}

after ping_packet_event_malicious(src:ip.endpoint,dst:ip.endpoint,pkt:packet.ping_packet) {
    if _generating {  
        var spkt := ping_packet_serdes.to_bytes(pkt);
        var tls_id := src_tls_id(src);
        var pkts := net_prot.arr.empty;
        pkts := pkts.append(spkt);
        call quic_net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
    }
}

