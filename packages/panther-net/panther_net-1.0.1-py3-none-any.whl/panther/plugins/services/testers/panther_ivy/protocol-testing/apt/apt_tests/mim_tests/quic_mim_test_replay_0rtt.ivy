#lang ivy1.7

include order
include file
# include random_value

include ivy_quic_mim
include ivy_quic_target
include ivy_quic_attacker_client

include ivy_quic_shim
include ivy_quic_shim_mim

include ivy_man_in_the_middle_quic_behavior

include ivy_quic_client_standard_tp

# NB: need bigger timeout (at least 90 sec)

after init {
    is_mim_standalone := true;
    hijack_tls        := false;
    spoof_client_ip   := false;
    call mim_agent.enable_ip_forward;
    forward_packets   := false;
    call mim_agent.configure_NAT_attack(client_addr,server_addr);
    call mim_agent.configure_NAT_attack(server_addr,client_addr);
}

after init {
    initial_max_stream_data_uni_server_0rtt := 5000;
    initial_max_stream_data_bidi_remote_server_0rtt := 5000;
    initial_max_data_server_0rtt := 5000;
    initial_max_stream_data_bidi_local_server_0rtt := 5000;
    initial_max_stream_id_bidi_server_0rtt := 200;
    active_connection_id_limit_server_0rtt := 200;
}

# TODO start 2 implementation connection + do not erase ticket + count connection

export packet.forward_to_client
attribute packet.forward_to_client.weight = "100"
export packet.forward_to_server
attribute packet.forward_to_server.weight = "100"

object packet = {
    ...
    
    object quic_packet = {
        ...
        before replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                var interest_pkt := quic_packet_received_at_round(dst,
                                                                  coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                  current_forwarding_round(dst));
                require pkt.ptype       = interest_pkt.ptype;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                var interest_pkt := quic_packet_received_at_round(dst,
                                                                  coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                  current_forwarding_round(dst));
                require pkt.ptype       = interest_pkt.ptype;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
           
            if _generating {
                # require ~quic_packet_forwarded(dst,pkt);
                var interest_pkt := quic_packet_received_at_round(dst,
                                                                  coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                  current_forwarding_round(dst));
                require pkt.ptype       = interest_pkt.ptype;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
           
            if _generating {
                # require ~quic_packet_forwarded(dst,pkt);
                var interest_pkt := quic_packet_received_at_round(dst,
                                                                  coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                  current_forwarding_round(dst));
                require pkt.ptype       = interest_pkt.ptype;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
           
            if _generating {
                require pkt.ptype       = quic_packet_type.one_rtt |
                        pkt.ptype       = quic_packet_type.zero_rtt |
                        pkt.ptype       = quic_packet_type.handshake |
                        pkt.ptype       = quic_packet_type.retry |
                        pkt.ptype       = quic_packet_type.initial;

                require pkt.pversion    = 0x00000000 | 
                        pkt.pversion    = 0x00000001 |
                        pkt.pversion    = 0xff000022 |
                        pkt.pversion    = 0xff00001d |
                        pkt.pversion    = 0xff00001c |
                        pkt.pversion    = 0xff00001b |
                        (pkt.pversion   ~= 0x00000000 & pkt.pversion   ~= 0x00000001 &
                         pkt.pversion   ~= 0xff000022 & pkt.pversion   ~= 0xff00001d &
                         pkt.pversion   ~= 0xff00001c & pkt.pversion   ~= 0xff00001b);
                
                var interest_pkt := quic_packet_received_at_round(dst,
                                                                  coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                  current_forwarding_round(dst));
                
                require (pkt.dst_cid     = interest_pkt.dst_cid &
                         pkt.src_cid     = interest_pkt.src_cid) |
                        (pkt.dst_cid     = interest_pkt.src_cid &
                         pkt.src_cid     = interest_pkt.dst_cid);

                require (pkt.token       = interest_pkt.token) | 
                        (pkt.token.end >= 0);

                require pkt.seq_num     = interest_pkt.seq_num |
                        pkt.seq_num     < interest_pkt.seq_num |
                        pkt.seq_num     > interest_pkt.seq_num;

                require pkt.payload     = interest_pkt.payload |
                                          pkt.payload.end >= 0;
            } 
        }
    }
}



export packet.quic_packet.forward_to_server
export packet.quic_packet.forward_to_client

# attribute packet.quic_packet.forward_to_server.weight = "15"
# attribute packet.quic_packet.forward_to_client.weight = "15"

export packet.quic_packet.replay_to_client
export packet.quic_packet.replay_to_server

# attribute packet.quic_packet.replay_to_server.weight = "5"
# attribute packet.quic_packet.replay_to_client.weight = "5"

# export packet.quic_packet.modify
# attribute packet.quic_packet.modify.weight = "5"

import action show_last_cppkt_forwarded_to_client_debug_event(x:stream_pos)
import action show_last_cppkt_forwarded_to_server_debug_event(x:stream_pos)

# TODO
# Faire en sorte que le spoofing se passe quand le deuximee connection est initiÃ© -> port change

object packet = {
    ...
    
    object encrypted_quic_packet = {
        ...

        before replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                var interest_pkt := encrypted_quic_packet_received_at_round(dst,
                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                            current_forwarding_round(dst));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                # require pkt.payload_len = interest_pkt.payload_len;
                # require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.seq_num_payload = interest_pkt.seq_num_payload;
            } 
        }

        before replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                var interest_pkt := encrypted_quic_packet_received_at_round(dst,
                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                            current_forwarding_round(dst));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                # require pkt.payload_len = interest_pkt.payload_len;
                # require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.seq_num_payload     = interest_pkt.seq_num_payload;
            } 
        }

        before forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require ~encrypted_quic_packet_forwarded(dst,pkt);
                var interest_pkt := encrypted_quic_packet_received_at_round(dst,
                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                            current_forwarding_round(dst));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                # require pkt.payload_len = interest_pkt.payload_len;
                # require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.seq_num_payload  = interest_pkt.seq_num_payload;
                # require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            } 
        }

        before forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require ~encrypted_quic_packet_forwarded(dst,pkt);
                var interest_pkt := encrypted_quic_packet_received_at_round(dst,
                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                            current_forwarding_round(dst));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.pversion    = interest_pkt.pversion;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.src_cid     = interest_pkt.src_cid;
                require pkt.token       = interest_pkt.token;
                # require pkt.payload_len = interest_pkt.payload_len;
                # require pkt.seq_num     = interest_pkt.seq_num;
                require pkt.seq_num_payload  = interest_pkt.seq_num_payload;
                # require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            } 
        }

        before modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                var interest_pkt := encrypted_quic_packet_received_at_round(dst,
                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                            current_forwarding_round(dst));

                require pkt.head_byte   = interest_pkt.head_byte;
                # TODO
                require pkt.pversion    = 0x00000000  -> 
                            (pkt.token.end = 0 &  
                             pkt.seq_num_payload.end = 0) | 
                        pkt.pversion    = 0x00000001 |
                        pkt.pversion    = 0xff000022 |
                        pkt.pversion    = 0xff00001d |
                        pkt.pversion    = 0xff00001c |
                        pkt.pversion    = 0xff00001b |
                        (pkt.pversion   ~= 0x00000000 & pkt.pversion    ~= 0x00000001 &
                         pkt.pversion   ~= 0xff000022 & pkt.pversion    ~= 0xff00001d &
                         pkt.pversion   ~= 0xff00001c & pkt.pversion    ~= 0xff00001b);
                
                require (pkt.dst_cid     = interest_pkt.dst_cid &
                         pkt.src_cid     = interest_pkt.src_cid) |
                        (pkt.dst_cid     = interest_pkt.src_cid &
                         pkt.src_cid     = interest_pkt.dst_cid);

                require (pkt.token       = interest_pkt.token);

                        
                # require pkt.seq_num     = interest_pkt.seq_num |
                #         pkt.seq_num     < interest_pkt.seq_num |
                #         pkt.seq_num     > interest_pkt.seq_num;
                
                require pkt.seq_num_payload = interest_pkt.seq_num_payload &
                        pkt.seq_num_payload.end = pkt.seq_num_payload.end;
            } 
        }
    }
}

export packet.encrypted_quic_packet.forward_to_server
export packet.encrypted_quic_packet.forward_to_client

# attribute packet.encrypted_quic_packet.forward_to_server.weight = "30"
# attribute packet.encrypted_quic_packet.forward_to_client.weight = "30"

# export packet.encrypted_quic_packet.replay_to_client
export packet.encrypted_quic_packet.replay_to_server

# attribute packet.encrypted_quic_packet.replay_to_server.weight = "5"
# attribute packet.encrypted_quic_packet.replay_to_client.weight = "5"

# export    packet.encrypted_quic_packet.modify
# attribute packet.encrypted_quic_packet.modify.weight = "5"


object packet = {
    ...
    
    object random_padding_encrypted_quic_packet = {
        ...

        before replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.random_padding_encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require is_random_padding_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.payload = random_padding_encrypted_quic_packet_received_at_round(dst,
                                                                                               coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                               current_forwarding_round(dst)).payload;
            } 
        }

        before replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.random_padding_encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                require pkt.payload = random_padding_encrypted_quic_packet_received_at_round(dst,
                                                                                               coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                               current_forwarding_round(dst)).payload;
            } 
        }

        before forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.random_padding_encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require ~random_padding_encrypted_quic_packet_forwarded(dst,pkt);
                # require is_random_padding_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.payload = random_padding_encrypted_quic_packet_received_at_round(dst,
                                                                                               coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                               current_forwarding_round(dst)).payload;
            } 
        }

        before forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.random_padding_encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require ~random_padding_encrypted_quic_packet_forwarded(dst,pkt);
                # require is_random_padding_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.payload = random_padding_encrypted_quic_packet_received_at_round(dst,
                                                                                               coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                               current_forwarding_round(dst)).payload;
            } 
        }

        before modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.random_padding_encrypted_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                require is_random_padding_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.payload = random_padding_encrypted_quic_packet_received_at_round(dst,
                                                                                               coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                               current_forwarding_round(dst)).payload | 
                                      pkt.payload.end >= 0;
            } 
        }
    }
}

export packet.random_padding_encrypted_quic_packet.forward_to_server
export packet.random_padding_encrypted_quic_packet.forward_to_client

# attribute packet.random_padding_encrypted_quic_packet.forward_to_server.weight = "15"
# attribute packet.random_padding_encrypted_quic_packet.forward_to_client.weight = "15"

export packet.random_padding_encrypted_quic_packet.replay_to_client
export packet.random_padding_encrypted_quic_packet.replay_to_server

# attribute packet.random_padding_encrypted_quic_packet.replay_to_server.weight = "5"
# attribute packet.random_padding_encrypted_quic_packet.replay_to_client.weight = "5"

# export packet.random_padding_encrypted_quic_packet.modify

# attribute packet.random_padding_encrypted_quic_packet.modify.weight = "5"

object packet = {
    ...
    
    object encrypted_short_quic_packet = {
        ...

        before replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_short_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require is_encrypted_short_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                var interest_pkt := encrypted_short_quic_packet_received_at_round(dst,
                                                                                    coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                    current_forwarding_round(dst));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_short_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                var interest_pkt := encrypted_short_quic_packet_received_at_round(dst,
                                                                                    coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                    current_forwarding_round(dst));
                # require is_encrypted_short_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_short_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                var interest_pkt := encrypted_short_quic_packet_received_at_round(dst,
                                                                                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                current_forwarding_round(dst));
                # require is_encrypted_short_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                # require ~encrypted_short_quic_packet_forwarded(dst,pkt);
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_short_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                # require ~encrypted_short_quic_packet_forwarded(dst,pkt);
                var interest_pkt := encrypted_short_quic_packet_received_at_round(dst,
                                                                                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                current_forwarding_round(dst));
                # require is_encrypted_short_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.head_byte   = interest_pkt.head_byte;
                require pkt.dst_cid     = interest_pkt.dst_cid;
                require pkt.payload     = interest_pkt.payload;
            } 
        }

        before modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_short_quic_packet) {
           
            if _generating {
                require mim_agent.number_of_connection_from(dst.addr) = 2;
                var interest_pkt := encrypted_short_quic_packet_received_at_round(dst,
                                                                                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                current_forwarding_round(dst));
                require pkt.head_byte   = interest_pkt.head_byte;

                require (pkt.dst_cid    = interest_pkt.dst_cid | 
                         pkt.dst_cid   ~= interest_pkt.dst_cid);

                require pkt.payload     = interest_pkt.payload;
            } 
        }
    }
}


export packet.encrypted_short_quic_packet.forward_to_server
export packet.encrypted_short_quic_packet.forward_to_client

# attribute packet.encrypted_short_quic_packet.forward_to_server.weight = "30"
# attribute packet.encrypted_short_quic_packet.forward_to_client.weight = "30"

export packet.encrypted_short_quic_packet.replay_to_client
export packet.encrypted_short_quic_packet.replay_to_server

# attribute packet.encrypted_short_quic_packet.replay_to_server.weight = "5"
# attribute packet.encrypted_short_quic_packet.replay_to_client.weight = "5"

# export packet.encrypted_short_quic_packet.modify

# attribute packet.encrypted_short_quic_packet.modify.weight = "5"

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    call mim_agent.reset_NAT;
}

