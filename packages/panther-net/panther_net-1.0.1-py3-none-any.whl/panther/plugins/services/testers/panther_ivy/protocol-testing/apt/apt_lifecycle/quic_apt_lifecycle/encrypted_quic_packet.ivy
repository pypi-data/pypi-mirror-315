#lang ivy1.7


# Initial state
# -------------

# The history variables are initialized as follows.  Initially, no
# connections have been seen and no packets have been sent or
# acknowledged.


object packet = {
   ...

    # Initial Packet {
    #     Header Form (1) = 1,
    #     Fixed Bit (1) = 1,
    #     Long Packet Type (2) = 0,
    #     Reserved Bits (2),         # Protected
    #     Packet Number Length (2),  # Protected
    #     Version (32),
    #     DCID Len (8),
    #     Destination Connection ID (0..160),
    #     SCID Len (8),
    #     Source Connection ID (0..160),
    #     Token Length (i),
    #     Token (..),
    #     Length (i),
    #     Packet Number (8..32),     # Protected
    #     Protected Payload (0..24), # Skipped Part
    #     Protected Payload (128),   # Sampled Part
    #     Protected Payload (..)     # Remainder
    # }

    object encrypted_quic_packet = {
        variant this of packet = struct {
            head_byte : stream_pos, # [2]
            pversion : version, # [3]
            dst_cid : cid, # [4]
            src_cid : cid, # [5]
            token : stream_data, # [6]
            # payload_len : stream_pos, # [6]
            # seq_num : pkt_num, # [7]
            seq_num_payload : stream_data # [8]
        }

        #Hamid
        #instance retired_cids : array(idx, cid_seq)
        #Hamid

        instance idx : unbounded_sequence
        instance arr : array(idx,this) 

        action long(pkt:this) returns(res:bool) = {
            res := bvand(0x80,pkt.head_byte) ~= 0;
        }

    }
}


object packet = {
    ...

    object encrypted_quic_packet = {
        ...

        action forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            # require _generating;
            if _generating {
                if spoof_server_ip {
                    require src = mim_agent.ep_mim & dst = mim_agent.ep_client;
                } else {
                    require src = mim_agent.ep_server & dst = mim_agent.ep_client;
                }
                # require num_packets_received_at_round(dst,current_forwarding_round(dst)) > 0;
                require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                # require num_queued_packets(dst,current_forwarding_round(dst)) <= num_packets_received_at_round(dst,current_forwarding_round(dst));
                require mim_agent.nat_configured;
                require pkt.seq_num_payload.end > 0;
                require src ~= dst;
                call show_last_packet_received_debug_event(src,dst,pkt);
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false; 
                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
            }
        }
        
        action forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            # require _generating;
            if _generating {
                if spoof_client_ip {
                    require src = mim_agent.ep_mim & dst = mim_agent.ep_server;
                } else {
                    require src = mim_agent.ep_client & dst = mim_agent.ep_server;
                }
                # require num_packets_received_at_round(dst,current_forwarding_round(dst)) > 0;
                require pkt.seq_num_payload.end > 0;
                require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                # require num_queued_packets(dst,current_forwarding_round(dst)) <= num_packets_received_at_round(dst,current_forwarding_round(dst));
                require mim_agent.nat_configured;
                require src ~= dst;
                require mim_agent.ep_server.addr ~= 0;  # must have a client address to send to
                call show_last_packet_received_debug_event(src,dst,pkt);
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false;    
                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
            }
        }

        import action show_last_packet_received_debug_event(src:ip.endpoint,dst:ip.endpoint, pkt:packet)
        import action show_last_packets_received(src:ip.endpoint,dst:ip.endpoint, pkt:packet.encrypted_quic_packet.arr)

        action replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            # require _generating;
            require mim_agent.nat_configured;
            if spoof_server_ip {
                require src = mim_agent.ep_mim & dst = mim_agent.ep_client;
            } else {
                require src = mim_agent.ep_server & dst = mim_agent.ep_client;
            }
            require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            # require num_queued_packets(dst,current_forwarding_round(dst)) <= num_packets_received_at_round(dst,current_forwarding_round(dst));
            require src ~= dst;
            call show_last_packet_received_debug_event(src,dst,pkt);
            require pkt.seq_num_payload.end > 0;
            ...
            call enqueue_packet(src,dst,pkt);
            is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := true;
            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
        }

        action replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            # require _generating;
            require pkt.seq_num_payload.end > 0;
            if spoof_client_ip {
                require src = mim_agent.ep_mim & dst = mim_agent.ep_server;
            } else {
                require src = mim_agent.ep_client & dst = mim_agent.ep_server;
            }
            require mim_agent.nat_configured;
            # require num_queued_packets(dst,current_forwarding_round(dst)) <= num_packets_received_at_round(dst,current_forwarding_round(dst));
            require is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            require src ~= dst;
            require mim_agent.ep_server.addr ~= 0;  # must have a client address to send to
            ...
            call enqueue_packet(src,dst,pkt);
            is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := true;     
            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
        }

        action modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            # require _generating;
            if _generating {
                require src = mim_agent.ep_client & dst = mim_agent.ep_server |
                        src = mim_agent.ep_server & dst = mim_agent.ep_client;
                call show_number_of_modified_packet_at_forwarding_round(dst,number_of_modified_packet_at_forwarding_round(dst,current_forwarding_round(dst)));
                require current_forwarding_round(dst) <= current_receving_round(dst);
                require is_encrypted_quic_packet_received(dst,encrypted_quic_packet_received_at_round(dst,
                                                                                                      coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                                      current_forwarding_round(dst)),
                                                        coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                # require number_of_modified_packet_at_forwarding_round(dst,current_forwarding_round(dst)) = 0;
                # require num_queued_packets(dst,current_forwarding_round(dst)) <= num_packets_received_at_round(dst,current_forwarding_round(dst));
                # require ~is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require pkt.seq_num_payload.end > 0;
                require mim_agent.nat_configured;
                require src ~= dst;
                require mim_agent.ep_server.addr ~= 0;  # must have a client address to send to
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                # is_encrypted_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := true;   
                is_encrypted_quic_packet_received(dst,encrypted_quic_packet_received_at_round(dst,
                                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                                                                                                                            current_forwarding_round(dst)),
                                                                                            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false;
                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
                # number_of_modified_packet_at_forwarding_round(dst,current_forwarding_round(dst)) := number_of_modified_packet_at_forwarding_round(dst,current_forwarding_round(dst)) + 1;
            }
        }

        action reflect_packet_toward(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around reflect_packet_toward(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            # require _generating;
            if _generating {
                require (src = mim_agent.ep_client & dst = mim_agent.ep_target_server) |
                        (src = mim_agent.ep_client & dst = mim_agent.ep_target_client) |
                        (src = mim_agent.ep_server & dst = mim_agent.ep_target_server) |
                        (src = mim_agent.ep_server & dst = mim_agent.ep_target_client);
                                
                        #= require src = mim_agent.ep_client & dst = mim_agent.ep_server |
                #         src = mim_agent.ep_server & dst = mim_agent.ep_client;
                # require current_forwarding_round( mim_agent.ep_server) <= current_receving_round(mim_agent.ep_server);
                require is_encrypted_quic_packet_received(src,encrypted_quic_packet_received_at_round(src,
                                                                                                      coal_packet_forwarded_at_round(src,current_forwarding_round(src)),
                                                                                                      current_forwarding_round(src)),
                                                        coal_packet_forwarded_at_round(src,current_forwarding_round(src)));
                # require num_queued_packets(src,current_forwarding_round(src)) <= num_packets_received_at_round(src,current_forwarding_round(src));
                require pkt.seq_num_payload.end > 0;
                # require num_queued_packets_to_reflect(dst,current_forwarding_round(dst)) = 0;
                
                require mim_agent.nat_configured;
                require src ~= dst;
                require src.addr ~= 0;  # must have a client address to send to
            }
            ...
            if _generating {
                call enqueue_packet_reflect(src,dst,pkt);
                # is_encrypted_quic_packet_received(src,encrypted_quic_packet_received_at_round(dst,
                #                                                                             coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)),
                #                                                                             current_forwarding_round(dst)),
                #                                                                             coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false;
                # coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
            }
        }   
    }
}

import action show_number_of_modified_packet_at_forwarding_round(e:ip.endpoint,r:stream_pos)

function encrypted_quic_packets_received_last_round(C:ip.endpoint) : packet.encrypted_quic_packet.arr 
function encrypted_quic_packet_received_at_round(C:ip.endpoint,P:stream_pos,R:stream_pos) : packet.encrypted_quic_packet
relation is_encrypted_quic_packet_received(C:ip.endpoint, P:packet.encrypted_quic_packet, P:stream_pos)  
relation encrypted_quic_packet_forwarded(C:ip.endpoint, P:packet.encrypted_quic_packet) 

after init {
    encrypted_quic_packets_received_last_round(C) := packet.encrypted_quic_packet.arr.empty;
}

before enqueue_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet) {
    if some(cf:packet.encrypted_quic_packet) pkt *> cf  {
        encrypted_quic_packet_forwarded(dst,cf) := true;
    } 
}

before enqueue_packet_reflect(src:ip.endpoint,dst:ip.endpoint,pkt:packet) {
    if some(cf:packet.encrypted_quic_packet) pkt *> cf  {
        encrypted_quic_packet_forwarded(dst,cf) := true;
    } 
}

after receiving_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet, pkt_num: stream_pos) {
    if some(cf:packet.encrypted_quic_packet) pkt *> cf  {
        encrypted_quic_packet_received_at_round(dst,pkt_num,current_receving_round(dst))  := cf;
        is_encrypted_quic_packet_received(dst,cf,pkt_num)       := true;
        encrypted_quic_packets_received_last_round(dst)         := encrypted_quic_packets_received_last_round(dst).append(cf);
    } 
}

after update_forwarded_packet(src:ip.endpoint,dst:ip.endpoint) {
    # is_encrypted_quic_packet_received(dst) := false;
    encrypted_quic_packets_received_last_round(dst) := packet.encrypted_quic_packet.arr.empty;
}