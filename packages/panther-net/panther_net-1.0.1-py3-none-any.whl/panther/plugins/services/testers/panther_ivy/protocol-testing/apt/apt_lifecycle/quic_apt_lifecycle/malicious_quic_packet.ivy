#lang ivy1.7


# Initial state
# -------------

# The history variables are initialized as follows.  Initially, no
# connections have been seen and no packets have been sent or
# acknowledged.


object packet = {
    ...

    object quic_packet = {

        ...

        action forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            if _generating {
            require pkt.payload.end > 0;
                require mim_agent.nat_configured;
                require is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require src ~= dst;
                if spoof_server_ip {
                    require src = mim_agent.ep_mim & dst = mim_agent.ep_client;
                } else {
                    require src = mim_agent.ep_server & dst = mim_agent.ep_client;
                }
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false;
                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
                call show_num_packets_forwarded_last_round_debug_event(dst,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));   
            }
        }
        
        action forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            if _generating {
                require pkt.payload.end > 0;
                require mim_agent.nat_configured;
                require is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
                require src ~= dst;
                if spoof_client_ip {
                    require src = mim_agent.ep_mim & dst = mim_agent.ep_server;
                } else {
                    require src = mim_agent.ep_client & dst = mim_agent.ep_server;
                }
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false;
                coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
                call show_num_packets_forwarded_last_round_debug_event(dst,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));   
            }
        }

        action replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            require is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            require mim_agent.nat_configured;
            if spoof_server_ip {
                require src = mim_agent.ep_mim & dst = mim_agent.ep_client;
            } else {
                require src = mim_agent.ep_server & dst = mim_agent.ep_client;
            }
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := true;
            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
            call show_num_packets_forwarded_last_round_debug_event(dst,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));   
        }

        action replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            require mim_agent.nat_configured;
            require src = mim_agent.ep_client & dst = mim_agent.ep_server;
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := true;
            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
            call show_num_packets_forwarded_last_round_debug_event(dst,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));   
        }

        action modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require dst = mim_agent.ep_server & src = mim_agent.ep_client | 
                    dst = mim_agent.ep_client & src = mim_agent.ep_server;
            require is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst))) := false;
            coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) := coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)) + 1;
            call show_num_packets_forwarded_last_round_debug_event(dst,coal_packet_forwarded_at_round(dst,current_forwarding_round(dst)));   
        }   
    }
}

function client_current_connection_id : tls_api.id
function server_current_connection_id : tls_api.id
# function last_connection_id    : tls_api.id
function threshold_number_of_open_connection(D:ip.endpoint) : stream_pos
function number_of_open_connection(D:ip.endpoint)           : stream_pos 

function cid_map_tls_id(C:cid)                       : tls_api.id
function cid_map_ep(C:cid)                           : ip.endpoint
function cid_map_sock(C:cid)                         : quic_net.socket
function tls_id_map_cid(T:tls_api.id)                : cid
function other_tls_id_map_cid(T:tls_api.id)          : cid
function tls_id_map_ep(T:tls_api.id)                 : ip.endpoint
function other_tls_id_map_ep(T:tls_api.id)           : ip.endpoint
function ep_map_tls_id(E:ip.endpoint)                : tls_api.id
function ep_map_cid(E:ip.endpoint)                   : cid
relation used_client_ports(P:ip.port)
relation used_client_ports_in_packet_event(P:ip.port)
relation ep_present(E:ip.endpoint)

import action show_number_of_open_connection(d:ip.endpoint,s:stream_pos)

var the_cid_used : cids

after init {
    threshold_number_of_open_connection(D) := 100;
    used_client_ports_in_packet_event(P) := false;
    # the_cid_used(the_cid) := true;
    the_cid_used          := cids.empty;
    the_cid_used          := the_cid_used.append(the_cid);
    
    # tls_id_map_cid(1)     := the_cid;
    
    client_current_connection_id := 1;
    server_current_connection_id := 100;
    # last_connection_id    := 1;
}

action open_connection(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) = {}
around open_connection(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
    # is_not_sleeping := time_api.c_timer.is_sleep_fake_timeout;
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
   
    # if _generating  {
    #     require ~need_sent_ack_eliciting_application_packet & ~need_sent_ack_eliciting_handshake_packet & ~need_sent_ack_eliciting_initial_packet;
    # };
    require pkt.ptype ~= quic_packet_type.zero_rtt & pkt.ptype ~= quic_packet_type.version_negociation & pkt.ptype ~= quic_packet_type.retry;
    
    # Extract the source and destination cid's and packet number from the packet.
    require pkt.ptype = quic_packet_type.initial | pkt.ptype = quic_packet_type.handshake;
    
    # if _generating {
    #     require exists I. I < the_cid_used.end  & the_cid_used.value(I) = pkt.src_cid;
    # }

    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid;

    # require dcid ~= scid;

    call show_num_ack_eliciting_pkt_debug_event(num_ack_eliciting_pkt);
    call show_num_ack_pkt_debug_event(num_ack_pkt);

    
    # call show_num_ack_eliciting_pkt_debug_event(num_ack_eliciting_pkt(scid));
    # call show_num_ack_pkt_debug_event(num_ack_pkt(scid));
    
    if cid_mapped(dcid) {
	    dcid := cid_to_aid(dcid);
    };
    idle_timeout(dcid) := time_api.c_timer.now_micros_last_bp;
    
    call show_current_idle_timeout_debug_event(idle_timeout(dcid));
    call show_current_idle_timeout_debug_event(idle_timeout(scid));

    is_retransmitted(pkt.payload) := is_retransmitted(pkt.payload) + 1;
    call show_is_retransmitted_debug_event(seqnum_to_streampos(pkt.seq_num),is_retransmitted(pkt.payload));
    
    if max_idle_timeout_used > 0 {
        if idle_timeout(dcid) > max_idle_timeout_used  {
            call show_connection_timeout(idle_timeout(dcid), max_idle_timeout_used, pto_timeout*3);
            connection_timeout := true;
        }
    }


    call show_probe_idle_timeout(pto_timeout*3);
    # To avoid excessively small idle timeout periods, endpoints MUST increase the idle timeout
    # period to be at least three times the current Probe Timeout (PTO). This allows for multiple 
    # PTOs to expire, and therefore multiple probes to be sent and lost, prior to idle timeout.
    if ~_generating & connection_timeout & is_retransmitted(pkt.payload) < 2 & idle_timeout(dcid) > pto_timeout*3 {
        respect_idle_timeout := false;
        call show_connection_timeout(idle_timeout(dcid), max_idle_timeout_used, pto_timeout*3);
        call respect_idle_timeout_none;
    }
    
    require pkt.token.end ~= 0 -> (retry_sent(client_initial_rcid) | retry_recv(scid) | pkt.token = tls_api.upper.get_old_new_token);

    if pkt.token.end ~= 0 { # 
        address_validated := true;
        anti_amplification_limit_reached := true;
    };

    # if (src = client_alt | dst = client_alt) & nclients = 1 {
	#     migration_done := true;
	#     #call quic_net.close(endpoint_id.client,sock);	# destroy connection ?
    # };

    # Similarly, an endpoint MUST NOT reuse a connection ID when sending to
    # more than one destination address.  
    
    #if ~_generating  {
    #    if ~migration_done {
    #        cid_ip_mapped(dst) := pkt.dst_cid;
    #    } else {
    #        cid_ip_mapped(dst) := pkt.dst_cid;
    #    };
    #};

    # The destination cid must represent an existing connection,
    # except in the case of a client initial packet, when the
    # destination cid may be the nonce cid chosen by the client for
    # the given source cid. TODO: The standard says that on receiving
    # the the server's cid, the clint must switch to it. However, we
    # can't know when that server's cid has actually been received by
    # the client. As an example, after the server sends its first
    # initial packet, the client might still retransmit its initial
    # packet using the nonce cid. In some cases, we can infer that the
    # client has in fact seen the server's cid (for example, if it
    # packet contains an ACK quic_frame, or a CRYPTO quic_frame that is
    # reponsive to a server FRAME. This is trick to check, however,
    # and the actual servers do not seem to check it.

    require  pkt.ptype = quic_packet_type.initial
        & is_client(scid)
        & dcid = nonce_cid(scid);
    

    # On long headers, both cids are given. If the destination cid is
    # connected, it must be connected to the source cid (otherwise it
    # must be a nonce generated by a client). 
    # On short headers (meaning one_rtt) the scid is not given, so we
    # use the recorded value.

    if pkt.long {
        require connected(dcid) -> connected_to(dcid) = scid;
    } else {
        scid := connected_to(dcid);
    };

    if retry_sent(dcid) & ~_generating & ~zero_length_token & pkt.ptype = quic_packet_type.initial {
        require dcid = client_initial_rcid;
    };

    # The packet type must match the encryption level of the queued
    # frames at the source. 

    require pkt.ptype = queued_level(scid);

   
    # TEMPORARY: prevent big packet number jumps (work around minquic bug)
    # Removed for MVFST that start with big PKT_NUM -> OK now
    # if  _generating {
    #     require pkt.seq_num = last_pkt_num(scid,pkt.ptype) + 0x1; # OK
    # };

    # last_pkt_num(scid,pkt.ptype) := pkt.seq_num;
    # require ~sent_pkt(scid,pkt.ptype,pkt.seq_num);  # [4]
    sent_pkt(scid,pkt.ptype,pkt.seq_num) := true;  # [1]

    # The payload may not be empty
    require num_queued_frames(scid) > 0;


    # The payload must exactly match the queued frames.
    if _generating {
        if packets_to_retransmit_end(pkt.ptype) > 0 {
            var paylo := packets_to_retransmit(pkt.ptype,packets_to_retransmit_end(pkt.ptype));# TODO change and put that at quic_frame level
            require pkt.payload = paylo;
            packets_to_retransmit_end(pkt.ptype) := packets_to_retransmit_end(pkt.ptype) - 1;
            call show_retransmit_lost_packet(paylo);
        } 
        else {
            require pkt.payload = queued_frames(scid);
        };
    } 
    else {
        call show_queued_frames_debug_event(scid,queued_frames(scid));
        call is_generating_debug_event(_generating);
        call show_pkt_num(pkt.seq_num);
        require pkt.payload = queued_frames(scid);
    };
    

    # TEMPORARY: don't allow client migration during handshake

    require conn_seen(scid) & pkt.long & is_client(scid) -> conn_requested(src,dst,scid);

    # Packet must be sent to the endpoint from which the highest numbered
    # packet has been received. ~queued_challenge(dcid) & 
    #call show_probing(dcid ,hi_non_probing(dcid));
    require  conn_seen(dcid) -> hi_non_probing_endpoint(dcid,dst);  # [10]

    # TEMPORARY: do not apply ack-only rule to generated packets
    # This can be removed when we have a quic_frame queue per encryption level

    call show_ack_credit(scid, ack_credit(scid), queued_ack_eliciting(scid), queued_non_ack(scid), pkt.seq_num);
    require ~_generating & ~queued_non_ack(scid) -> ack_credit(scid) > 0;  # [5]

    #Hamid - This is wrong, because if there is no ack credits, it prevents from sending a packet 
    #        containing only a CONNECTION_CLOSE quic_frame but we want to stop packets that contain only ACKs 
    #    require ~_generating & ~queued_ack_eliciting(scid) -> ack_credit(scid) > 0;
    #Hamid

    # QUESTION: THis sentence is from draft-18 section 13.1: "An
    #   endpoint MUST NOT send a packet containing only an ACK quic_frame
    #   in response to a packet containing only ACK or PADDING frames,
    #   even if there are packet gaps which precede the received
    #   packet." Do we interpret this to mean that an ack-only packet
    #   cannot ack *only* ack-only packets?  Or that an ack-only
    #   packet cannot ack *any* ack-only packets?
    
    # If the sender is in the draining state, this is the draining packet.
    # Make sure that a draining packet has not previously been sent and
    # that the packet contains a connection_close quic_frame;

    if conn_draining(scid) {
        require ~draining_pkt_sent(scid) & queued_close(scid);
    };

    # require client_current_connection_id = last_connection_id;
    require number_of_open_connection(dst) < threshold_number_of_open_connection(dst);
    ...
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
   # Here, we have the updates to the packet protocol state.

    # TEMPORARY: The following are repeated because currently locals defined in
    # the "before" section cannot be accessed in the "after" section.

    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid if pkt.long else connected_to(dcid);

    if cid_mapped(dcid) {
	    dcid := cid_to_aid(dcid);
    };


    if pkt.ptype = quic_packet_type.initial {
        # An initial packet with an unseen destination cid is a connection request.
        if ~conn_seen(dcid)  {
            if ~zero_rtt_sent {
                call show_initial_request_initial;
                call tls_client_initial_request(src,dst,dcid,pkt.pversion,src_tls_id(src));
                # cid_map_tls_id(scid)     := client_current_connection_id;
                # ep_map_tls_id(src)       := client_current_connection_id;

                # ep_map_cid(src)      := scid;
                # cid_map_ep(scid)     := src;
                # cid_map_sock(scid)   := sock;
                
                # tls_id_map_cid(client_current_connection_id)      := scid;
                # tls_id_map_ep(client_current_connection_id)       := src;
                # other_tls_id_map_ep(client_current_connection_id) := dst;

            };
            conn_requested(src,dst,scid) := true;
            # call map_cids(scid,dcid);
            # call map_cids(dcid,scid);
            # call app_server_open_event(dst,src,scid,dcid);
        };
        cid_to_token(dcid) := pkt.token;
        # call app_server_open_event(dst,src,dcid,scid);
    };

    call show_number_of_open_connection(dst,number_of_open_connection(dst));

    conn_seen(scid) := true;  # [1]
    if queued_ack_eliciting(scid) {
        if _generating {
            num_ack_eliciting_pkt := num_ack_eliciting_pkt + 1;
        }
        ack_eliciting_threshold_current_val(dcid) := ack_eliciting_threshold_current_val(dcid) + 1;
        ack_credit(dcid) := ack_credit(dcid) + 1;
    } else {
        if ~_generating {
            num_ack_pkt:= num_ack_pkt + 1;
        }
    };
    if ~queued_non_ack(scid) {
       ack_credit(scid) := ack_credit(scid) - 1;
    };

#Hamid

    # If this is a non-probing packet, update the highest non-probing
    # packet number seen on from this aid.
    # QUESTION: what if two different paths send the same packet number?
    # QUESTION: how do you compare packet numbers with different encryption levels?

    if queued_non_probing(scid) {
        if pkt.ptype = quic_packet_type.one_rtt {
            if pkt.seq_num >= hi_non_probing(scid) {
                hi_non_probing(scid) := pkt.seq_num;
                hi_non_probing_endpoint(scid,src) := true;
            }
        } else {
            hi_non_probing_endpoint(scid,src) := true;
        }
    };

    # If the packet contains a close quic_frame, then set `pkt_has_close`

    if queued_close(scid) {
        pkt_has_close(scid,pkt.ptype,pkt.seq_num) := true;
    };

    # If the sender is in the draining state, this is the draining packet.

    if conn_draining(scid) {
        draining_pkt_sent(scid) := true
    };

    if pkt.ptype = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {
        first_initial_send := true;
        initial_scid := scid;
        initial_dcid := dcid;
        queued_level(the_cid) := quic_packet_type.zero_rtt; # todo multiple client
    } else {
        first_initial_send := false;
    };

    # The queued frames are deleted
    queued_frames(scid) := quic_frame.arr.empty;
    queued_non_probing(scid) := false;
    queued_non_ack(scid) := false;
    queued_close(scid) := false;
    num_queued_frames(scid) := 0;
    #Hamid
    queued_ack_eliciting(scid) := false;
    #Hamid

    the_cid    := next_cid(the_cid);
    server_cid := next_cid(server_cid);

    nonce_cid(the_cid)           := server_cid;
    client_current_connection_id := client_current_connection_id.next;
    # server_current_connection_id := server_current_connection_id.next;
    
    client.ep.port  := client.ep.port + 1;
    client.set_tls_id(client_current_connection_id);
    
    sock     := quic_net.open(endpoint_id.client,client.ep);
    sock_alt := sock; # quic_net.open(endpoint_id.client_alt,client_alt);
    sock_vn  := sock; # quic_net.open(endpoint_id.client_vn,client_vn);
    
    # server.set_tls_id(client_current_connection_id.next);

    tls_id_map_ep(client.tls_id)       := client.ep;
    other_tls_id_map_ep(client.tls_id) := server.ep;
    cid_map_tls_id(server_cid)         := client.tls_id;
    cid_map_tls_id(the_cid)            := client.tls_id;
    ep_map_tls_id(client.ep)           := client.tls_id;
    ep_map_cid(client.ep)              := the_cid;
    ep_present(client.ep)              := true;
    used_client_ports(client.ep.port)  := true;
    cid_map_sock(server_cid)           := sock;
    cid_map_sock(the_cid)              := sock;
    cid_map_ep(server_cid)             := server.ep;
    cid_map_ep(the_cid)                := client.ep;

    tls_id_map_cid(client.tls_id)       := the_cid;
    other_tls_id_map_cid(client.tls_id) := server_cid;
    tls_id_map_cid(server.tls_id)       := server_cid;
    other_tls_id_map_cid(server.tls_id) := the_cid;
    
    call show_cid_event(the_cid);
    call show_cid_event(server_cid);
    
    tls_id_map_ep(server.tls_id)       := server.ep;
    other_tls_id_map_ep(server.tls_id) := client.ep;
    ep_map_tls_id(server.ep)           := server.tls_id;

    # slow_loris := false;

    var extns := tls_extensions.empty;
    extns     := extns.append(make_transport_parameters);
    call tls_api.upper.create(client_current_connection_id,false,extns); 
}

import action show_dev(src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid,tls_id:tls_api.id)

action open_zrtt_connection(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) = {}
around open_zrtt_connection(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
    require pkt.ptype = quic_packet_type.zero_rtt;
    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid;
    ...
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid;
    # The queued frames are deleted
    queued_frames(scid) := quic_frame.arr.empty;
    queued_non_probing(scid) := false;
    queued_non_ack(scid) := false;
    queued_close(scid) := false;
    num_queued_frames(scid) := 0;
    #Hamid
    queued_ack_eliciting(scid) := false;
    #Hamid
}

action malicious_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) = {}
around malicious_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    # is_not_sleeping := time_api.c_timer.is_sleep_fake_timeout;
    call show_current_time_debug_event(time_api.c_timer.now_millis_last_bp);
   
    # if _generating  {
    #     require ~need_sent_ack_eliciting_application_packet & ~need_sent_ack_eliciting_handshake_packet & ~need_sent_ack_eliciting_initial_packet;
    # };
    require pkt.ptype ~= quic_packet_type.zero_rtt & pkt.ptype ~= quic_packet_type.version_negociation & pkt.ptype ~= quic_packet_type.retry;
    
    # Extract the source and destination cid's and packet number from the packet.

    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid;

    call show_num_ack_eliciting_pkt_debug_event(num_ack_eliciting_pkt);
    call show_num_ack_pkt_debug_event(num_ack_pkt);

    # call show_num_ack_eliciting_pkt_debug_event(num_ack_eliciting_pkt(scid));
    # call show_num_ack_pkt_debug_event(num_ack_pkt(scid));
    
    if cid_mapped(dcid) {
	    dcid := cid_to_aid(dcid);
    };
    idle_timeout(dcid) := time_api.c_timer.now_micros_last_bp;
    
    call show_current_idle_timeout_debug_event(idle_timeout(dcid));
    call show_current_idle_timeout_debug_event(idle_timeout(scid));

    is_retransmitted(pkt.payload) := is_retransmitted(pkt.payload) + 1;
    call show_is_retransmitted_debug_event(seqnum_to_streampos(pkt.seq_num),is_retransmitted(pkt.payload));
    
    if max_idle_timeout_used > 0 {
        if idle_timeout(dcid) > max_idle_timeout_used  {
            call show_connection_timeout(idle_timeout(dcid), max_idle_timeout_used, pto_timeout*3);
            connection_timeout := true;
        }
    }


    call show_probe_idle_timeout(pto_timeout*3);
    # To avoid excessively small idle timeout periods, endpoints MUST increase the idle timeout
    # period to be at least three times the current Probe Timeout (PTO). This allows for multiple 
    # PTOs to expire, and therefore multiple probes to be sent and lost, prior to idle timeout.
    if ~_generating & connection_timeout & is_retransmitted(pkt.payload) < 2 & idle_timeout(dcid) > pto_timeout*3 {
        respect_idle_timeout := false;
        call show_connection_timeout(idle_timeout(dcid), max_idle_timeout_used, pto_timeout*3);
        call respect_idle_timeout_none;
    }
    
    require pkt.token.end ~= 0 -> (retry_sent(client_initial_rcid) | retry_recv(scid) | pkt.token = tls_api.upper.get_old_new_token);

    if pkt.token.end ~= 0 { # 
        address_validated := true;
        anti_amplification_limit_reached := true;
    };

    if (src = client_alt | dst = client_alt) & nclients = 1 {
	    migration_done := true;
	    #call quic_net.close(endpoint_id.client,sock);	# destroy connection ?
    };

    # Similarly, an endpoint MUST NOT reuse a connection ID when sending to
    # more than one destination address.  
    
    #if ~_generating  {
    #    if ~migration_done {
    #        cid_ip_mapped(dst) := pkt.dst_cid;
    #    } else {
    #        cid_ip_mapped(dst) := pkt.dst_cid;
    #    };
    #};

    # The destination cid must represent an existing connection,
    # except in the case of a client initial packet, when the
    # destination cid may be the nonce cid chosen by the client for
    # the given source cid. TODO: The standard says that on receiving
    # the the server's cid, the clint must switch to it. However, we
    # can't know when that server's cid has actually been received by
    # the client. As an example, after the server sends its first
    # initial packet, the client might still retransmit its initial
    # packet using the nonce cid. In some cases, we can infer that the
    # client has in fact seen the server's cid (for example, if it
    # packet contains an ACK quic_frame, or a CRYPTO quic_frame that is
    # reponsive to a server FRAME. This is trick to check, however,
    # and the actual servers do not seem to check it.

    require connected(dcid) |
        pkt.ptype = quic_packet_type.initial
        & is_client(scid)
        & dcid = nonce_cid(scid);
    

    # On long headers, both cids are given. If the destination cid is
    # connected, it must be connected to the source cid (otherwise it
    # must be a nonce generated by a client). 
    # On short headers (meaning one_rtt) the scid is not given, so we
    # use the recorded value.

    if pkt.long {
        require connected(dcid) -> connected_to(dcid) = scid;
    } else {
        scid := connected_to(dcid);
    };

    if retry_sent(dcid) & ~_generating & ~zero_length_token & pkt.ptype = quic_packet_type.initial {
        require dcid = client_initial_rcid;
    };

    # The packet type must match the encryption level of the queued
    # frames at the source. 

    require pkt.ptype = queued_level(scid);

   
    # TEMPORARY: prevent big packet number jumps (work around minquic bug)
    # Removed for MVFST that start with big PKT_NUM -> OK now
    if  _generating {
        require pkt.seq_num = last_pkt_num(scid,pkt.ptype) + 0x1; # OK
    };

    last_pkt_num(scid,pkt.ptype) := pkt.seq_num;
    require ~sent_pkt(scid,pkt.ptype,pkt.seq_num);  # [4]
    sent_pkt(scid,pkt.ptype,pkt.seq_num) := true;  # [1]

    # The payload may not be empty
    require malicous_frame_present(scid) -> num_queued_frames(scid) = 1; # [7]
    require num_queued_frames(scid) > 0;


    # The payload must exactly match the queued frames.
    if _generating {
        if packets_to_retransmit_end(pkt.ptype) > 0 {
            var paylo := packets_to_retransmit(pkt.ptype,packets_to_retransmit_end(pkt.ptype));# TODO change and put that at quic_frame level
            require pkt.payload = paylo;
            packets_to_retransmit_end(pkt.ptype) := packets_to_retransmit_end(pkt.ptype) - 1;
            call show_retransmit_lost_packet(paylo);
        } 
        else {
            require pkt.payload = queued_frames(scid);
        };
    } 
    else {
        call show_queued_frames_debug_event(scid,queued_frames(scid));
        call is_generating_debug_event(_generating);
        call show_pkt_num(pkt.seq_num);
        require pkt.payload = queued_frames(scid);
    };
    

    # TEMPORARY: don't allow client migration during handshake

    require conn_seen(scid) & pkt.long & is_client(scid) -> conn_requested(src,dst,scid);

    # Packet must be sent to the endpoint from which the highest numbered
    # packet has been received. ~queued_challenge(dcid) & 
    #call show_probing(dcid ,hi_non_probing(dcid));
    require  conn_seen(dcid) -> hi_non_probing_endpoint(dcid,dst);  # [10]

    # TEMPORARY: do not apply ack-only rule to generated packets
    # This can be removed when we have a quic_frame queue per encryption level

    call show_ack_credit(scid, ack_credit(scid), queued_ack_eliciting(scid), queued_non_ack(scid), pkt.seq_num);
    require ~_generating & ~queued_non_ack(scid) -> ack_credit(scid) > 0;  # [5]

    #Hamid - This is wrong, because if there is no ack credits, it prevents from sending a packet 
    #        containing only a CONNECTION_CLOSE quic_frame but we want to stop packets that contain only ACKs 
    #    require ~_generating & ~queued_ack_eliciting(scid) -> ack_credit(scid) > 0;
    #Hamid

    # QUESTION: THis sentence is from draft-18 section 13.1: "An
    #   endpoint MUST NOT send a packet containing only an ACK quic_frame
    #   in response to a packet containing only ACK or PADDING frames,
    #   even if there are packet gaps which precede the received
    #   packet." Do we interpret this to mean that an ack-only packet
    #   cannot ack *only* ack-only packets?  Or that an ack-only
    #   packet cannot ack *any* ack-only packets?
    
    # If the sender is in the draining state, this is the draining packet.
    # Make sure that a draining packet has not previously been sent and
    # that the packet contains a connection_close quic_frame;

    if conn_draining(scid) {
        require ~draining_pkt_sent(scid) & queued_close(scid);
    };

    ...

    # Here, we have the updates to the packet protocol state.

    # TEMPORARY: The following are repeated because currently locals defined in
    # the "before" section cannot be accessed in the "after" section.

    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid if pkt.long else connected_to(dcid);

    if cid_mapped(dcid) {
	    dcid := cid_to_aid(dcid);
    };
    

    # TODO: the following should not be here

    if pkt.ptype = quic_packet_type.initial {
        initial_token := pkt.token;
        # An initial packet with an unseen destination cid is a connection request.
        if ~conn_seen(dcid)  {
            if ~zero_rtt_sent {
                call show_initial_request_initial;

                # cid_map_tls_id(scid)     := client_current_connection_id;
                # ep_map_tls_id(src)       := client_current_connection_id;

                # ep_map_cid(src)      := scid;
                # cid_map_ep(scid)     := src;
                # cid_map_sock(scid)   := sock;
                
                # tls_id_map_cid(client_current_connection_id)      := scid;
                # tls_id_map_ep(client_current_connection_id)       := src;
                # other_tls_id_map_ep(client_current_connection_id) := dst;

                call tls_client_initial_request(src,dst,dcid,pkt.pversion,src_tls_id(src));
            };
            conn_requested(src,dst,scid) := true;
        };
        cid_to_token(dcid) := pkt.token;
    };

    conn_seen(scid) := true;  # [1]

    # Update the ack credits. A non-ack packet sent to a destination
    # increases the destination's ack credit. An ack packet decreases
    # the sender's ack credit.

#Hamid

#    if queued_non_ack(scid) {
#	ack_credit(dcid) := ack_credit(dcid) + 1;
#    } else {
#	ack_credit(scid) := ack_credit(scid) - 1;
#    };

    if queued_ack_eliciting(scid) {
        if _generating {
            num_ack_eliciting_pkt := num_ack_eliciting_pkt + 1;
        }
        ack_eliciting_threshold_current_val(dcid) := ack_eliciting_threshold_current_val(dcid) + 1;
        ack_credit(dcid) := ack_credit(dcid) + 1;
    } else {
        if ~_generating {
            num_ack_pkt:= num_ack_pkt + 1;
        }
    };
    if ~queued_non_ack(scid) {
       ack_credit(scid) := ack_credit(scid) - 1;
    };

#Hamid

    # If this is a non-probing packet, update the highest non-probing
    # packet number seen on from this aid.
    # QUESTION: what if two different paths send the same packet number?
    # QUESTION: how do you compare packet numbers with different encryption levels?

    if queued_non_probing(scid) {
        if pkt.ptype = quic_packet_type.one_rtt {
            if pkt.seq_num >= hi_non_probing(scid) {
                hi_non_probing(scid) := pkt.seq_num;
                hi_non_probing_endpoint(scid,src) := true;
            }
        } else {
            hi_non_probing_endpoint(scid,src) := true;
        }
    };

    # If the packet contains a close quic_frame, then set `pkt_has_close`

    if queued_close(scid) {
        pkt_has_close(scid,pkt.ptype,pkt.seq_num) := true;
    };

    # If the sender is in the draining state, this is the draining packet.

    if conn_draining(scid) {
        draining_pkt_sent(scid) := true
    };

    if pkt.ptype = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {
        first_initial_send := true;
        initial_scid := scid;
        initial_dcid := dcid;
        queued_level(the_cid) := quic_packet_type.zero_rtt; # todo multiple client
    } else {
        first_initial_send := false;
    };

    # The queued frames are deleted
    malicous_frame_present(scid) := false;
    queued_frames(scid) := quic_frame.arr.empty;
    queued_non_probing(scid) := false;
    queued_non_ack(scid) := false;
    queued_close(scid) := false;
    num_queued_frames(scid) := 0;
    #Hamid
    queued_ack_eliciting(scid) := false;
    #Hamid
}


function quic_packets_received_last_round(C:ip.endpoint) : packet.quic_packet.arr 
function quic_packet_received_at_round(C:ip.endpoint,P:stream_pos, R:stream_pos) : packet.quic_packet
relation is_quic_packet_received(C:ip.endpoint, P:packet.quic_packet, P:stream_pos) 
relation quic_packet_forwarded(C:ip.endpoint, P:packet.quic_packet)

after init {
    quic_packets_received_last_round(C) := packet.quic_packet.arr.empty;
}

before enqueue_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet) {
    if some(cf:packet.quic_packet) pkt *> cf  {
        quic_packet_forwarded(dst,cf) := true;
    } 
}

after receiving_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet, pkt_num: stream_pos) {
    if some(cf:packet.quic_packet) pkt *> cf  {
        quic_packet_received_at_round(dst,pkt_num,current_receving_round(dst))  := cf;
        is_quic_packet_received(dst,cf,pkt_num)       := true;
        quic_packets_received_last_round(dst)         := quic_packets_received_last_round(dst).append(cf);
    } 
}

after update_forwarded_packet(src:ip.endpoint,dst:ip.endpoint) {
    # is_quic_packet_received(dst) := false;
    quic_packets_received_last_round(dst) := packet.quic_packet.arr.empty;
}