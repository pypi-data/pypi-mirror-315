import Kratos
from typing import overload

class ComplexDenseColPivHouseholderQRSolver(ComplexDirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class ComplexDenseHouseholderQRSolver(ComplexDirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class ComplexDenseLinearSolver:
    def __init__(self) -> None: ...
    def Clear(self) -> None: ...
    def Initialize(self, arg0: Kratos.ComplexMatrix, arg1: Kratos.ComplexVector, arg2: Kratos.ComplexVector) -> None: ...
    def Solve(self, arg0: Kratos.ComplexMatrix, arg1: Kratos.ComplexVector, arg2: Kratos.ComplexVector) -> bool: ...

class ComplexDenseLinearSolverFactory:
    def __init__(self) -> None: ...
    def Create(self, arg0: Kratos.Parameters) -> ComplexDenseLinearSolver: ...
    def Has(self, arg0: str) -> bool: ...

class ComplexDensePartialPivLUSolver(ComplexDirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class ComplexDirectSolver(ComplexDenseLinearSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class ComplexSparseLUSolver(Kratos.ComplexDirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class DenseColPivHouseholderQRSolver(DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class DenseEigenvalueSolver(DenseLinearSolver):
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    def Solve(self, arg0: Kratos.Matrix, arg1: Kratos.Matrix, arg2: Kratos.Vector, arg3: Kratos.Matrix) -> None: ...

class DenseHouseholderQRSolver(DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class DenseLLTSolver(DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class DenseLinearSolver:
    def __init__(self) -> None: ...
    def Clear(self) -> None: ...
    def Initialize(self, arg0: Kratos.Matrix, arg1: Kratos.Vector, arg2: Kratos.Vector) -> None: ...
    @overload
    def Solve(self, arg0: Kratos.Matrix, arg1: Kratos.Vector, arg2: Kratos.Vector) -> bool: ...
    @overload
    def Solve(self, arg0: Kratos.Matrix, arg1: Kratos.Matrix, arg2: Kratos.Matrix) -> bool: ...

class DenseLinearSolverFactory:
    def __init__(self) -> None: ...
    def Create(self, arg0: Kratos.Parameters) -> DenseLinearSolver: ...
    def Has(self, arg0: str) -> bool: ...

class DensePartialPivLUSolver(DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class DirectSolver(DenseLinearSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class EigenDenseBDCSVD(Kratos.DenseSingularValueDecomposition):
    def __init__(self) -> None: ...
    @overload
    def Compute(self, arg0: Kratos.Matrix, arg1: Kratos.Parameters) -> None: ...
    @overload
    def Compute(self, arg0: Kratos.Matrix, arg1: Kratos.Vector, arg2: Kratos.Matrix, arg3: Kratos.Matrix, arg4: Kratos.Parameters) -> None: ...
    def MatrixU(self, arg0: Kratos.Matrix) -> None: ...
    def MatrixV(self, arg0: Kratos.Matrix) -> None: ...
    def NonZeroSingularValues(self) -> int: ...
    def Rank(self) -> int: ...
    def SetThreshold(self, arg0: float) -> None: ...
    def SingularValues(self, arg0: Kratos.Vector) -> None: ...

class EigenDenseColumnPivotingHouseholderQRDecomposition(Kratos.DenseQRDecompositionType):
    def __init__(self) -> None: ...
    @overload
    def Compute(self, arg0: Kratos.Matrix) -> None: ...
    @overload
    def Compute(self, arg0: Kratos.Matrix, arg1: Kratos.Matrix, arg2: Kratos.Matrix) -> None: ...
    def MatrixP(self, arg0: Kratos.Matrix) -> None: ...
    def MatrixQ(self, arg0: Kratos.Matrix) -> None: ...
    def MatrixR(self, arg0: Kratos.Matrix) -> None: ...
    def Rank(self) -> int: ...
    @overload
    def Solve(self, arg0: Kratos.Matrix, arg1: Kratos.Matrix) -> None: ...
    @overload
    def Solve(self, arg0: Kratos.Vector, arg1: Kratos.Vector) -> None: ...

class EigenDenseHouseholderQRDecomposition(Kratos.DenseQRDecompositionType):
    def __init__(self) -> None: ...
    def Compute(self, arg0: Kratos.Matrix) -> None: ...
    def MatrixQ(self, arg0: Kratos.Matrix) -> None: ...
    def MatrixR(self, arg0: Kratos.Matrix) -> None: ...
    @overload
    def Solve(self, arg0: Kratos.Matrix, arg1: Kratos.Matrix) -> None: ...
    @overload
    def Solve(self, arg0: Kratos.Vector, arg1: Kratos.Vector) -> None: ...

class EigenDenseJacobiSVD(Kratos.DenseSingularValueDecomposition):
    def __init__(self) -> None: ...
    @overload
    def Compute(self, arg0: Kratos.Matrix, arg1: Kratos.Parameters) -> None: ...
    @overload
    def Compute(self, arg0: Kratos.Matrix, arg1: Kratos.Vector, arg2: Kratos.Matrix, arg3: Kratos.Matrix, arg4: Kratos.Parameters) -> None: ...
    def MatrixU(self, arg0: Kratos.Matrix) -> None: ...
    def MatrixV(self, arg0: Kratos.Matrix) -> None: ...
    def NonZeroSingularValues(self) -> int: ...
    def Rank(self) -> int: ...
    def SetThreshold(self, arg0: float) -> None: ...
    def SingularValues(self, arg0: Kratos.Vector) -> None: ...

class EigensystemSolver(Kratos.LinearSolver):
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class FEASTConditionNumberUtility:
    def __init__(self, *args, **kwargs) -> None: ...
    def GetConditionNumber(self) -> float: ...

class KratosLinearSolversApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class SparseCGSolver(Kratos.DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class SparseLUSolver(Kratos.DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class SparseQRSolver(Kratos.DirectSolver):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

class SpectraSymGEigsShiftSolver(Kratos.LinearSolver):
    def __init__(self, arg0: Kratos.Parameters) -> None: ...

def HasFEAST() -> bool: ...
def HasMKL() -> bool: ...
