# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from .api_key_scope import ApiKeyScope
from .customer_billing_meter import CustomerBillingMeter
from .verify_api_key_response_rate_limit import VerifyApiKeyResponseRateLimit
from .verify_api_key_response_status import VerifyApiKeyResponseStatus


class VerifyApiKeyResponse(pydantic.BaseModel):
    api_key_id: str = pydantic.Field(alias="apiKeyId")
    expires_at: typing.Optional[int] = pydantic.Field(alias="expiresAt", default=None)
    requested_scopes: typing.List[ApiKeyScope] = pydantic.Field(alias="requestedScopes")
    status: VerifyApiKeyResponseStatus
    rate_limit: typing.Optional[VerifyApiKeyResponseRateLimit] = pydantic.Field(alias="rateLimit", default=None)
    metadata: typing.Optional[typing.Dict[str, str]] = None
    billing: typing.Optional[CustomerBillingMeter] = None
    external_meter_id: typing.Optional[str] = pydantic.Field(alias="externalMeterId", default=None)
    customer_id: typing.Optional[str] = pydantic.Field(alias="customerId", default=None)
    scopes: typing.List[ApiKeyScope]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
