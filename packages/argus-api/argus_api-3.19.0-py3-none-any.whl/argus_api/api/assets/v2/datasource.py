"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
log = logging.getLogger(__name__)


@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def create_asset_data_source(
    shortName: str = None,
    name: str = None,
    description: str = None,
    customer: str = None,
    writePermission: str = None,
    sameSourceMergeResolutionStrategy: str = None,
    otherSourceMergeResolutionStrategy: str = None,
    priority: float = 5.0,
    ttl: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Create a new Asset Data Source (INTERNAL)
    
    :param str shortName: The machine readable shortName for the Data Source. Must be unique per customer. \=\> \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str name: The human readable display name. If not provided will be populated by the short name. \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str description: The Data Source\'s description. \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str customer: The id or shortName of the Customer.
    :param str writePermission: Id or name of the permission required to write data to this source.
    :param str sameSourceMergeResolutionStrategy: The chosen merge resolution strategy when handling merge conflicts with the same datasource.
    :param str otherSourceMergeResolutionStrategy: The chosen merge resolution strategy when handling merge conflicts with the another datasource.
    :param float priority: Priority of the given datasource \(default 5\)
    :param int ttl: Time to live\, 0 mean never expires \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource".format()
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send writePermission if the argument was provided, don't send null values
    if writePermission is not None:
        body.update({"writePermission": writePermission})
    # Only send priority if the argument was provided, don't send null values
    if priority is not None:
        body.update({"priority": priority})
    # Only send ttl if the argument was provided, don't send null values
    if ttl is not None:
        body.update({"ttl": ttl})
    # Only send sameSourceMergeResolutionStrategy if the argument was provided, don't send null values
    if sameSourceMergeResolutionStrategy is not None:
        body.update({"sameSourceMergeResolutionStrategy": sameSourceMergeResolutionStrategy})
    # Only send otherSourceMergeResolutionStrategy if the argument was provided, don't send null values
    if otherSourceMergeResolutionStrategy is not None:
        body.update({"otherSourceMergeResolutionStrategy": otherSourceMergeResolutionStrategy})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def delete_asset_data_source(
    idOrShortName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Delete Data Source (INTERNAL)
    
    :param str idOrShortName: Data Source ID or short name
    :param str customer: Customer ID or short name \(default is user\'s customer\)\, only used when the data source\'s short name was provided to retrieve the data source
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource/{idOrShortName}".format(idOrShortName=idOrShortName,
        customer=customer)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def get_asset_data_source(
    idOrShortName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Get Data Source (INTERNAL)
    
    :param str idOrShortName: Data Source ID or short name
    :param str customer: Customer ID or short name \(default is user\'s customer\)\, only used when the data source\'s short name was provided to retrieve the asset
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource/{idOrShortName}".format(idOrShortName=idOrShortName,
        customer=customer)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def list_asset_data_sources(
    customer: str = None,
    keywords: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = None,
    includeDeleted: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Search Asset Data Sources with specified query params (INTERNAL)
    
    :param list customer: Customer ids or short names
    :param list keywords: Filter search by Asset Data Source keyword fields \(short name\, name\, and description\)
    :param list sortBy: Field\(s\) to sort by \(shortName\, name\, createdTimestamp\, lastUpdatedTimestamp\, deletedTimestamp\)
    :param int limit: Limit results
    :param int offset: Offset results
    :param bool includeDeleted: Include deleted
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource".format(limit=limit,
        customer=customer,
        keywords=keywords,
        offset=offset,
        includeDeleted=includeDeleted,
        sortBy=sortBy)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def restore_asset_data_source(
    idOrShortName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Restore Data Source (INTERNAL)
    
    :param str idOrShortName: Data Source ID or short name
    :param str customer: Customer ID or short name \(default is user\'s customer\)\, only used when the data source\'s short name was provided to retrieve the asset
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource/{idOrShortName}/restore".format(idOrShortName=idOrShortName,
        customer=customer)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def search_asset_data_sources(
    keywords: str = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = None,
    startTimestamp: str = None,
    endTimestamp: str = None,
    timeFieldStrategy: str = None,
    timeMatchStrategy: str = None,
    userFieldStrategy: str = None,
    user: str = None,
    customer: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    subCriteria: dict = None,
    sortBy: str = None,
    includeDeleted: bool = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Search Asset Data Sources with specified criteria (INTERNAL)
    
    :param list keywords: Search for keywords against fields defined by a KeywordFieldStrategy
    :param list keywordFieldStrategy: Defines which fields will be searched by keywords \(default all supported fields\) \(default all\)
    :param str keywordMatchStrategy: Defines how strict different keywords should be matched \(default match any keywords\) \(default any\)
    :param str startTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(start timestamp\). \(default 0\)
    :param str endTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(end timestamp\). \(default 0\)
    :param list timeFieldStrategy: Defines which timestamps fields will be filtered with start\/endTimestamp \(default all\)
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp \(default any\) \(default any\)
    :param list userFieldStrategy: Defines which user fields to filter with the submitted user value\(s\) \(default all\)
    :param list user: Search for Asset Data Sources by associated user IDs or short names defined by the UserFieldStrategy
    :param list customer: Search for Asset Data Sources with these Customer IDs or short names
    :param list includeFlags: Explicitly search for Assets that contain these flags
    :param list excludeFlags: Explicitly filter out Assets that contain these flags
    :param list subCriteria: Set additional criteria that are applied with logical OR by default
    :param list sortBy: Field\(s\) by which to sort the results
    :param bool includeDeleted: Whether to include deleted results \(default false\)
    :param int limit: Limit maximum amount of results \(default 25\)
    :param int offset: Skip specified amount of results \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource/search".format()
    headers = {}

    body = body or {}
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send userFieldStrategy if the argument was provided, don't send null values
    if userFieldStrategy is not None:
        body.update({"userFieldStrategy": userFieldStrategy})
    # Only send user if the argument was provided, don't send null values
    if user is not None:
        body.update({"user": user})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "datasource"),
    module=argus_cli_module
)
def update_asset_data_source(
    idOrShortName: str,
    customer: str = None,
    shortName: str = None,
    name: str = None,
    description: str = None,
    writePermission: str = None,
    priority: float = None,
    ttl: int = None,
    sameSourceMergeResolutionStrategy: str = None,
    otherSourceMergeResolutionStrategy: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Update an existing Asset Data Source (INTERNAL)
    
    :param str idOrShortName: Data Source ID or short name
    :param str customer: Customer ID or short name \(default is user\'s customer\)\, only used when the data source\'s short name was provided to retrieve the data source
    :param str shortName: The Data Source\'s new shortname \=\> \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str name: The Data Source\'s new name \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str description: The Data Source\'s new description \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str writePermission: Id or name of the permission required to write data to this source.
    :param float priority: Priority of the given datasource
    :param int ttl: Time to live\, 0 mean never expires
    :param str sameSourceMergeResolutionStrategy: The chosen merge resolution strategy when handling merge conflicts with the same datasource.
    :param str otherSourceMergeResolutionStrategy: The chosen merge resolution strategy when handling merge conflicts with other datasources.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/datasource/{idOrShortName}".format(idOrShortName=idOrShortName,
        customer=customer)
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send writePermission if the argument was provided, don't send null values
    if writePermission is not None:
        body.update({"writePermission": writePermission})
    # Only send priority if the argument was provided, don't send null values
    if priority is not None:
        body.update({"priority": priority})
    # Only send ttl if the argument was provided, don't send null values
    if ttl is not None:
        body.update({"ttl": ttl})
    # Only send sameSourceMergeResolutionStrategy if the argument was provided, don't send null values
    if sameSourceMergeResolutionStrategy is not None:
        body.update({"sameSourceMergeResolutionStrategy": sameSourceMergeResolutionStrategy})
    # Only send otherSourceMergeResolutionStrategy if the argument was provided, don't send null values
    if otherSourceMergeResolutionStrategy is not None:
        body.update({"otherSourceMergeResolutionStrategy": otherSourceMergeResolutionStrategy})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
