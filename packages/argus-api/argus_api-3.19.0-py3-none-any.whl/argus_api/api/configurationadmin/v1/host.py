"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
log = logging.getLogger(__name__)


@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def add_host_comment(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Add a comment to configuration host (INTERNAL)
    
    :param int id: ID of host to comment
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{id}/comment".format(id=id)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def configure_host_monitoring(
    host: str,
    enabled: bool = None,
    daytimeOnly: bool = None,
    comment: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Configure monitoring of configuration host. This operation does not add a new revision. (INTERNAL)
    
    :param str host: ID or hostname of host to configure monitoring for
    :param bool enabled: If set\, enable or disable monitoring on this host.
    :param bool daytimeOnly: If set\, enable or disable the DAYTIME monitoring flag for this host. If monitoring is disabled\, this flag has no effect.
    :param str comment: Add a comment to the host object. \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{host}/monitoring".format(host=host)
    headers = {}

    body = body or {}
    # Only send enabled if the argument was provided, don't send null values
    if enabled is not None:
        body.update({"enabled": enabled})
    # Only send daytimeOnly if the argument was provided, don't send null values
    if daytimeOnly is not None:
        body.update({"daytimeOnly": daytimeOnly})
    # Only send comment if the argument was provided, don't send null values
    if comment is not None:
        body.update({"comment": comment})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def create_host(
    name: str = None,
    information: str = None,
    properties: dict = None,
    agentUser: str = None,
    labels: str = None,
    customer: str = None,
    preprod: bool = None,
    daytimeMonitored: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Create new configuration host (INTERNAL)
    
    :param str name: \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str information: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param dict properties: 
    :param str agentUser: Name or ID of the agent user to associate to this host.
    :param list labels: Labels to add to this host
    :param str customer: ID or shortname of customer to bind this host to. If not set\, this host will not be bound to a customer.
    :param bool preprod: If true\, mark this host as a PREPROD host. \(default false\)
    :param bool daytimeMonitored: If true\, mark this host as a DAYTIME\_MONITORED host. \(default false\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host".format()
    headers = {}

    body = body or {}
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send information if the argument was provided, don't send null values
    if information is not None:
        body.update({"information": information})
    # Only send properties if the argument was provided, don't send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send agentUser if the argument was provided, don't send null values
    if agentUser is not None:
        body.update({"agentUser": agentUser})
    # Only send preprod if the argument was provided, don't send null values
    if preprod is not None:
        body.update({"preprod": preprod})
    # Only send daytimeMonitored if the argument was provided, don't send null values
    if daytimeMonitored is not None:
        body.update({"daytimeMonitored": daytimeMonitored})
    # Only send labels if the argument was provided, don't send null values
    if labels is not None:
        body.update({"labels": labels})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def delete_host(
    id: int,
    deleteInstances: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Delete configuration host (INTERNAL)
    
    :param int id: ID of host to delete
    :param bool deleteInstances: If true\, force deletion of instances for this host first
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{id}".format(id=id,
        deleteInstances=deleteInstances)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send deleteInstances if the argument was provided, don't send null values
    if deleteInstances is not None:
        query_parameters.update({"deleteInstances": deleteInstances})
    
    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def disable_host_monitoring(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Disable monitoring of configuration host. This endpoint is deprecated, use PUT /host/{id}/monitoring instead. (INTERNAL)
    
    :param int id: ID of host to disable monitoring on
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{id}/monitoring/disable".format(id=id)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def disable_host_monitoring_request(
    idOrHostName: str,
    comment: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Disable monitoring of configuration host. (INTERNAL)
    
    :param str idOrHostName: ID or hostName of host to disable monitoring on
    :param str comment: Add a comment to the host object. \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{idOrHostName}/monitoring/disable".format(idOrHostName=idOrHostName)
    headers = {}

    body = body or {}
    # Only send comment if the argument was provided, don't send null values
    if comment is not None:
        body.update({"comment": comment})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def duplicate_host(
    sourceID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Duplicate a configuration host (INTERNAL)
    
    :param int sourceID: ID of host to duplicate
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{sourceID}/duplicate".format(sourceID=sourceID)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def duplicate_host_request(
    idOrHostName: str,
    newHostName: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Duplicate a configuration host (INTERNAL)
    
    :param str idOrHostName: ID or host name of host to duplicate
    :param str newHostName: New name of duplicate host \=\> \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{idOrHostName}/duplicate".format(idOrHostName=idOrHostName)
    headers = {}

    body = body or {}
    # Only send newHostName if the argument was provided, don't send null values
    if newHostName is not None:
        body.update({"newHostName": newHostName})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def enable_host_monitoring(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Enable monitoring of configuration host. This endpoint is deprecated, use PUT /host/{id}/monitoring instead. (INTERNAL)
    
    :param int id: ID of host to enable monitoring on
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{id}/monitoring/enable".format(id=id)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def list_hosts(
    search: str = None,
    orderDesc: bool = None,
    limit: int = 25,
    orderBy: str = "name",
    includeComments: bool = None,
    includeDeleted: bool = None,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List configuration hosts (INTERNAL)
    
    :param str search: Limit results to hosts matching this searchstring
    :param bool orderDesc: Sort results descending
    :param int limit: Limit results
    :param str orderBy: Sort results
    :param bool includeComments: Include comments in output
    :param bool includeDeleted: Include deleted hosts in results
    :param int offset: Offset results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host".format(limit=limit,
        orderBy=orderBy,
        search=search,
        includeComments=includeComments,
        includeDeleted=includeDeleted,
        offset=offset,
        orderDesc=orderDesc)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send orderBy if the argument was provided, don't send null values
    if orderBy is not None:
        query_parameters.update({"orderBy": orderBy})
    
    # Only send search if the argument was provided, don't send null values
    if search is not None:
        query_parameters.update({"search": search})
    
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send orderDesc if the argument was provided, don't send null values
    if orderDesc is not None:
        query_parameters.update({"orderDesc": orderDesc})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def move_configration_host(
    host: str,
    domain: str = None,
    customer: str = None,
    agentUser: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Move a configuration host to another customer. Requires move permission for both source and target customer.
Domain to lookup host is an optional query parameter.
If the agent does not have permission for the target customer, the move will be aborted and a 412 error code returned.
 (INTERNAL)
    
    :param str host: ID or hostname of host to move
    :param str domain: Domain to lookup host
    :param str customer: Shortname or id of customer to move to. \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str agentUser: Shortname or id of agent to use. If empty the current agent of the host will be used
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{host}/move".format(host=host,
        domain=domain)
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send agentUser if the argument was provided, don't send null values
    if agentUser is not None:
        body.update({"agentUser": agentUser})

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def schedule_host_monitoring(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Schedule downtime for configuration host (INTERNAL)
    
    :param int id: ID of host to schedule downtime for
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{id}/monitoring/schedule".format(id=id)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def schedule_host_monitoring_request(
    idOrHostName: str,
    _from: int = None,
    to: int = None,
    comment: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Schedule downtime for configuration host (INTERNAL)
    
    :param str idOrHostName: ID of host to schedule downtime for
    :param int from: Timestamp to schedule downtime from
    :param int to: Timestamp to schedule downtime to
    :param str comment: Reason for scheduling downtime \=\> \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{idOrHostName}/monitoring/schedule".format(idOrHostName=idOrHostName)
    headers = {}

    body = body or {}
    # Only send from if the argument was provided, don't send null values
    if _from is not None:
        body.update({"from": _from})
    # Only send to if the argument was provided, don't send null values
    if to is not None:
        body.update({"to": to})
    # Only send comment if the argument was provided, don't send null values
    if comment is not None:
        body.update({"comment": comment})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def search_hosts(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    keywords: str = None,
    agentUser: str = None,
    customer: str = None,
    labels: str = None,
    host: str = None,
    inDowntime: bool = None,
    sortBy: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    includeComments: bool = None,
    includeProperties: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Search configuration hosts (INTERNAL)
    
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list keywords: If set\, filter hosts matching these keywords.
    :param list agentUser: If set\, limit the search result to hosts which are bound to these agents \(id or username\)
    :param list customer: If set\, limit the search result to hosts which are bound to these customers \(id or username\)
    :param list labels: If set\, limit the search result to hosts having any of these labels
    :param list host: If set\, filter hosts by ID or hostname.
    :param bool inDowntime: If true\, only return hosts which are in scheduled downtime. If false\, exclude. If not set\, do not filter.
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param list includeFlags: Only include objects which have includeFlags set.
    :param list excludeFlags: Exclude objects which have excludeFlags set.
    :param bool includeComments: If true\, include comments on returned host configuration objects \(default false\)
    :param bool includeProperties: If true\, include properties on returned host configuration objects \(default true\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/search".format()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        body.update({"includeComments": includeComments})
    # Only send includeProperties if the argument was provided, don't send null values
    if includeProperties is not None:
        body.update({"includeProperties": includeProperties})
    # Only send agentUser if the argument was provided, don't send null values
    if agentUser is not None:
        body.update({"agentUser": agentUser})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send labels if the argument was provided, don't send null values
    if labels is not None:
        body.update({"labels": labels})
    # Only send host if the argument was provided, don't send null values
    if host is not None:
        body.update({"host": host})
    # Only send inDowntime if the argument was provided, don't send null values
    if inDowntime is not None:
        body.update({"inDowntime": inDowntime})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def setup_default_configuration(
    hostID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Create default instances on configuration host (INTERNAL)
    
    :param int hostID: ID of host to add instances to
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{hostID}/setupdefault".format(hostID=hostID)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def setup_default_configuration_request(
    idOrHostName: str,
    packageName: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Create default instances on configuration host (INTERNAL)
    
    :param str idOrHostName: ID or host name of host to add instances to
    :param str packageName: Instance package names \=\> Sanitize by regex processingStack
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{idOrHostName}/setupdefault".format(idOrHostName=idOrHostName)
    headers = {}

    body = body or {}
    # Only send packageName if the argument was provided, don't send null values
    if packageName is not None:
        body.update({"packageName": packageName})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def update_host(
    hostID: int,
    id: int = None,
    name: str = None,
    information: str = None,
    properties: dict = None,
    agentUser: str = None,
    preprod: bool = None,
    daytimeMonitored: bool = None,
    setLabels: str = None,
    addLabels: str = None,
    removeLabels: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Update configuration host (INTERNAL)
    
    :param int hostID: ID of host to update
    :param int id: 
    :param str name: \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str information: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param dict properties: 
    :param str agentUser: Name or ID of the agent user to associate to this host. If not set\, do not change.
    :param bool preprod: If set\, change the PREPROD flag on this host
    :param bool daytimeMonitored: If set\, change the DAYTIME\_MONITORED flag on this host
    :param list setLabels: Labels to set on this host \(overwrite existing\)
    :param list addLabels: Labels to add to this host \(in addition to existing\, will ignore existing labels\)
    :param list removeLabels: Labels to remove from this host \(will ignore labels not set\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{hostID}".format(hostID=hostID)
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send information if the argument was provided, don't send null values
    if information is not None:
        body.update({"information": information})
    # Only send properties if the argument was provided, don't send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send agentUser if the argument was provided, don't send null values
    if agentUser is not None:
        body.update({"agentUser": agentUser})
    # Only send preprod if the argument was provided, don't send null values
    if preprod is not None:
        body.update({"preprod": preprod})
    # Only send daytimeMonitored if the argument was provided, don't send null values
    if daytimeMonitored is not None:
        body.update({"daytimeMonitored": daytimeMonitored})
    # Only send setLabels if the argument was provided, don't send null values
    if setLabels is not None:
        body.update({"setLabels": setLabels})
    # Only send addLabels if the argument was provided, don't send null values
    if addLabels is not None:
        body.update({"addLabels": addLabels})
    # Only send removeLabels if the argument was provided, don't send null values
    if removeLabels is not None:
        body.update({"removeLabels": removeLabels})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def update_host_properties(
    id: int,
    properties: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Update configuration host properties (INTERNAL)
    
    :param int id: ID of the host to update properties on
    :param dict properties: The host properties to update to\, null value will clear the property
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{id}/properties".format(id=id)
    headers = {}

    body = body or {}
    # Only send properties if the argument was provided, don't send null values
    if properties is not None:
        body.update({"properties": properties})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module
)
def view_host(
    idOrHostName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Fetch configuration host (INTERNAL)
    
    :param str idOrHostName: ID of host to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/host/{idOrHostName}".format(idOrHostName=idOrHostName)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``add_comment`` is an alias for ``add_host_comment``. Exists
#: only for backward compatibility - **do not use** - use ``add_host_comment`` instead.
add_comment = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="add_comment"
)(deprecated_alias("add_comment")(add_host_comment))
#: **DEPRECATED** : ``create_2`` is an alias for ``create_host``. Exists
#: only for backward compatibility - **do not use** - use ``create_host`` instead.
create_2 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="create_2"
)(deprecated_alias("create_2")(create_host))
#: **DEPRECATED** : ``delete_1`` is an alias for ``delete_host``. Exists
#: only for backward compatibility - **do not use** - use ``delete_host`` instead.
delete_1 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="delete_1"
)(deprecated_alias("delete_1")(delete_host))
#: **DEPRECATED** : ``disable_monitoring`` is an alias for ``disable_host_monitoring``. Exists
#: only for backward compatibility - **do not use** - use ``disable_host_monitoring`` instead.
disable_monitoring = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="disable_monitoring"
)(deprecated_alias("disable_monitoring")(disable_host_monitoring))
#: **DEPRECATED** : ``duplicate_1`` is an alias for ``duplicate_host``. Exists
#: only for backward compatibility - **do not use** - use ``duplicate_host`` instead.
duplicate_1 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="duplicate_1"
)(deprecated_alias("duplicate_1")(duplicate_host))
#: **DEPRECATED** : ``duplicate_2`` is an alias for ``setup_default_configuration``. Exists
#: only for backward compatibility - **do not use** - use ``setup_default_configuration`` instead.
duplicate_2 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="duplicate_2"
)(deprecated_alias("duplicate_2")(setup_default_configuration))
#: **DEPRECATED** : ``enable_monitoring`` is an alias for ``enable_host_monitoring``. Exists
#: only for backward compatibility - **do not use** - use ``enable_host_monitoring`` instead.
enable_monitoring = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="enable_monitoring"
)(deprecated_alias("enable_monitoring")(enable_host_monitoring))
#: **DEPRECATED** : ``list_2`` is an alias for ``list_hosts``. Exists
#: only for backward compatibility - **do not use** - use ``list_hosts`` instead.
list_2 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="list_2"
)(deprecated_alias("list_2")(list_hosts))
#: **DEPRECATED** : ``schedule_monitoring`` is an alias for ``schedule_host_monitoring``. Exists
#: only for backward compatibility - **do not use** - use ``schedule_host_monitoring`` instead.
schedule_monitoring = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="schedule_monitoring"
)(deprecated_alias("schedule_monitoring")(schedule_host_monitoring))
#: **DEPRECATED** : ``search_2`` is an alias for ``search_hosts``. Exists
#: only for backward compatibility - **do not use** - use ``search_hosts`` instead.
search_2 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="search_2"
)(deprecated_alias("search_2")(search_hosts))
#: **DEPRECATED** : ``update_1`` is an alias for ``update_host``. Exists
#: only for backward compatibility - **do not use** - use ``update_host`` instead.
update_1 = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="update_1"
)(deprecated_alias("update_1")(update_host))
#: **DEPRECATED** : ``view`` is an alias for ``view_host``. Exists
#: only for backward compatibility - **do not use** - use ``view_host`` instead.
view = register_command(
    extending=("configurationadmin", "v1", "host"),
    module=argus_cli_module,
    alias="view"
)(deprecated_alias("view")(view_host))