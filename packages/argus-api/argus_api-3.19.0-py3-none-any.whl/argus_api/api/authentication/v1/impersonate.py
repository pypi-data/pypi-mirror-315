"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "impersonate"),
    module=argus_cli_module
)
def impersonate(
    userName: str = None,
    domain: str = None,
    customer: str = None,
    function: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Request an impersonated session (INTERNAL)
    
    :param str userName: Username of user to impersonate.
    :param str domain: Domain of user to impersonate \(id or name\)
    :param list customer: Set of customers the session should be valid for. If not specified\, customers will be inherited from active permissions.
    :param list function: Set of functions\/roles \(by name\) the session should be granted \(default is all current functions\). Cannot extend the current set of functions.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/impersonate".format()
    headers = {}

    body = body or {}
    # Only send userName if the argument was provided, don't send null values
    if userName is not None:
        body.update({"userName": userName})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send function if the argument was provided, don't send null values
    if function is not None:
        body.update({"function": function})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``constrain_1`` is an alias for ``impersonate``. Exists
#: only for backward compatibility - **do not use** - use ``impersonate`` instead.
constrain_1 = register_command(
    extending=("authentication", "v1", "impersonate"),
    module=argus_cli_module,
    alias="constrain_1"
)(deprecated_alias("constrain_1")(impersonate))