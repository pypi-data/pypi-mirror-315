"""Autogenerated API schema"""
from argus_api import session


add_or_update_ranges = {'tags': ['development'], 'summary': 'Add or update IP ranges (DEV)', 'description': '', 'operationId': 'addOrUpdateRanges', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'array', 'items': {'type': 'object', 'properties': {'fromAddress': {'type': 'string', 'position': 0, 'description': 'The lower end of the IP-address range (inclusive).'}, 'toAddress': {'type': 'string', 'position': 0, 'description': 'The upper end of the IP-address range (inclusive).'}, 'locationID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'The ID of the location associated with the IP-address range.'}}, 'description': 'Request to add or update IP-address range'}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'range': {'type': 'dict', 'properties': {'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this IP-range is located.'}, 'locationID': {'type': 'int', 'position': 0, 'description': 'The location ID associated with this IP-range.'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this IP-range was last updated.'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Geographic latitude of the spot where this IP-range is located (0.0 if not set).'}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Geographic longitude of the spot where this IP-range is located (0.0 if not set).'}}, 'description': 'Combines IP-address range (from- and to-address) with country and location data.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
find_ranges = {'tags': ['/geoip/v1'], 'summary': 'Find IP ranges (INTERNAL)', 'description': '', 'operationId': 'findRanges', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search request', 'required': False, 'schema': {'type': 'object', 'properties': {'country': {'type': 'list', 'position': 0, 'description': 'Only return ranges from these countries (by country ID or two-letter code).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regionID': {'type': 'list', 'position': 0, 'description': 'Only return ranges from these regions (by region ID).', 'uniqueItems': True, 'items': {'type': 'int'}}, 'locationID': {'type': 'list', 'position': 0, 'description': 'Only return ranges from these locations (by location ID).', 'uniqueItems': True, 'items': {'type': 'int'}}, 'rangeID': {'type': 'list', 'position': 0, 'description': 'Only return specific ranges (by ID).', 'uniqueItems': True, 'items': {'type': 'int'}}, 'ipAddress': {'type': 'list', 'position': 0, 'description': 'Only return ranges which cover any of these IP-addresses. => format:ip', 'uniqueItems': True, 'items': {'type': 'string'}}, 'addressFamily': {'type': 'str', 'position': 0, 'description': 'Only return ranges for this address family range (ipv4 or ipv6).', 'enum': ['IPv4', 'IPv6']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'A set of included enumerated flags of the searched ranges.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'A set of excluded enumerated flags of the searched ranges.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'If true, also include ranges marked as deleted.'}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Search for ranges having lastUpdatedTimestamp greater than or equal to this timestamp.'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Search for ranges having lastUpdatedTimestamp less than or equal to this timestamp.'}, 'countTimeout': {'type': 'int', 'position': 0, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is -1. (default -1)', 'minimum': -1, 'maximum': 30, 'default': -1}, 'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.', 'minimum': 0}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.', 'minimum': 0}, 'sortBy': {'type': 'list', 'position': 0, 'description': "Fields to sort results by (without a sign is ascending, with '-' sign is descending).", 'items': {'type': 'str', 'enum': ['id', 'startIP', 'endIP', 'locationID', '-id', '-startIP', '-endIP', '-locationID']}}, 'startIPAddress': {'type': 'list', 'position': 0, 'description': 'Only return ranges where the range start address matches one of these IP-addresses. => format:ip', 'uniqueItems': True, 'items': {'type': 'string'}}, 'fromIP': {'type': 'str', 'position': 0, 'description': 'Only return ranges where the range start address is greater than or equal to this IP-address. => format:ip'}, 'toIP': {'type': 'str', 'position': 0, 'description': 'Only return ranges where the range start address is less than or equal to this IP-address. => format:ip'}}, 'description': 'Request to search for IP-address ranges'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'range': {'type': 'dict', 'properties': {'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this IP-range is located.'}, 'locationID': {'type': 'int', 'position': 0, 'description': 'The location ID associated with this IP-range.'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this IP-range was last updated.'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Geographic latitude of the spot where this IP-range is located (0.0 if not set).'}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Geographic longitude of the spot where this IP-range is located (0.0 if not set).'}}, 'description': 'Combines IP-address range (from- and to-address) with country and location data.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
list_ranges = {'tags': ['/geoip/v1'], 'summary': 'List IP ranges (INTERNAL)', 'description': '', 'operationId': 'listRanges', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Max number of items to return', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The amount of items to skip from the beginning', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "Fields to sort results by (without a sign is ascending, with '-' sign is descending, supported fields are: id, startIP, endIP, locationID)", 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'range': {'type': 'dict', 'properties': {'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this IP-range is located.'}, 'locationID': {'type': 'int', 'position': 0, 'description': 'The location ID associated with this IP-range.'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this IP-range was last updated.'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Geographic latitude of the spot where this IP-range is located (0.0 if not set).'}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Geographic longitude of the spot where this IP-range is located (0.0 if not set).'}}, 'description': 'Combines IP-address range (from- and to-address) with country and location data.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
lookup_ip = {'tags': ['/geoip/v1'], 'summary': 'Lookup IP range (INTERNAL)', 'description': '', 'operationId': 'lookupIP', 'produces': ['application/json'], 'parameters': [{'name': 'ip', 'in': 'path', 'description': 'IP-address that has to be covered by the range', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'range': {'type': 'dict', 'properties': {'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this IP-range is located.'}, 'locationID': {'type': 'int', 'position': 0, 'description': 'The location ID associated with this IP-range.'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this IP-range was last updated.'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Geographic latitude of the spot where this IP-range is located (0.0 if not set).'}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Geographic longitude of the spot where this IP-range is located (0.0 if not set).'}}, 'description': 'Combines IP-address range (from- and to-address) with country and location data.'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}