{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "customerdomains/v1"
    },
    {
      "name": "customernetworks/v1"
    }
  ],
  "paths": {
    "/customerdomains/v1/domain/{id}": {
      "get": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Get customer domain (INTERNAL)",
        "description": "",
        "operationId": "getCustomerDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to get",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "put": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Update customer domain (INTERNAL)",
        "description": "",
        "operationId": "updateCustomerDomain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Customer domain update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Delete customer domain (INTERNAL)",
        "description": "",
        "operationId": "deleteCustomerDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customerdomains/v1/domain/search": {
      "post": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Search Customer Domains with specified criteria (INTERNAL)",
        "description": "",
        "operationId": "searchCustomerDomain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Search customer domain request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customerdomains/v1/domain": {
      "get": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Search Customer Domains with specified query params (INTERNAL)",
        "description": "",
        "operationId": "getCustomerDomains",
        "produces": [
          "application/json",
          "text/csv",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Filter search by Customer Domain keyword fields (domainName and description)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customer",
            "in": "query",
            "description": "Customer ids or short names",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "maximum": 10000,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "maximum": 10000,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "post": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Create new customer domain (INTERNAL)",
        "description": "",
        "operationId": "createCustomerDomain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer domain create request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/{networkID}/comments": {
      "get": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Get network's comments (PUBLIC)",
        "description": "",
        "operationId": "getCustomerNetworkComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of comments",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned comments",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Add comment for customer network (PUBLIC)",
        "description": "",
        "operationId": "addCustomerNetworkComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to update",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Network update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/{networkID}": {
      "get": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Get customer network (PUBLIC)",
        "description": "",
        "operationId": "getCustomerNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to get",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "put": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Update customer network (PUBLIC)",
        "description": "",
        "operationId": "updateCustomerNetwork",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to update",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Customer network update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Delete customer network (PUBLIC)",
        "description": "",
        "operationId": "deleteCustomerNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to delete",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network": {
      "get": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Get networks belonging to customer(s) (PUBLIC)",
        "description": "",
        "operationId": "getCustomerNetworks",
        "produces": [
          "application/json",
          "text/csv",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "ID of customer(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of networks",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned networks",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Add new customer network (PUBLIC)",
        "description": "",
        "operationId": "addCustomerNetwork",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer network add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/search": {
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Search customer network (PUBLIC)",
        "description": "",
        "operationId": "searchCustomerNetwork",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customerdomains/v1/domain/{id}/unverify": {
      "put": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Unverifies a verified customer domain (INTERNAL)",
        "description": "",
        "operationId": "unverifyCustomerDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to unverify",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customerdomains/v1/domain/{id}/verify": {
      "put": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Verifies an unverified customer domain and its subdomains (INTERNAL)",
        "description": "",
        "operationId": "verifyCustomerDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to verify",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/{networkID}/comments/{commentID}": {
      "delete": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Delete comment from customer network (PUBLIC)",
        "description": "",
        "operationId": "deleteCustomerNetworkComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of parent network",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "name": "commentID",
            "in": "path",
            "description": "ID of comment to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/bulk": {
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Bulk add/update customer networks (PUBLIC)",
        "description": "",
        "operationId": "bulkAddCustomerNetworks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer network bulk add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/bulk/lenient": {
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Bulk add/update customer networks with the option of ignoring failures (PUBLIC)",
        "description": "",
        "operationId": "lenientBulkAddCustomerNetworks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer network bulk add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/{networkID}/verify": {
      "put": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Verifies an unverified customer network (PUBLIC)",
        "description": "",
        "operationId": "verifyCustomerNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to verify",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/customernetworks/v1/network/{networkID}/unverify": {
      "put": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Unverifies a verified customer network (PUBLIC)",
        "description": "",
        "operationId": "unverifyCustomerNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to unverify",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    }
  },
  "definitions": {
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkNetworkRequest": {
      "type": "object",
      "required": [
        "description",
        "networkAddress",
        "zone"
      ],
      "properties": {
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "networkAddress": {
          "type": "string",
          "position": 0,
          "description": "IP address of the customer network => format:ip"
        }
      },
      "description": "Request model for adding a network as part of a lenient bulk add operation"
    },
    "no.mnemonic.services.argus.common.rest.model.ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddRequest": {
      "type": "object",
      "required": [
        "customer",
        "description",
        "networkAddress",
        "zone"
      ],
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the network belongs to"
        },
        "location": {
          "type": "string",
          "position": 0,
          "description": "DEPRECATED: DEPRECATED. Location ID or short name of the location where the network is located (default 0)"
        },
        "flagsToSet": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "networkAddress": {
          "type": "string",
          "position": 0,
          "description": "IP address of the customer network => format:ip"
        },
        "verified": {
          "type": "boolean",
          "position": 0,
          "description": "DEPRECATED. Whether to create the network already Verified. (default true)",
          "default": true
        }
      },
      "description": "Request model for adding a single customer network"
    },
    "no.mnemonic.jargus.model.CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/no.mnemonic.jargus.model.DomainInfo"
        }
      }
    },
    "no.mnemonic.jargus.model.DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetworkComment"
        }
      }
    },
    "no.mnemonic.jargus.net.IPNetworkAddress": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean"
        },
        "ipv6": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "host": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "maskBits": {
          "type": "integer",
          "format": "int32"
        },
        "multicast": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        }
      }
    },
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddCommentRequest": {
      "type": "object",
      "required": [
        "comment"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Comment to add to the network => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      },
      "description": "Request model for adding a network comment"
    },
    "CustomerNetworkSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "customerID": {
          "type": "array",
          "position": 0,
          "description": "Restrict search to data belonging to specified customers.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "addresses": {
          "type": "array",
          "position": 0,
          "description": "A set of IP addresses matched against networks",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.net.IPNetworkAddress"
          }
        },
        "includeSupernet": {
          "type": "boolean",
          "position": 0,
          "description": "Network in search criteria will be searched for matching supernets (default true)",
          "default": true
        },
        "includeSubnet": {
          "type": "boolean",
          "position": 0,
          "description": "Network in search criteria will be searched for matching subnets (default true)",
          "default": true
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "A set of keywords matched against network's description",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "KeywordMatchStrategy to define how keywords are queried for logically i.e. equivalent of AND/OR (default any)",
          "enum": [
            "all",
            "any"
          ]
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "description",
              "all"
            ]
          }
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Start of time search period"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "End of time search period"
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "TimeMatchStrategy to define how to match startTimestamp and endTimestamp with provided timeFieldStrategies (default any)",
          "enum": [
            "all",
            "any"
          ]
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "all"
            ]
          }
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "networkAddress",
              "maskBits",
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "-id",
              "-networkAddress",
              "-maskBits",
              "-createdTimestamp",
              "-lastUpdatedTimestamp"
            ]
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Only include objects which have includeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS",
              "RFC1918",
              "PRIVATE_ADDRESS"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS",
              "RFC1918",
              "PRIVATE_ADDRESS"
            ]
          }
        }
      },
      "description": "Request to search for customer networks"
    },
    "IPNetworkAddress": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean"
        },
        "ipv6": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "host": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "maskBits": {
          "type": "integer",
          "format": "int32"
        },
        "multicast": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        }
      }
    },
    "no.mnemonic.jargus.model.LocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "shortName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkNetworkRequest": {
      "type": "object",
      "required": [
        "description",
        "networkAddress",
        "zone"
      ],
      "properties": {
        "location": {
          "type": "string",
          "position": 0,
          "description": "DEPRECATED: DEPRECATED. Location ID or short name of the location where the network is located (default 0)"
        },
        "flagsToSet": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "networkAddress": {
          "type": "string",
          "position": 0,
          "description": "IP address of the customer network => format:ip"
        }
      },
      "description": "Request model for adding a network as part of a bulk add operation"
    },
    "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by KeywordFieldStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "domainName",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "The set of sub criteria to add to the search",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria"
          }
        },
        "domainName": {
          "type": "array",
          "position": 0,
          "description": "The set of exact customer domain names to search for",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeSubDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for subdomains of specified domains (default false)",
          "default": false
        },
        "includeSuperDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for parent domains of specified domains (default false)",
          "default": false
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to domains with the given customers, identified by id or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)"
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search  (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "created",
              "lastUpdated",
              "deleted",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdByUser",
              "lastUpdatedByUser",
              "deletedByUser",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true, objects matching this criteria are required (logical AND-ed together with parent criteria) (default false)",
          "default": false
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true, objects matching this criteria will be excluded (default false)",
          "default": false
        }
      },
      "description": "The sub request for searching for customer domains"
    },
    "CustomerDomainSearchRequest": {
      "type": "object",
      "properties": {
        "sortBy": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "customer",
              "domainName",
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "-id",
              "-customer",
              "-domainName",
              "-createdTimestamp",
              "-lastUpdatedTimestamp"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by KeywordFieldStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "domainName",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "The set of sub criteria to add to the search",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria"
          }
        },
        "domainName": {
          "type": "array",
          "position": 0,
          "description": "The set of exact customer domain names to search for",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeSubDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for subdomains of specified domains (default false)",
          "default": false
        },
        "includeSuperDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for parent domains of specified domains (default false)",
          "default": false
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to domains with the given customers, identified by id or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)"
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search  (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "created",
              "lastUpdated",
              "deleted",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdByUser",
              "lastUpdatedByUser",
              "deletedByUser",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit maximum amount of results (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip specified amount of results (default 0)",
          "minimum": 0,
          "default": 0
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to include deleted domains in the search (default false). Only allowed for users with `viewDeletedCustomerDomains` permission (default false)",
          "default": false
        }
      },
      "description": "A request to search for customer domains"
    },
    "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainUpdateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the domain. Maximum number of characters is 2048."
        },
        "internalDomain": {
          "type": "boolean",
          "position": 0,
          "description": "Whether the domain is internal (default null)",
          "default": false
        }
      },
      "description": "Request model for updating domain"
    },
    "CustomerNetworkBulkAddRequest": {
      "type": "object",
      "required": [
        "customer",
        "networks"
      ],
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkNetworkRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the networks belong to"
        },
        "overwrite": {
          "type": "boolean",
          "position": 0,
          "description": "Overwrite existing networks configuration (default true)",
          "default": true
        },
        "verified": {
          "type": "boolean",
          "position": 0,
          "description": "DEPRECATED. Whether to create the networks already Verified. (default true)",
          "default": true
        }
      },
      "description": "Request for bulk adding customer networks"
    },
    "ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
          }
        }
      }
    },
    "CustomerNetwork": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "zone": {
          "type": "string",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "customer": {
          "position": 0,
          "description": "Customer that the network belongs to",
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerInfo"
        },
        "location": {
          "position": 0,
          "description": "DEPRECATED. Location where the network is",
          "$ref": "#/definitions/no.mnemonic.jargus.model.LocationInfo"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network"
        },
        "networkAddress": {
          "position": 0,
          "description": "IP address of the customer network",
          "$ref": "#/definitions/no.mnemonic.jargus.net.IPNetworkAddress"
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "Last user which updated the customer network",
          "$ref": "#/definitions/no.mnemonic.jargus.model.UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of last update of the customer network"
        },
        "createdByUser": {
          "position": 0,
          "description": "User which created the customer network",
          "$ref": "#/definitions/no.mnemonic.jargus.model.UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of creation of the customer network"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DELETED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC"
            ]
          }
        }
      },
      "description": "Response containing information on a customer network"
    },
    "no.mnemonic.jargus.model.UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/no.mnemonic.jargus.model.DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "Type of the subject",
          "readOnly": true,
          "enum": [
            "user",
            "group"
          ]
        }
      }
    },
    "no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse": {
      "type": "object",
      "properties": {
        "accepted": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of networks that were accepted and added"
        },
        "rejected": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of networks that were rejected and not added"
        },
        "errors": {
          "type": "array",
          "position": 0,
          "description": "Information about networks that were rejected",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetworkRecordErrorInformation"
          }
        }
      },
      "description": "Response containing information about the result of the bulk add operation"
    },
    "no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "customerID": {
          "type": "array",
          "position": 0,
          "description": "Restrict search to data belonging to specified customers.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "addresses": {
          "type": "array",
          "position": 0,
          "description": "A set of IP addresses matched against networks",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.net.IPNetworkAddress"
          }
        },
        "includeSupernet": {
          "type": "boolean",
          "position": 0,
          "description": "Network in search criteria will be searched for matching supernets (default true)",
          "default": true
        },
        "includeSubnet": {
          "type": "boolean",
          "position": 0,
          "description": "Network in search criteria will be searched for matching subnets (default true)",
          "default": true
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "A set of keywords matched against network's description",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "KeywordMatchStrategy to define how keywords are queried for logically i.e. equivalent of AND/OR (default any)",
          "enum": [
            "all",
            "any"
          ]
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "description",
              "all"
            ]
          }
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Start of time search period"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "End of time search period"
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "TimeMatchStrategy to define how to match startTimestamp and endTimestamp with provided timeFieldStrategies (default any)",
          "enum": [
            "all",
            "any"
          ]
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "all"
            ]
          }
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "networkAddress",
              "maskBits",
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "-id",
              "-networkAddress",
              "-maskBits",
              "-createdTimestamp",
              "-lastUpdatedTimestamp"
            ]
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Only include objects which have includeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS",
              "RFC1918",
              "PRIVATE_ADDRESS"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS",
              "RFC1918",
              "PRIVATE_ADDRESS"
            ]
          }
        }
      },
      "description": "Request to search for customer networks"
    },
    "ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
        }
      }
    },
    "CustomerDomainSearchSubCriteria": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by KeywordFieldStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "domainName",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "The set of sub criteria to add to the search",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria"
          }
        },
        "domainName": {
          "type": "array",
          "position": 0,
          "description": "The set of exact customer domain names to search for",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeSubDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for subdomains of specified domains (default false)",
          "default": false
        },
        "includeSuperDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for parent domains of specified domains (default false)",
          "default": false
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to domains with the given customers, identified by id or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)"
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search  (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "created",
              "lastUpdated",
              "deleted",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdByUser",
              "lastUpdatedByUser",
              "deletedByUser",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true, objects matching this criteria are required (logical AND-ed together with parent criteria) (default false)",
          "default": false
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true, objects matching this criteria will be excluded (default false)",
          "default": false
        }
      },
      "description": "The sub request for searching for customer domains"
    },
    "no.mnemonic.jargus.model.CustomerNetworkComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the comment was added."
        },
        "user": {
          "position": 0,
          "description": "Who added the comment.",
          "$ref": "#/definitions/no.mnemonic.jargus.model.UserInfo"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment's text."
        }
      },
      "description": "Response containing information on a customer network comment"
    },
    "ResultStash-no.mnemonic.jargus.model.CustomerNetwork-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetwork"
        }
      }
    },
    "CustomerDomainCreateRequest": {
      "type": "object",
      "required": [
        "customer",
        "domainName"
      ],
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the domain belongs to"
        },
        "domainName": {
          "type": "string",
          "position": 0,
          "description": "Fully qualified name of the domain (FQDN)"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the domain"
        },
        "internalDomain": {
          "type": "boolean",
          "position": 0,
          "description": "Whether the domain is internal (default false)",
          "default": false
        }
      },
      "description": "Request model for creating a customer domain"
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/no.mnemonic.jargus.model.DomainInfo"
        }
      }
    },
    "CustomerDomainUpdateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the domain. Maximum number of characters is 2048."
        },
        "internalDomain": {
          "type": "boolean",
          "position": 0,
          "description": "Whether the domain is internal (default null)",
          "default": false
        }
      },
      "description": "Request model for updating domain"
    },
    "no.mnemonic.jargus.model.CustomerNetwork": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "zone": {
          "type": "string",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "customer": {
          "position": 0,
          "description": "Customer that the network belongs to",
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerInfo"
        },
        "location": {
          "position": 0,
          "description": "DEPRECATED. Location where the network is",
          "$ref": "#/definitions/no.mnemonic.jargus.model.LocationInfo"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network"
        },
        "networkAddress": {
          "position": 0,
          "description": "IP address of the customer network",
          "$ref": "#/definitions/no.mnemonic.jargus.net.IPNetworkAddress"
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "Last user which updated the customer network",
          "$ref": "#/definitions/no.mnemonic.jargus.model.UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of last update of the customer network"
        },
        "createdByUser": {
          "position": 0,
          "description": "User which created the customer network",
          "$ref": "#/definitions/no.mnemonic.jargus.model.UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of creation of the customer network"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DELETED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC"
            ]
          }
        }
      },
      "description": "Response containing information on a customer network"
    },
    "CustomerNetworkLenientBulkAddRequest": {
      "type": "object",
      "required": [
        "customer",
        "networks"
      ],
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkNetworkRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the networks belong to"
        },
        "domain": {
          "type": "string",
          "position": 0,
          "description": "The domain of the customer. Defaults to the current user's domain"
        },
        "overwrite": {
          "type": "boolean",
          "position": 0,
          "description": "Overwrite existing networks configuration (default true)",
          "default": true
        },
        "ignoreOnFailed": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to ignore networks that fails to be added. If true, all networks that can be added, will be added (default false)",
          "default": false
        }
      },
      "description": "Request model for leniently bulk adding networks"
    },
    "CustomerNetworkAddRequest": {
      "type": "object",
      "required": [
        "customer",
        "description",
        "networkAddress",
        "zone"
      ],
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the network belongs to"
        },
        "location": {
          "type": "string",
          "position": 0,
          "description": "DEPRECATED: DEPRECATED. Location ID or short name of the location where the network is located (default 0)"
        },
        "flagsToSet": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "networkAddress": {
          "type": "string",
          "position": 0,
          "description": "IP address of the customer network => format:ip"
        },
        "verified": {
          "type": "boolean",
          "position": 0,
          "description": "DEPRECATED. Whether to create the network already Verified. (default true)",
          "default": true
        }
      },
      "description": "Request model for adding a single customer network"
    },
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkAddRequest": {
      "type": "object",
      "required": [
        "customer",
        "networks"
      ],
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkNetworkRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the networks belong to"
        },
        "overwrite": {
          "type": "boolean",
          "position": 0,
          "description": "Overwrite existing networks configuration (default true)",
          "default": true
        },
        "verified": {
          "type": "boolean",
          "position": 0,
          "description": "DEPRECATED. Whether to create the networks already Verified. (default true)",
          "default": true
        }
      },
      "description": "Request for bulk adding customer networks"
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/no.mnemonic.jargus.model.DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "Type of the subject",
          "readOnly": true,
          "enum": [
            "user",
            "group"
          ]
        }
      }
    },
    "no.mnemonic.services.argus.common.spi.response.CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object."
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the customer."
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Shortname of the customer."
        },
        "domain": {
          "position": 0,
          "description": "Domain that this customer belongs to.",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.DomainInfo"
        }
      },
      "description": "SPI CustomerInfo"
    },
    "ResultStash-no.mnemonic.jargus.model.CustomerNetwork-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetwork"
          }
        }
      }
    },
    "CustomerNetworkAddCommentRequest": {
      "type": "object",
      "required": [
        "comment"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Comment to add to the network => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      },
      "description": "Request model for adding a network comment"
    },
    "no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the domain"
        },
        "domainName": {
          "type": "string",
          "position": 0,
          "description": "Fully qualified name of the domain (FQDN)"
        },
        "customer": {
          "position": 0,
          "description": "Customer of the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.CustomerInfo"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the domain"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Set of flags set on the domain",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "public",
              "internal",
              "unverified"
            ]
          }
        },
        "createdByUser": {
          "position": 0,
          "description": "User that created the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.UserInfo"
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "User that last updated the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.UserInfo"
        },
        "deletedByUser": {
          "position": 0,
          "description": "User that deleted the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp when the domain was created"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp when the domain was last updated"
        },
        "deletedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp when the domain was deleted"
        }
      },
      "description": "Response containing information on a customer domain"
    },
    "no.mnemonic.services.argus.common.spi.response.DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "ID of the response object."
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the domain."
        }
      },
      "description": "SPI DomainInfo"
    },
    "CustomerNetworkRecordErrorInformation": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the add request as it appears in the request"
        },
        "errorMessages": {
          "type": "array",
          "position": 0,
          "description": "Messages for causes of errors",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response containing detailed error information about a failed add operation"
    },
    "ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetworkComment"
          }
        }
      }
    },
    "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainCreateRequest": {
      "type": "object",
      "required": [
        "customer",
        "domainName"
      ],
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the domain belongs to"
        },
        "domainName": {
          "type": "string",
          "position": 0,
          "description": "Fully qualified name of the domain (FQDN)"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the domain"
        },
        "internalDomain": {
          "type": "boolean",
          "position": 0,
          "description": "Whether the domain is internal (default false)",
          "default": false
        }
      },
      "description": "Request model for creating a customer domain"
    },
    "CustomerNetworkUpdateRequest": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "position": 0,
          "description": "DEPRECATED. Location ID or short name of the location where the network is located"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "flagsToSet": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network. This property takes precedence over the content of flagsToEnable and flagsToDisable properties. A permission check if performed to verify that the user is allowed to set the flags, and disable any flags already present on the network.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "flagsToEnable": {
          "type": "array",
          "position": 0,
          "description": "Flags to enable for the network. A permission check if performed to verify that the user is allowed to set the flags",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "flagsToDisable": {
          "type": "array",
          "position": 0,
          "description": "Flags to disable for the network. A permission check if performed to verify that the user is allowed to disable the flags",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        }
      },
      "description": "Request model for updating a network"
    },
    "ResultStash-no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.argus.common.rest.model.ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse"
        }
      }
    },
    "no.mnemonic.services.argus.common.spi.response.UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object."
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "The subject's short name"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The subject's name"
        },
        "domain": {
          "position": 0,
          "description": "The subject's domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.DomainInfo"
        },
        "customer": {
          "position": 0,
          "description": "The customer the subject belongs to",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.CustomerInfo"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "The subject's flags",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted"
            ]
          }
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "Type of the subject",
          "readOnly": true,
          "enum": [
            "user",
            "group"
          ]
        }
      },
      "description": "SPI UserInfo"
    },
    "CustomerNetworkComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the comment was added."
        },
        "user": {
          "position": 0,
          "description": "Who added the comment.",
          "$ref": "#/definitions/no.mnemonic.jargus.model.UserInfo"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment's text."
        }
      },
      "description": "Response containing information on a customer network comment"
    },
    "no.mnemonic.services.argus.common.rest.model.ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CustomerDomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the domain"
        },
        "domainName": {
          "type": "string",
          "position": 0,
          "description": "Fully qualified name of the domain (FQDN)"
        },
        "customer": {
          "position": 0,
          "description": "Customer of the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.CustomerInfo"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the domain"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Set of flags set on the domain",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "public",
              "internal",
              "unverified"
            ]
          }
        },
        "createdByUser": {
          "position": 0,
          "description": "User that created the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.UserInfo"
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "User that last updated the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.UserInfo"
        },
        "deletedByUser": {
          "position": 0,
          "description": "User that deleted the domain",
          "$ref": "#/definitions/no.mnemonic.services.argus.common.spi.response.UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp when the domain was created"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp when the domain was last updated"
        },
        "deletedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp when the domain was deleted"
        }
      },
      "description": "Response containing information on a customer domain"
    },
    "LocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "shortName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      }
    },
    "CustomerNetworkLenientBulkNetworkRequest": {
      "type": "object",
      "required": [
        "description",
        "networkAddress",
        "zone"
      ],
      "properties": {
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "networkAddress": {
          "type": "string",
          "position": 0,
          "description": "IP address of the customer network => format:ip"
        }
      },
      "description": "Request model for adding a network as part of a lenient bulk add operation"
    },
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkAddRequest": {
      "type": "object",
      "required": [
        "customer",
        "networks"
      ],
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkNetworkRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer that the networks belong to"
        },
        "domain": {
          "type": "string",
          "position": 0,
          "description": "The domain of the customer. Defaults to the current user's domain"
        },
        "overwrite": {
          "type": "boolean",
          "position": 0,
          "description": "Overwrite existing networks configuration (default true)",
          "default": true
        },
        "ignoreOnFailed": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to ignore networks that fails to be added. If true, all networks that can be added, will be added (default false)",
          "default": false
        }
      },
      "description": "Request model for leniently bulk adding networks"
    },
    "CustomerNetworkBulkNetworkRequest": {
      "type": "object",
      "required": [
        "description",
        "networkAddress",
        "zone"
      ],
      "properties": {
        "location": {
          "type": "string",
          "position": 0,
          "description": "DEPRECATED: DEPRECATED. Location ID or short name of the location where the network is located (default 0)"
        },
        "flagsToSet": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "networkAddress": {
          "type": "string",
          "position": 0,
          "description": "IP address of the customer network => format:ip"
        }
      },
      "description": "Request model for adding a network as part of a bulk add operation"
    },
    "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkUpdateRequest": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "position": 0,
          "description": "DEPRECATED. Location ID or short name of the location where the network is located"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the customer network. Maximum number of characters is 255."
        },
        "flagsToSet": {
          "type": "array",
          "position": 0,
          "description": "Flags to set for the network. This property takes precedence over the content of flagsToEnable and flagsToDisable properties. A permission check if performed to verify that the user is allowed to set the flags, and disable any flags already present on the network.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "flagsToEnable": {
          "type": "array",
          "position": 0,
          "description": "Flags to enable for the network. A permission check if performed to verify that the user is allowed to set the flags",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "flagsToDisable": {
          "type": "array",
          "position": 0,
          "description": "Flags to disable for the network. A permission check if performed to verify that the user is allowed to disable the flags",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTO",
              "NAT",
              "PROXY",
              "SCANNER",
              "CLIENT",
              "SERVER",
              "DNS",
              "GUEST",
              "UNASSIGNED",
              "DOMAIN_CONTROLLER",
              "SHARED_HOST",
              "UNVERIFIED",
              "HOME_NET",
              "EXCLUDE_HOME_NET",
              "MANAGED_BY_SOC",
              "APPLIANCE",
              "ADCS"
            ]
          }
        },
        "zone": {
          "type": "string",
          "position": 0,
          "description": "Zone of the network",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        }
      },
      "description": "Request model for updating a network"
    },
    "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchRequest": {
      "type": "object",
      "properties": {
        "sortBy": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "customer",
              "domainName",
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "-id",
              "-customer",
              "-domainName",
              "-createdTimestamp",
              "-lastUpdatedTimestamp"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by KeywordFieldStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "domainName",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "The set of sub criteria to add to the search",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria"
          }
        },
        "domainName": {
          "type": "array",
          "position": 0,
          "description": "The set of exact customer domain names to search for",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeSubDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for subdomains of specified domains (default false)",
          "default": false
        },
        "includeSuperDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to search for parent domains of specified domains (default false)",
          "default": false
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to domains with the given customers, identified by id or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "internal",
              "unverified"
            ]
          }
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)"
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search  (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "created",
              "lastUpdated",
              "deleted",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdByUser",
              "lastUpdatedByUser",
              "deletedByUser",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit maximum amount of results (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip specified amount of results (default 0)",
          "minimum": 0,
          "default": 0
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to include deleted domains in the search (default false). Only allowed for users with `viewDeletedCustomerDomains` permission (default false)",
          "default": false
        }
      },
      "description": "A request to search for customer domains"
    },
    "CustomerNetworkLenientBulkAddResponse": {
      "type": "object",
      "properties": {
        "accepted": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of networks that were accepted and added"
        },
        "rejected": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of networks that were rejected and not added"
        },
        "errors": {
          "type": "array",
          "position": 0,
          "description": "Information about networks that were rejected",
          "items": {
            "$ref": "#/definitions/no.mnemonic.jargus.model.CustomerNetworkRecordErrorInformation"
          }
        }
      },
      "description": "Response containing information about the result of the bulk add operation"
    },
    "no.mnemonic.jargus.model.CustomerNetworkRecordErrorInformation": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the add request as it appears in the request"
        },
        "errorMessages": {
          "type": "array",
          "position": 0,
          "description": "Messages for causes of errors",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response containing detailed error information about a failed add operation"
    }
  }
}