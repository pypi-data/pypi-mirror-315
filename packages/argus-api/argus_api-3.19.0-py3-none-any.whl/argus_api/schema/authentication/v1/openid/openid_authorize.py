"""Autogenerated API schema"""
from argus_api import session


add_openid_group_mapping = {'tags': ['authentication/v1/openid'], 'summary': 'Add a group mapping to a OpenID provider (INTERNAL)', 'description': '', 'operationId': 'addOpenIDGroupMapping', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortname', 'in': 'path', 'description': 'ID or shortname of provider to update', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Mapping request', 'required': False, 'schema': {'type': 'object', 'required': ['argusGroup', 'externalGroupName'], 'properties': {'argusGroup': {'type': 'str', 'position': 0, 'description': 'The name or ID of the argus group to map to'}, 'externalGroupName': {'type': 'str', 'position': 0, 'description': 'The name of the group to map from (as it appears in the ID-token group claim)'}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['argusGroup', 'externalGroupName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'argusGroup': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI GroupInfo'}, 'externalGroupName': {'type': 'str', 'position': 0, 'description': 'The external name expected in the ID token'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Invalid arguments'}}}
add_openid_provider = {'tags': ['authentication/v1/openid'], 'summary': 'Define new OpenID provider (INTERNAL)', 'description': '', 'operationId': 'addOpenIDProvider', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Request with provider specifications', 'required': False, 'schema': {'type': 'object', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'name', 'providerURI', 'responseMode', 'responseType', 'scope', 'shortName'], 'properties': {'shortName': {'type': 'str', 'position': 0, 'description': 'Set a shortname for this provider => [a-zA-Z0-9_:\\-\\.]*'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'customer': {'type': 'str', 'position': 0, 'description': 'The id or shortname of the customer this provider is bound to. If customer is a customer group, subcustomer users are also eligible for this provider. If not set, this provider will be domain global.'}, 'domain': {'type': 'str', 'position': 0, 'description': 'The id or shortname of the domain this provider is bound to, if this is a domain-global provider. If not set, customer must be set.'}, 'jwks': {'type': 'str', 'position': 0, 'description': 'Base64-encoding of a valid JWKS file which can be used to verify OpenID tokens. Exactly one of certificate, jwks and jwksURI must be used.', 'minLength': 1, 'maxLength': 2147483647}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS document. Exactly one of certificate, jwks and jwksURI can be used. Setting jwksURI will enable automatic refresh of jwks. => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery document => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'Define a specific issuer to require on id-tokens. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'certificate': {'type': 'str', 'position': 0, 'description': 'A valid X509 certificate which can be used to verify OpenID tokens. Exactly one of certificate, jwks and jwksURI can be used.', 'minLength': 1, 'maxLength': 2147483647}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI for the token endpoint. Required for responseType=code. => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'secret': {'type': 'str', 'position': 0, 'description': 'Define secret to use for the token endpoint. Required for responseType=code'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specify which claim contains the username to map to the external Argus username'}, 'name': {'type': 'str', 'position': 0, 'description': "Specify which claim contains the users real name (single field). The 'name' cannot be set together with 'firstName' and 'lastName'."}, 'firstName': {'type': 'str', 'position': 0, 'description': "Specify which claim contains the users first name. When setting this, 'lastName' must also be set, and 'name' cannot be set."}, 'lastName': {'type': 'str', 'position': 0, 'description': "Specify which claim contains the users last name. When setting this, 'firstName' must also be set, and 'name' cannot be set."}, 'email': {'type': 'str', 'position': 0, 'description': 'Specify which claim contains the users email'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specify which claim contains the users phone'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specify which claim contains the users groups'}}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'Define response type to request from provider (default idToken)', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'responseMode': {'type': 'str', 'position': 0, 'description': 'Define response mode to request from provider (default none)', 'enum': ['none', 'query', 'fragment']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'Define prompt type to request on authorization (default login)', 'enum': ['login', 'consent', 'none']}, 'scope': {'type': 'list', 'position': 0, 'description': 'Define extra scopes to request (in addition to openid) => Sanitize by regex [\\x21\\x5D-\\x7E\\x23-\\x5B]+', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Define email domains for automatic enrollment of users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'newUserMapping': {'type': 'bool', 'position': 0, 'description': 'Option to enable automatic mapping of new users. To map new users, the claims mapping for name and email must be set.'}, 'updateGroupMapping': {'type': 'bool', 'position': 0, 'description': 'Option to enable updates of automatic group mappings. This requires the claims mapping for groups to be set.'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Invalid argument'}}}
delete_openid_group_mapping = {'tags': ['authentication/v1/openid'], 'summary': 'Delete a group mapping from an OpenID provider (INTERNAL)', 'description': '', 'operationId': 'deleteOpenIDGroupMapping', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortname', 'in': 'path', 'description': 'ID or shortname of provider to update', 'required': True, 'type': 'str'}, {'name': 'mappingID', 'in': 'path', 'description': 'The ID of the mapping to delete', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['argusGroup', 'externalGroupName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'argusGroup': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI GroupInfo'}, 'externalGroupName': {'type': 'str', 'position': 0, 'description': 'The external name expected in the ID token'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
delete_openid_provider = {'tags': ['authentication/v1/openid'], 'summary': 'Delete OpenID provider (INTERNAL)', 'description': '', 'operationId': 'deleteOpenIDProvider', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortname', 'in': 'path', 'description': 'ID or shortname of provider to delete', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_openid_provider = {'tags': ['authentication/v1/openid'], 'summary': 'Fetch OpenID provider (INTERNAL)', 'description': '', 'operationId': 'getOpenIDProvider', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortname', 'in': 'path', 'description': 'ID or shortname of provider to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_openid_user_link = {'tags': ['authentication/v1/openid'], 'summary': 'Fetch OpenID provider (INTERNAL)', 'description': '', 'operationId': 'getOpenIDUserLink', 'produces': ['application/json'], 'parameters': [{'name': 'email', 'in': 'query', 'description': 'Request a userlink sent to this email address', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}, '412': {'description': 'If the request is invalid'}}}
list_openid_group_mappings = {'tags': ['authentication/v1/openid'], 'summary': 'List group mappings for a OpenID provider (INTERNAL)', 'description': '', 'operationId': 'listOpenIDGroupMappings', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortname', 'in': 'path', 'description': 'ID or shortname of provider to list mappings for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Limit number of results', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['argusGroup', 'externalGroupName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'argusGroup': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI GroupInfo'}, 'externalGroupName': {'type': 'str', 'position': 0, 'description': 'The external name expected in the ID token'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
list_openid_providers = {'tags': ['authentication/v1/openid'], 'summary': 'List OpenID providers (INTERNAL)', 'description': '', 'operationId': 'listOpenIDProviders', 'produces': ['application/json'], 'parameters': [{'name': 'targetCustomer', 'in': 'query', 'description': 'Limit results to providers which apply to users bound to this customer', 'required': False, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Limit results to providers for this customer (or subcustomers)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywords', 'in': 'query', 'description': 'Limit results to providers matching these keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'sortBy', 'in': 'query', 'description': 'Specify sort order', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'shortName'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit number of results', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Invalid arguments'}}}
openid_authentication = {'tags': ['authentication/v1/openid'], 'summary': 'Submit OpenID token for validation to create a new user session (PUBLIC)', 'description': "The submitted authentication request must contain a valid OpenID token signed by the specified provider, which must contain a 'nonce' claim matching the nonce returned from the pre-authentication endpoint.", 'operationId': 'openIDAuthentication', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'Origin', 'in': 'header', 'description': 'Origin header', 'required': False, 'type': 'string'}, {'name': 'provider', 'in': 'path', 'description': 'ID or shortname of OpenID provider', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'The authentication request', 'required': False, 'schema': {'type': 'object', 'properties': {'idToken': {'type': 'str', 'position': 0, 'description': 'ID token from provider. Required for flow idToken.'}, 'authorizationCode': {'type': 'str', 'position': 0, 'description': 'Authorization code provider. Required for flow authorizationCode.'}, 'flow': {'type': 'str', 'position': 0, 'description': 'The flow to use. If set to authorizationCode, follow the authorization code flow, and the authorizationCode field must be set. If set to idToken, follow the implicit flow, and the idToken must be set (default). (default idToken)', 'enum': ['authorizationCode', 'idToken']}, 'requestedAuthorizations': {'type': 'list', 'position': 0, 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['enrollPublicKey', 'setPassword']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'dict', 'properties': {'uri': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}}}, 'sessionKey': {'type': 'str', 'position': 0, 'description': 'The symmetric key created for this session'}, 'authorizations': {'type': 'list', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}}}}, '221': {'description': 'Session created, password change required', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'object', 'properties': {'uri': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}}}, 'sessionKey': {'type': 'string', 'position': 0, 'description': 'The symmetric key created for this session'}, 'authorizations': {'type': 'array', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'uniqueItems': True, 'items': {'type': 'object', 'properties': {'operation': {'type': 'string', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'string', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'string', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '412': {'description': 'Validation error'}}}
openid_pre_authentication = {'tags': ['authentication/v1/openid'], 'summary': 'Request redirect URI to OpenID provider (PUBLIC)', 'description': '', 'operationId': 'openIDPreAuthentication', 'produces': ['application/json'], 'parameters': [{'name': 'provider', 'in': 'path', 'description': 'ID or shortname of OpenID provider', 'required': True, 'type': 'str'}, {'name': 'state', 'in': 'query', 'description': 'State to retain', 'required': False, 'type': 'str'}, {'name': 'Origin', 'in': 'header', 'description': 'Origin header', 'required': False, 'type': 'string'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI that the client should redirect to for authentication'}, 'nonce': {'type': 'str', 'position': 0, 'description': 'The random nonce which is also a part of the providerURI'}}}}}}, '412': {'description': 'Invalid argument'}, '429': {'description': 'Too many pending requests'}}}
request_openid_authorization_redirect = {'tags': ['authentication/v1/openid'], 'summary': 'Register a user authorization request, and request a redirect to the OpenID Identity Provider to validate user presence. (INTERNAL)', 'description': 'This endpoint requires that the current user is logged in using OpenID authentication. Even if the user has OPENID authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'requestOpenIDAuthorizationRedirect', 'produces': ['application/json'], 'parameters': [{'name': 'Origin', 'in': 'header', 'required': False, 'type': 'string'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['nextURI', 'operation'], 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'The name of the operation to authorize'}, 'context': {'type': 'dict', 'position': 0, 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.', 'additionalProperties': {'type': 'string'}}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect/route to after successful authorization. The URI will be validated according to policy. The authorization token returned from successful authorization should be appended as a query parameter to this URI.'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'providerURI': {'type': 'str', 'position': 0, 'description': 'The providerURI to redirect the user to'}, 'stateID': {'type': 'str', 'position': 0, 'description': 'The stateID to pass to the OpenID provider'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
search_openid_providers = {'tags': ['authentication/v1/openid'], 'summary': 'Search OpenID providers (INTERNAL)', 'description': '', 'operationId': 'searchOpenIDProviders', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search request', 'required': False, 'schema': {'type': 'object', 'properties': {'targetCustomer': {'type': 'str', 'position': 0, 'description': 'Limit result to providers which are usable for users bound to this customer (by customer ID or shortname)'}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit result by customer ID or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Match providers by keywords', 'uniqueItems': True, 'items': {'type': 'string'}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit the number of results (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first results, in sort order (default 0)', 'minimum': 0, 'default': 0}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Specify sort order (default shortName)', 'items': {'type': 'str', 'enum': ['id', 'name', 'shortName', 'createdTimestamp', 'lastUpdatedTimestamp', '-id', '-name', '-shortName', '-createdTimestamp', '-lastUpdatedTimestamp']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Invalid arguments'}}}
submit_openid_authorization = {'tags': ['authentication/v1/openid'], 'summary': 'Receive the ID token redirect response for a pending User Authorization (INTERNAL)', 'description': 'The client must have used the authorize/redirect endpoint first to register the pending authorization request. If successful, this endpoint will return a user authorization token for the registered operation.', 'operationId': 'submitOpenIDAuthorization', 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['idToken', 'stateID'], 'properties': {'stateID': {'type': 'str', 'position': 0, 'description': 'The OpenID state identifier'}, 'idToken': {'type': 'str', 'position': 0, 'description': 'The ID token returned by the OpenID Provider'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
update_openid_provider = {'tags': ['authentication/v1/openid'], 'summary': 'Update OpenID provider (INTERNAL)', 'description': '', 'operationId': 'updateOpenIDProvider', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortname', 'in': 'path', 'description': 'ID or shortname of provider to update', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Update request', 'required': False, 'schema': {'type': 'object', 'properties': {'shortName': {'type': 'str', 'position': 0, 'description': 'If set, update the shortname for this provider => [a-zA-Z0-9_:\\-\\.]*'}, 'name': {'type': 'str', 'position': 0, 'description': 'If set, update the name for this provider => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'If set, update the OAuth ClientID for this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'If set, update the OpenID Issuer to require for this provider. Use blank string "" to reset to default.'}, 'jwks': {'type': 'str', 'position': 0, 'description': 'If set, update the JWKS for this provider. Must be Base64-encoding of a valid JWKS file. Exactly one of certificate, jwks and jwksURI can be used. Setting jwks will clear certificate and disable automatic refresh of jwks.', 'minLength': 1, 'maxLength': 2147483647}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'If set, update the URI to the OpenID JWKS document. Exactly one of certificate, jwks and jwksURI can be used. Setting jwksURI will clear certificate and enable automatic refresh of jwks. => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'If set, update the URI to the OpenID autodiscovery document => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'certificate': {'type': 'str', 'position': 0, 'description': 'If set, update the X509 certificate for this provider. This will remove any stored jwks.', 'minLength': 1, 'maxLength': 2147483647}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'If set, update the authorization URI for this provider => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'If set, update the token URI for this provider => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)'}, 'secret': {'type': 'str', 'position': 0, 'description': 'If set, update the secret for use with the token URI for this provider'}, 'responseType': {'type': 'str', 'position': 0, 'description': 'If set, update the response type to request from provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'responseMode': {'type': 'str', 'position': 0, 'description': 'If set, update the response type to request from provider', 'enum': ['none', 'query', 'fragment']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'If set, update the prompt to request from provider on authorization requests', 'enum': ['login', 'consent', 'none']}, 'claimsMapping': {'type': 'dict', 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'If set, specify which claim contains the username to map to the external Argus username'}, 'name': {'type': 'str', 'position': 0, 'description': "If set, specify which claim contains the users real name (single field). The 'name' cannot be set together with 'firstName' and 'lastName'. Blank space will clear the field."}, 'firstName': {'type': 'str', 'position': 0, 'description': "If set, specify which claim contains the users first name. When setting this, 'lastName' must also be set, and 'name' cannot be set. Blank space will clear the field."}, 'lastName': {'type': 'str', 'position': 0, 'description': "If set, specify which claim contains the users last name.  When setting this, 'firstName' must also be set, and 'name' cannot be set. Blank space will clear the field."}, 'email': {'type': 'str', 'position': 0, 'description': 'If set, specify which claim contains the users email. Blank space will clear the field.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'If set, specify which claim contains the users phone. Blank space will clear the field.'}, 'groups': {'type': 'str', 'position': 0, 'description': 'If set, specify which claim contains the users groups. Blank space will clear the field.'}}}, 'scope': {'type': 'list', 'position': 0, 'description': 'If set, change the scopes to request from this provider => Sanitize by regex [\\x21\\x5D-\\x7E\\x23-\\x5B]+', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'If set, change the email domains for automatic enrollment of users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'newUserMapping': {'type': 'bool', 'position': 0, 'description': 'If set, enable/disable option to enable automatic user mapping. To map new users, the claims mapping for name and email must be set.'}, 'updateGroupMapping': {'type': 'bool', 'position': 0, 'description': 'If set, enable/disable option to enable updates of automatic group mappings. This requires the claims mapping for groups to be set.'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['authorizationPrompt', 'claimsMapping', 'clientID', 'configurationURI', 'createdByUser', 'createdTimestamp', 'deletedTimestamp', 'domain', 'emailDomains', 'flags', 'id', 'jwksURI', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'providerURI', 'responseType', 'scope', 'shortName'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname for this provider'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this provider'}, 'clientID': {'type': 'str', 'position': 0, 'description': 'The OAuth ClientID of this provider'}, 'issuer': {'type': 'str', 'position': 0, 'description': 'The expected issuer for this provider. If not set, the issuer is expected to be a prefix of the providerURI.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'providerURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect to to initiate OpenID authentication flow'}, 'tokenURI': {'type': 'str', 'position': 0, 'description': 'The URI to fetch tokens for authorization code flow.'}, 'jwksURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID JWKS'}, 'configurationURI': {'type': 'str', 'position': 0, 'description': 'The URI to the OpenID autodiscovery URI'}, 'claimsMapping': {'type': 'dict', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the username to map to the external Argus username'}, 'groups': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the list of groups to use for group mapping'}, 'name': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users real name'}, 'firstName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users first name. Claims firstName/lastName are used instead of the name claim.'}, 'lastName': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users last name. Claims firstName/lastName are used instead of the name claim.'}, 'phone': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users phone number'}, 'email': {'type': 'str', 'position': 0, 'description': 'Specifies which claim contains the users email'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was created'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was last updated'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this provider was deleted, or 0'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Any flags set on this object', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'hasCertificate', 'hasStaticJwks', 'automaticJwksRefresh', 'newUserMapping', 'updateGroupMapping']}}, 'scope': {'type': 'list', 'position': 0, 'description': 'Extra scopes configured for this provider', 'uniqueItems': True, 'items': {'type': 'string'}}, 'emailDomains': {'type': 'list', 'position': 0, 'description': 'Email domains used for automatic user enrollment', 'uniqueItems': True, 'items': {'type': 'string'}}, 'responseType': {'type': 'str', 'position': 0, 'description': 'The configured response type which is requested from the provider', 'enum': ['token', 'idToken', 'idTokenAndToken', 'code']}, 'authorizationPrompt': {'type': 'str', 'position': 0, 'description': 'The prompt type to request on authorization', 'enum': ['login', 'consent', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Invalid arguments'}}}
#: "add_open_id_provider" is an alias for "add_openid_provider"
add_open_id_provider = add_openid_provider
#: "delete_open_id_provider" is an alias for "delete_openid_provider"
delete_open_id_provider = delete_openid_provider
#: "get_open_id_provider" is an alias for "get_openid_provider"
get_open_id_provider = get_openid_provider
#: "list_open_id_providers" is an alias for "list_openid_providers"
list_open_id_providers = list_openid_providers
#: "open_id_authentication" is an alias for "openid_authentication"
open_id_authentication = openid_authentication
#: "open_id_pre_authentication" is an alias for "openid_pre_authentication"
open_id_pre_authentication = openid_pre_authentication
#: "search_open_id_providers" is an alias for "search_openid_providers"
search_open_id_providers = search_openid_providers
#: "update_open_id_provider" is an alias for "update_openid_provider"
update_open_id_provider = update_openid_provider