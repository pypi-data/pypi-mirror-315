"""Autogenerated API schema"""
from argus_api import session


list_events_by_case = {'tags': ['development'], 'summary': 'Lists events associated with the case (DEV)', 'description': '', 'operationId': 'listEventsByCaseV2', 'produces': ['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/jsonl'], 'parameters': [{'name': 'Accept', 'in': 'header', 'required': False, 'type': 'string'}, {'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'includeAllProperties', 'in': 'query', 'description': "Whether to include all properties of events (overrides the selection of 'includeProperties' if set to true).", 'required': False, 'type': 'bool', 'default': False}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include comments of events.', 'required': False, 'type': 'bool', 'default': False}, {'name': 'includeSubEvents', 'in': 'query', 'description': "Whether to include sub-events' IDs.", 'required': False, 'type': 'bool', 'default': False}, {'name': 'includeProperties', 'in': 'query', 'description': 'Which event properties to include (if includeAllProperties=false).', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'sortBy', 'in': 'query', 'description': "Fields to sort events by (without sign is ascending, with '-' sign is descending).", 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-timestamp'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'The max amount of events to return (0 means no limit)', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The amount of events to skip from the beginning', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'uuid': {'type': 'str', 'position': 0, 'description': 'UUID of the event.'}, 'type': 'str', 'source': {'type': 'dict', 'properties': {'address': {'type': 'str', 'position': 0, 'description': 'IP address of the endpoint.'}, 'host': {'type': 'str', 'position': 0, 'description': 'Host name of the endpoint.'}, 'port': {'type': 'int', 'position': 0, 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'str', 'position': 0, 'description': 'User associated with this endpoint.'}, 'geoInfo': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'position': 0, 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'str', 'position': 0, 'description': 'Name of the country where this location is in.'}, 'locationName': {'type': 'str', 'position': 0, 'description': 'Name of the location.'}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Geographic latitude of the location.'}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Geographic longitude of the location.'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Enumerated flags describing the features of the endpoint.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}}}}, 'destination': {'type': 'dict', 'properties': {'address': {'type': 'str', 'position': 0, 'description': 'IP address of the endpoint.'}, 'host': {'type': 'str', 'position': 0, 'description': 'Host name of the endpoint.'}, 'port': {'type': 'int', 'position': 0, 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'str', 'position': 0, 'description': 'User associated with this endpoint.'}, 'geoInfo': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'position': 0, 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'str', 'position': 0, 'description': 'Name of the country where this location is in.'}, 'locationName': {'type': 'str', 'position': 0, 'description': 'Name of the location.'}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Geographic latitude of the location.'}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Geographic longitude of the location.'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Enumerated flags describing the features of the endpoint.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the customer.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the location.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the location.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the location.'}}}, 'signature': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name/ID of the signature.'}}}, 'alarm': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the alarm.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the alarm.'}, 'description': {'type': 'str', 'position': 0, 'description': 'Short description about the alarm.'}}}, 'attackCategory': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the attack category.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the attack category.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the attack category.'}}}, 'domain': {'type': 'str', 'position': 0, 'description': 'Fully qualified domain name associated with the event.'}, 'uri': {'type': 'str', 'position': 0, 'description': 'URI associated with the event.'}, 'count': {'type': 'int', 'position': 0, 'description': 'Count of aggregate events, always 1 for raw events'}, 'severity': {'type': 'str', 'position': 0, 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'timestamps': {'type': 'dict', 'properties': {'created': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of the event.'}, 'lastUpdated': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of the event (only for aggregated events).'}, 'firstEvent': {'type': 'int', 'position': 0, 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'lastEvent': {'type': 'int', 'position': 0, 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'enginePersisted': {'type': 'int', 'position': 0, 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'int', 'position': 0, 'description': 'Timestamp when the event was first assessed.'}, 'firstNotified': {'type': 'int', 'position': 0, 'description': 'Timestamp of the case association with the event.'}}}, 'sensor': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the device.'}, 'hostName': {'type': 'str', 'position': 0, 'description': 'Host name of the device.'}, 'ip': {'type': 'str', 'position': 0, 'description': 'IP address of the device.'}}}, 'protocol': {'type': 'str', 'position': 0, 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'associatedCases': {'type': 'list', 'position': 0, 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the associated case.'}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of the case.'}, 'categoryID': {'type': 'int', 'position': 0, 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'str', 'position': 0, 'description': 'Category name of the case.'}, 'serviceID': {'type': 'int', 'position': 0, 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'str', 'position': 0, 'description': 'Service name of the case.'}, 'status': {'type': 'str', 'position': 0, 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'priority': {'type': 'str', 'position': 0, 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}}}}, 'subEvents': {'type': 'list', 'position': 0, 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'properties': {'type': 'list', 'position': 0, 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Key of the property.'}, 'type': 'str', 'values': {'type': 'list', 'position': 0, 'description': 'Value(s) of the property.', 'items': {'type': 'string'}}, 'options': ['boolean', 'long', 'string', 'double']}}}, 'comments': {'type': 'list', 'position': 0, 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'dict', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'Contents of the comment.'}, 'user': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the user.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the user.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the user.'}}}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the comment was created.'}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Enumerated flags describing the features of the event.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed']}}, 'options': ['aggregated', 'raw']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}