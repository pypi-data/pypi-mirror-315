"""Autogenerated API schema"""
from argus_api import session


delete_data_store_entries = {'tags': ['datastores/v1'], 'summary': 'Deletes the provided datastore entries from the specified store. (PUBLIC)', 'description': "This operation marks entries as deleted. They are not permanently removed and can be retrieved using the 'includeDeleted' parameter.", 'operationId': 'deleteDataStoreEntries', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'name': 'key', 'in': 'query', 'description': 'Entries to delete from the specified store', 'required': True, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi', 'maxItems': 2147483647, 'minItems': 1}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entries belong to (defaults to the user's customer)", 'required': False, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'value': {'type': 'str', 'position': 0, 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'A datastore entry is one item stored inside a datastore.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
get_entries_from_store = {'tags': ['datastores/v1'], 'summary': 'Returns datastore entries for the specified store, matching the search criteria. (PUBLIC)', 'description': '', 'operationId': 'getEntriesFromStore', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userID': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries which were last updated by specified users.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'key': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with the specified keys.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'fromKey': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries (map keys) which are greater than this key (including, by lexical order).'}, 'toKey': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries (map keys) which are less than this key (including, by lexical order).'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries which were last updated after this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries which were last updated before this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ'}, 'countTimeout': {'type': 'int', 'position': 0, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is 0. (default 0)', 'minimum': -1, 'maximum': 30, 'default': 0}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['key', 'lastUpdatedTimestamp', '-key', '-lastUpdatedTimestamp']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'Criteria to search for entries inside one datastore.'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userID': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries which were last updated by specified users.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'key': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with the specified keys.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'fromKey': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries (map keys) which are greater than this key (including, by lexical order).'}, 'toKey': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries (map keys) which are less than this key (including, by lexical order).'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries which were last updated after this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to entries which were last updated before this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ'}, 'countTimeout': {'type': 'int', 'position': 0, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is 0. (default 0)', 'minimum': -1, 'maximum': 30, 'default': 0}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['key', 'lastUpdatedTimestamp', '-key', '-lastUpdatedTimestamp']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'Criteria to search for entries inside one datastore.'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'value': {'type': 'str', 'position': 0, 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'A datastore entry is one item stored inside a datastore.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
get_entries_from_store_simplified = {'tags': ['datastores/v1'], 'summary': 'Returns datastore entries for the specified store, matching query parameters. (PUBLIC)', 'description': '', 'operationId': 'getEntriesFromStoreSimplified', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'customerID', 'in': 'query', 'description': 'Limit search to entries belonging to the specified customers', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'key', 'in': 'query', 'description': 'Limit search to the specified entry keys', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'Include deleted/expired entries', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'value': {'type': 'str', 'position': 0, 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'A datastore entry is one item stored inside a datastore.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
get_single_entry = {'tags': ['datastores/v1'], 'summary': 'Returns the specified datastore entry for the specified store, or null if it does not exist (PUBLIC)', 'description': '', 'operationId': 'getSingleEntry', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'name': 'key', 'in': 'path', 'description': 'Key to identify entry', 'required': True, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entry belongs to (defaults to the user's customer)", 'required': False, 'type': 'int'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'Return deleted/expired entry', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'value': {'type': 'str', 'position': 0, 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'A datastore entry is one item stored inside a datastore.'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
put_data_store_entries = {'tags': ['datastores/v1'], 'summary': 'Adds or updates the provided datastore entries for the specified store. (PUBLIC)', 'description': 'Previously unknown entries will be added to the store. The value of existing entries will be updated.', 'operationId': 'putDataStoreEntries', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying entries to add/update', 'required': False, 'schema': {'type': 'object', 'required': ['entries'], 'properties': {'customerID': {'type': 'int', 'position': 0, 'description': "Entries will be bound to the provided customer. If not set, defaults to bind to the current user's customer (or none, if the datastore is global).", 'minimum': 0}, 'entries': {'type': 'list', 'position': 0, 'description': 'Entries to add/update. If an entry for a given customer and key already exists the entry will be updated. Otherwise, a new entry will be added.', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['key'], 'properties': {'value': {'type': 'str', 'position': 0, 'description': 'Map value. Not valid when writing entries to datastores of type LIST.', 'readOnly': True, 'minLength': 0, 'maxLength': 2048}, 'key': {'type': 'str', 'position': 0, 'description': 'List entry or map key.', 'minLength': 0, 'maxLength': 255}}, 'description': 'Add/update a single entry of a datastore.'}, 'maxItems': 2147483647, 'minItems': 1}}, 'description': 'Request to add/update multiple entries of a datastore.'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'value': {'type': 'str', 'position': 0, 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'A datastore entry is one item stored inside a datastore.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
put_single_data_store_list_entry = {'tags': ['datastores/v1'], 'summary': 'Adds the provided datastore entry to the specified store. (PUBLIC)', 'description': 'This operation should only be used with datastores of type LIST.', 'operationId': 'putSingleDataStoreListEntry', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'name': 'key', 'in': 'path', 'description': 'Entry to add to the specified store', 'required': True, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entry belongs to (defaults to the user's customer)", 'required': False, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
put_single_data_store_map_entry = {'tags': ['datastores/v1'], 'summary': 'Updates the provided datastore entry for the specified store. (PUBLIC)', 'description': 'This operation should only be used with datastores of type MAP.', 'operationId': 'putSingleDataStoreMapEntry', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'name': 'key', 'in': 'path', 'description': 'Key to identify entry', 'required': True, 'type': 'str'}, {'name': 'value', 'in': 'path', 'description': 'Value to set for the specified entry', 'required': True, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entry belongs to (defaults to the user's customer)", 'required': False, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['dataStoreName', 'key'], 'properties': {'dataStoreName': {'type': 'str', 'position': 0, 'description': 'Name of the datastore this entry belongs to.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this entry.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'key': {'type': 'str', 'position': 0, 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'value': {'type': 'str', 'position': 0, 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}, 'description': 'A datastore entry is one item stored inside a datastore.'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Datastore not found'}, '412': {'description': 'Validation error'}}}
#: "put_single_data_store_entry" is an alias for "put_single_data_store_list_entry"
put_single_data_store_entry = put_single_data_store_list_entry
#: "put_single_data_store_entry_1" is an alias for "put_single_data_store_map_entry"
put_single_data_store_entry_1 = put_single_data_store_map_entry