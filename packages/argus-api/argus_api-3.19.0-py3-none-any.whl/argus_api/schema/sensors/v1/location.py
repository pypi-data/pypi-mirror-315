"""Autogenerated API schema"""
from argus_api import session


create_location = {'tags': ['sensors/v1'], 'summary': 'Creates a location (INTERNAL)', 'description': '', 'operationId': 'createLocation', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': "Create request for a sensor's location.", 'required': False, 'schema': {'type': 'object', 'required': ['customerID', 'name', 'shortName', 'timeZoneDescription'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of some physical Location => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of some physical Location => [a-zA-Z0-9_:\\-\\.]*'}, 'networkZone': {'type': 'str', 'position': 0, 'description': 'Network zone for some physical Location', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customerID': {'type': 'int', 'position': 0, 'description': 'CustomerID for some physical Location', 'minimum': 0}, 'timeZoneDescription': {'type': 'str', 'position': 0, 'description': 'TimeZone description for some physical Location (default Europe/Oslo)'}}, 'description': 'Request to create a Location'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'internal': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'dmz': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the Location'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The unique shortname of the Location'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was last updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the location was deleted, 0 if active'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}}, 'description': 'Location SPI model class for a physical location'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_location = {'tags': ['sensors/v1'], 'summary': 'Deletes location (INTERNAL)', 'description': '', 'operationId': 'deleteLocation', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of location to delete', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'internal': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'dmz': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the Location'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The unique shortname of the Location'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was last updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the location was deleted, 0 if active'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}}, 'description': 'Location SPI model class for a physical location'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Location not found'}, '412': {'description': 'Validation error'}}}
find_locations = {'tags': ['sensors/v1'], 'summary': 'Search locations (INTERNAL)', 'description': '', 'operationId': 'findLocations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'searchString': {'type': 'str', 'position': 0, 'description': 'DEPRECATED: Deprecated. Use keywords.'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for Locations by exact match on these keywords', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strictly different keywords should be matched (default match any keywords) (default any)', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (defaults to all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'id', 'name', 'shortName']}}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp). (default 0)'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp). (default 0)'}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['all', 'any']}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'createdTimestamp', 'lastUpdatedTimestamp', 'deletedTimestamp']}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search for Locations by associated user IDs or short names defined by the UserFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields to filter with the submitted user value(s) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'createdByUser', 'lastUpdatedByUser', 'deletedByUser']}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Search for Locations belonging to customers identified by their ID or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeGlobal': {'type': 'bool', 'position': 0, 'description': 'Include global locations with results regardless of other criteria (default true)', 'default': True}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}}, 'description': 'Search criteria for Sensor Locations'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'searchString': {'type': 'str', 'position': 0, 'description': 'DEPRECATED: Deprecated. Use keywords.'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for Locations by exact match on these keywords', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strictly different keywords should be matched (default match any keywords) (default any)', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (defaults to all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'id', 'name', 'shortName']}}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp). (default 0)'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp). (default 0)'}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['all', 'any']}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'createdTimestamp', 'lastUpdatedTimestamp', 'deletedTimestamp']}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search for Locations by associated user IDs or short names defined by the UserFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields to filter with the submitted user value(s) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'createdByUser', 'lastUpdatedByUser', 'deletedByUser']}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Search for Locations belonging to customers identified by their ID or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeGlobal': {'type': 'bool', 'position': 0, 'description': 'Include global locations with results regardless of other criteria (default true)', 'default': True}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}}, 'description': 'Search criteria for Sensor Locations'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'internal': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'dmz': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the Location'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The unique shortname of the Location'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was last updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the location was deleted, 0 if active'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}}, 'description': 'Location SPI model class for a physical location'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_location = {'tags': ['sensors/v1'], 'summary': 'Fetch Location by ID or short name (INTERNAL)', 'description': '', 'operationId': 'getLocation', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of location to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'internal': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'dmz': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the Location'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The unique shortname of the Location'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was last updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the location was deleted, 0 if active'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}}, 'description': 'Location SPI model class for a physical location'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_locations = {'tags': ['sensors/v1'], 'summary': 'List locations (INTERNAL)', 'description': '', 'operationId': 'listLocations', 'produces': ['application/json'], 'parameters': [{'name': 'customerID', 'in': 'query', 'description': 'Limit search to these customer IDs', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Offset results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'includeGlobal', 'in': 'query', 'description': 'Include global locations', 'required': False, 'type': 'bool', 'default': False}, {'name': 'includeDeleted', 'in': 'query', 'description': 'Include deleted locations', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'internal': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'dmz': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the Location'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The unique shortname of the Location'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was last updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the location was deleted, 0 if active'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}}, 'description': 'Location SPI model class for a physical location'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
update_location = {'tags': ['sensors/v1'], 'summary': 'Updates location (INTERNAL)', 'description': '', 'operationId': 'updateLocation', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of location to update', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': "Update request for a sensor's location.", 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'New name for the Location => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'New short name for the Location => [a-zA-Z0-9_:\\-\\.]*'}, 'networkZone': {'type': 'str', 'position': 0, 'description': 'New network zone for the location', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'timeZoneIdOrName': {'type': 'str', 'position': 0, 'description': 'New TimeZone for the Location'}}, 'description': 'Request to update an existing Location'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'internal': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'dmz': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the Location'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The unique shortname of the Location'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL', 'DELETED']}}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the Location was last updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the location was deleted, 0 if active'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}}, 'description': 'Location SPI model class for a physical location'}}}}, '220': {'description': 'No update performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}