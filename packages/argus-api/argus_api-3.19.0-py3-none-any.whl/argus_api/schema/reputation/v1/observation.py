"""Autogenerated API schema"""
from argus_api import session


add_observations = {'tags': ['reputation/v1'], 'summary': 'Add reputation observations (INTERNAL)', 'description': '', 'operationId': 'addObservations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Observation add request', 'required': False, 'schema': {'type': 'object', 'required': ['observations'], 'properties': {'sourceID': {'type': 'int', 'position': 0, 'description': "The source's ID."}, 'sourceAlias': {'type': 'str', 'position': 0, 'description': "The source's globally unique alias."}, 'addAddresses': {'type': 'bool', 'position': 0, 'description': 'Whether to add addresses (default true)', 'default': True}, 'addDomains': {'type': 'bool', 'position': 0, 'description': 'Whether to add domains (default true)', 'default': True}, 'observations': {'type': 'list', 'position': 0, 'description': 'Observations to add. Invalid observations will be rejected but not fail the entire request.', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'domain': {'type': 'str', 'position': 0, 'description': "The host's domain name."}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'When the host was first observed.'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'When the host was most recently observed.'}, 'observationCount': {'type': 'int', 'position': 0, 'description': 'Number of times the host has been observed'}, 'comment': {'type': 'str', 'position': 0, 'description': 'Any comment for this observation.No validation performed on the contents other than truncating for max length. Clients cannot make any assumptions as to the contents and should therefore escape everything when rendering.', 'minLength': 0, 'maxLength': 2048}}, 'description': 'An observation of a host, identified by IP address and / or domain name.'}, 'maxItems': 2147483647, 'minItems': 1}}, 'description': 'A request to add Observations from a given Source.'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'newCount': {'type': 'int', 'position': 0, 'description': 'The number of new Observations created by the add operation.'}, 'continueCount': {'type': 'int', 'position': 0, 'description': 'The number of existing Observations continued by the add operation.'}, 'awakenCount': {'type': 'int', 'position': 0, 'description': 'The number of existing Observations awakened by the add operation.'}, 'skipCount': {'type': 'int', 'position': 0, 'description': 'The number of Observations skipped by the add operation.'}, 'rejectedObservations': {'type': 'list', 'position': 0, 'description': 'Observations rejected during the add operation.', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'rejectReasons': {'type': 'list', 'items': {'type': 'string'}}, 'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'domain': {'type': 'str', 'position': 0, 'description': "The host's domain name."}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'When the host was first observed.'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'When the host was most recently observed.'}, 'observationCount': {'type': 'int', 'position': 0, 'description': 'Number of times the host has been observed'}, 'comment': {'type': 'str', 'position': 0, 'description': 'Any comment for this observation.No validation performed on the contents other than truncating for max length. Clients cannot make any assumptions as to the contents and should therefore escape everything when rendering.', 'minLength': 0, 'maxLength': 2048}, 'reason': {'type': 'str', 'position': 0, 'description': "The Enumerated Reason why an Observation was rejected. Whitelisted: The Observation's domain/address is whitelisted. Invalid: At least one of the Observation's fields' contents failed validation. Obsolete: The Observation is older than an existing one for the same domain/address. Customer Network: The (Address) Observation is for a known customer network.", 'enum': ['WHITELISTED', 'INVALID', 'OBSOLETE', 'CUSTOMER_NETWORK']}}, 'description': 'A rejected Observation.'}}, 'whitelistedObservations': {'type': 'list', 'position': 0, 'description': 'Observations whitelisted during the add operation.', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'rejectReasons': {'type': 'list', 'items': {'type': 'string'}}, 'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'domain': {'type': 'str', 'position': 0, 'description': "The host's domain name."}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'When the host was first observed.'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'When the host was most recently observed.'}, 'observationCount': {'type': 'int', 'position': 0, 'description': 'Number of times the host has been observed'}, 'comment': {'type': 'str', 'position': 0, 'description': 'Any comment for this observation.No validation performed on the contents other than truncating for max length. Clients cannot make any assumptions as to the contents and should therefore escape everything when rendering.', 'minLength': 0, 'maxLength': 2048}, 'reason': {'type': 'str', 'position': 0, 'description': "The Enumerated Reason why an Observation was rejected. Whitelisted: The Observation's domain/address is whitelisted. Invalid: At least one of the Observation's fields' contents failed validation. Obsolete: The Observation is older than an existing one for the same domain/address. Customer Network: The (Address) Observation is for a known customer network.", 'enum': ['WHITELISTED', 'INVALID', 'OBSOLETE', 'CUSTOMER_NETWORK']}}, 'description': 'A rejected Observation.'}}, 'skippedObservations': {'type': 'list', 'position': 0, 'description': 'Observations skipped during the add operation.', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'rejectReasons': {'type': 'list', 'items': {'type': 'string'}}, 'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'domain': {'type': 'str', 'position': 0, 'description': "The host's domain name."}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'When the host was first observed.'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'When the host was most recently observed.'}, 'observationCount': {'type': 'int', 'position': 0, 'description': 'Number of times the host has been observed'}, 'comment': {'type': 'str', 'position': 0, 'description': 'Any comment for this observation.No validation performed on the contents other than truncating for max length. Clients cannot make any assumptions as to the contents and should therefore escape everything when rendering.', 'minLength': 0, 'maxLength': 2048}, 'reason': {'type': 'str', 'position': 0, 'description': "The Enumerated Reason why an Observation was rejected. Whitelisted: The Observation's domain/address is whitelisted. Invalid: At least one of the Observation's fields' contents failed validation. Obsolete: The Observation is older than an existing one for the same domain/address. Customer Network: The (Address) Observation is for a known customer network.", 'enum': ['WHITELISTED', 'INVALID', 'OBSOLETE', 'CUSTOMER_NETWORK']}}, 'description': 'A rejected Observation.'}}}, 'description': 'Value object for reporting the result of adding an Observation back to the caller'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_observations = {'tags': ['reputation/v1'], 'summary': 'Delete reputation observations (INTERNAL)', 'description': '', 'operationId': 'deleteObservations', 'produces': ['application/json'], 'parameters': [{'name': 'sourceID', 'in': 'query', 'description': 'Source ID', 'required': False, 'type': 'int', 'default': 0}, {'name': 'sourceAlias', 'in': 'query', 'description': 'Source alias', 'required': False, 'type': 'str'}, {'name': 'address', 'in': 'query', 'description': 'IP Addresses', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'fqdn', 'in': 'query', 'description': 'Domain names', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
fetch_observations_for_domain = {'tags': ['reputation/v1'], 'summary': 'Look up reputation observations for the given domain (INTERNAL)', 'description': '', 'operationId': 'fetchObservationsForDomain', 'produces': ['application/json'], 'parameters': [{'name': 'fqdn', 'in': 'path', 'description': 'Domain to fetch observations for', 'required': True, 'type': 'str'}, {'name': 'countMaxWait', 'in': 'query', 'description': 'Max wait time for result count calculation. 0 equates to unlimited wait and -1 to skip counting altogether. Defaults to 2 seconds.', 'required': False, 'type': 'int', 'minimum': -1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'description': 'An observation for a domain name'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
fetch_observations_for_ip = {'tags': ['reputation/v1'], 'summary': 'Look up reputation observations for the given IP (INTERNAL)', 'description': '', 'operationId': 'fetchObservationsForIP', 'produces': ['application/json'], 'parameters': [{'name': 'ip', 'in': 'path', 'description': 'IP address to fetch observations for', 'required': True, 'type': 'str'}, {'name': 'countMaxWait', 'in': 'query', 'description': 'Max wait time for result count calculation. 0 equates to unlimited wait and -1 to skip counting altogether. Defaults to 2 seconds.', 'required': False, 'type': 'int', 'minimum': -1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'address': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'description': 'An Observation for an IP address'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
find_address_observations = {'tags': ['reputation/v1'], 'summary': 'Search for IP observations (INTERNAL)', 'description': '', 'operationId': 'findAddressObservations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'minimumState': {'type': 'int', 'position': 0, 'description': 'Filter results by observations with at least this state'}, 'minimumConfidence': {'type': 'float', 'position': 0, 'description': 'Filter results by observations with at least this confidence'}, 'sourceID': {'type': 'list', 'position': 0, 'description': 'Filter results by observations from these sources', 'uniqueItems': True, 'items': {'type': 'int'}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated >= this timestamp'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated <= this timestamp'}, 'countMaxWait': {'type': 'int', 'position': 0, 'description': 'How many seconds to wait for count calculation to complete. -1: Skip counting altogether to return search results immediately. 0: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.', 'minimum': -1}, 'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'afterAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'addresses': {'type': 'list', 'position': 0, 'description': 'Filter results by these IP addresses', 'items': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['id', 'address', 'lastModified', 'source', 'role', '-id', '-address', '-lastModified', '-source', '-role']}}}, 'description': 'Search criteria for observations for matching IP addresses'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'minimumState': {'type': 'int', 'position': 0, 'description': 'Filter results by observations with at least this state'}, 'minimumConfidence': {'type': 'float', 'position': 0, 'description': 'Filter results by observations with at least this confidence'}, 'sourceID': {'type': 'list', 'position': 0, 'description': 'Filter results by observations from these sources', 'uniqueItems': True, 'items': {'type': 'int'}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated >= this timestamp'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated <= this timestamp'}, 'countMaxWait': {'type': 'int', 'position': 0, 'description': 'How many seconds to wait for count calculation to complete. -1: Skip counting altogether to return search results immediately. 0: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.', 'minimum': -1}, 'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'afterAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'addresses': {'type': 'list', 'position': 0, 'description': 'Filter results by these IP addresses', 'items': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['id', 'address', 'lastModified', 'source', 'role', '-id', '-address', '-lastModified', '-source', '-role']}}}, 'description': 'Search criteria for observations for matching IP addresses'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'address': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'description': 'An Observation for an IP address'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
find_domain_observations = {'tags': ['reputation/v1'], 'summary': 'Search for domain observations (INTERNAL)', 'description': '', 'operationId': 'findDomainObservations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'minimumState': {'type': 'int', 'position': 0, 'description': 'Filter results by observations with at least this state'}, 'minimumConfidence': {'type': 'float', 'position': 0, 'description': 'Filter results by observations with at least this confidence'}, 'sourceID': {'type': 'list', 'position': 0, 'description': 'Filter results by observations from these sources', 'uniqueItems': True, 'items': {'type': 'int'}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated >= this timestamp'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated <= this timestamp'}, 'countMaxWait': {'type': 'int', 'position': 0, 'description': 'How many seconds to wait for count calculation to complete. -1: Skip counting altogether to return search results immediately. 0: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.', 'minimum': -1}, 'fromDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'afterDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'domainNames': {'type': 'list', 'position': 0, 'description': 'DEPRECATED: Search for observations by domain name. Deprecated, use domains instead.', 'items': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'domains': {'type': 'list', 'position': 0, 'description': 'Search for observations by domain name.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['id', 'domainName', 'domain', 'lastModified', 'source', 'role', '-id', '-domainName', '-domain', '-lastModified', '-source', '-role']}}}, 'description': 'Search criteria for observations for matching domains'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'minimumState': {'type': 'int', 'position': 0, 'description': 'Filter results by observations with at least this state'}, 'minimumConfidence': {'type': 'float', 'position': 0, 'description': 'Filter results by observations with at least this confidence'}, 'sourceID': {'type': 'list', 'position': 0, 'description': 'Filter results by observations from these sources', 'uniqueItems': True, 'items': {'type': 'int'}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated >= this timestamp'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Filter results by observations last updated <= this timestamp'}, 'countMaxWait': {'type': 'int', 'position': 0, 'description': 'How many seconds to wait for count calculation to complete. -1: Skip counting altogether to return search results immediately. 0: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.', 'minimum': -1}, 'fromDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'afterDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'domainNames': {'type': 'list', 'position': 0, 'description': 'DEPRECATED: Search for observations by domain name. Deprecated, use domains instead.', 'items': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'domains': {'type': 'list', 'position': 0, 'description': 'Search for observations by domain name.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['id', 'domainName', 'domain', 'lastModified', 'source', 'role', '-id', '-domainName', '-domain', '-lastModified', '-source', '-role']}}}, 'description': 'Search criteria for observations for matching domains'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'description': 'An observation for a domain name'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
list_address_observations = {'tags': ['reputation/v1'], 'summary': 'List IP observations (INTERNAL)', 'description': '', 'operationId': 'listAddressObservations', 'produces': ['application/json'], 'parameters': [{'name': 'sourceID', 'in': 'query', 'description': 'Limit result to observations from specified source', 'required': False, 'type': 'int'}, {'name': 'minimumState', 'in': 'query', 'description': 'Limit result to observations with this state or higher', 'required': False, 'type': 'int'}, {'name': 'minimumConfidence', 'in': 'query', 'description': 'Limit result to observations bound to sources with at least this confidence', 'required': False, 'type': 'float', 'maximum': 1.0, 'minimum': 0.0}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}, {'name': 'countMaxWait', 'in': 'query', 'description': 'Max wait time for result count calculation. 0 equates to unlimited wait and -1 to skip counting altogether. Defaults to 2 seconds.', 'required': False, 'type': 'int', 'minimum': -1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'address': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'description': 'An Observation for an IP address'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
list_domain_observations = {'tags': ['reputation/v1'], 'summary': 'List domain observations (INTERNAL)', 'description': '', 'operationId': 'listDomainObservations', 'produces': ['application/json'], 'parameters': [{'name': 'sourceID', 'in': 'query', 'description': 'Limit result to observations from specified source', 'required': False, 'type': 'int'}, {'name': 'minimumState', 'in': 'query', 'description': 'Limit result to observations with this state or higher', 'required': False, 'type': 'int'}, {'name': 'minimumConfidence', 'in': 'query', 'description': 'Limit result to observations bound to sources with at least this confidence', 'required': False, 'type': 'float', 'maximum': 1.0, 'minimum': 0.0}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}, {'name': 'countMaxWait', 'in': 'query', 'description': 'Max wait time for result count calculation. 0 equates to unlimited wait and -1 to skip counting altogether. Defaults to 2 seconds.', 'required': False, 'type': 'int', 'minimum': -1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}, 'description': "Metadata for an Observation's Source"}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Globally unique alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}, 'description': "Metadata for an Observation's Role"}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'description': 'An observation for a domain name'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
#: "fetch_observations_for_i_p" is an alias for "fetch_observations_for_ip"
fetch_observations_for_i_p = fetch_observations_for_ip