"""Autogenerated API schema"""
from argus_api import session


activate_user_enrollment_flow = {'tags': ['development'], 'summary': 'Activate enrollment for current user, after receiving activation email (DEV)', 'description': '', 'operationId': 'activateUserEnrollmentFlow', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Request object', 'required': False, 'schema': {'type': 'object', 'required': ['domain', 'enrollmentCode', 'userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Username for user to activate enrollment for'}, 'enrollmentCode': {'type': 'str', 'position': 0, 'description': 'Enrollment code'}, 'domain': {'type': 'str', 'position': 0, 'description': 'Domain id or name for the domain to lookup user in. Typically set by UI client'}}, 'description': 'User request to activate enrollment, after receiving activation email'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'userID': {'type': 'int', 'position': 0, 'description': 'The userID of the enrolling user. This is used for the next verification step.'}, 'activationCookie': {'type': 'str', 'position': 0, 'description': 'A cookie for the current activation session. This is used for the next verification step.'}}, 'description': 'Response from user enrollment activation request'}}}}, '412': {'description': 'Invalid argument'}, '408': {'description': 'Enrollment code expired'}}}
authenticate_user_enrollment_session = {'tags': ['development'], 'summary': 'Verify enrollment for current user, after receiving verification code.If successful, it returns a valid session, with authorizations to set password, and enroll other authentication methods. (DEV)', 'description': '', 'operationId': 'authenticateUserEnrollmentSession', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Request object', 'required': False, 'schema': {'type': 'object', 'required': ['activationCookie', 'verificationCode'], 'properties': {'userID': {'type': 'int', 'position': 0, 'description': 'Username for user to verify enrollment for', 'minimum': 1}, 'verificationCode': {'type': 'str', 'position': 0, 'description': 'Verification code'}, 'activationCookie': {'type': 'str', 'position': 0, 'description': 'The activation cookie received in the activation step'}}, 'description': 'User request to verify enrollment, after receiving verification code'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'dict', 'properties': {'uri': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}}}, 'sessionKey': {'type': 'str', 'position': 0, 'description': 'The symmetric key created for this session'}, 'authorizations': {'type': 'list', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '412': {'description': 'Invalid argument'}, '410': {'description': 'Enrollment verification code expired'}, '408': {'description': 'Enrollment code expired'}}}
enrollment_user_authorization = {'tags': ['development'], 'summary': 'Request an authorization token using an Enrollment validation code (DEV)', 'description': 'This endpoint requires that the current user is logged in using Enrollment initial session. Even if the user has Enrollment enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'enrollmentUserAuthorization', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'SMS authorization request', 'required': False, 'schema': {'type': 'object', 'required': ['cookie', 'nextURI', 'operation', 'token'], 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'The name of the operation to authorize'}, 'context': {'type': 'dict', 'position': 0, 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.', 'additionalProperties': {'type': 'string'}}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect/route to after successful authorization. The URI will be validated according to policy. The authorization token returned from successful authorization should be appended as a query parameter to this URI.'}, 'token': {'type': 'str', 'position': 0, 'description': 'The token received via SMS'}, 'cookie': {'type': 'str', 'position': 0, 'description': 'The cookie returned from the send-sms request'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
send_enrollment_validation_code = {'tags': ['development'], 'summary': 'Request an SMS validation token to validate user presence. The returned token must be used when requesting authorization token. (DEV)', 'description': 'This endpoint requires that the current user is logged in an Enrollment initial session. Even if the user has Enrollment enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'sendEnrollmentValidationCode', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'cookie': {'type': 'str', 'position': 0, 'description': 'A state cookie bound to the requested SMS'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}