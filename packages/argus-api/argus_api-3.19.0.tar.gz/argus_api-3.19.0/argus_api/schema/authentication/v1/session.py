"""Autogenerated API schema"""
from argus_api import session


accept_session_transfer = {'tags': ['authentication/v1/session'], 'summary': 'Accept transfer of session token from other domain (PUBLIC)', 'description': '', 'operationId': 'putSession', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Encrypted SSO transfer token', 'required': False, 'schema': {'type': 'object', 'properties': {'seed': {'type': 'str', 'readOnly': True}, 'data': {'type': 'str', 'readOnly': True}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionKey': {'type': 'str', 'position': 0, 'description': 'Session wide encryption key for CSRF and other uses'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The creation timestamp of this session'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The last updated timestamp of this session'}, 'authenticationMethod': {'type': 'str', 'position': 0, 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'str', 'position': 0, 'description': 'The client IP this session is bound to (as seen from Argus)'}, 'readOnly': {'type': 'bool', 'position': 0, 'description': 'If true, this session is read-only'}, 'passwordNotSet': {'type': 'bool', 'position': 0, 'description': 'If true, password is not set for this user'}}}}}}, '401': {'description': 'Authentication failed'}}}
check_session_function_permission = {'tags': ['authentication/v1/session'], 'summary': 'Validate current user permission to perform function on any customer (PUBLIC)', 'description': '', 'operationId': 'checkSessionFunctionPermission', 'produces': ['application/json'], 'parameters': [{'name': 'function', 'in': 'path', 'description': 'Function name', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'description': 'Returned results (might be an array or a single object)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Forbidden permission'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
check_session_permission = {'tags': ['authentication/v1/session'], 'summary': 'Validate current user permission to perform function on specific customer (PUBLIC)', 'description': '', 'operationId': 'checkSessionPermission', 'produces': ['application/json'], 'parameters': [{'name': 'function', 'in': 'path', 'description': 'Function name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'path', 'description': 'Customer ID or shortname', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or shortname for domain to lookup customer by shortname. Defaults to current users domain', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'description': 'Returned results (might be an array or a single object)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Forbidden permission'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
clear_session_data = {'tags': ['authentication/v1/session'], 'summary': 'Clear the current sessions sessiondata (PUBLIC)', 'description': '', 'operationId': 'clearSessionData', 'produces': ['application/json'], 'parameters': [], 'responses': {'401': {'description': 'Authentication failed'}}}
constrain_session = {'tags': ['authentication/v1/session'], 'summary': 'Request a constrained session (PUBLIC)', 'description': 'This operation will spawn a new user session, where the active userspermissions are constrained to the specified subset of the active users permissions.In addition to returning the constrained session token, the new session will be set as cookies, overwriting any existing session cookies.', 'operationId': 'constrainSession', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Constrain request', 'required': False, 'schema': {'type': 'object', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'function': {'type': 'list', 'position': 0, 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'readOnly': {'type': 'bool', 'position': 0, 'description': 'If true, this session will be constrained to read only (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'dict', 'properties': {'uri': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}}}, 'sessionKey': {'type': 'str', 'position': 0, 'description': 'The symmetric key created for this session'}, 'authorizations': {'type': 'list', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}}}}}}
delete_session = {'tags': ['authentication/v1/session'], 'summary': 'Invalidate current user session (PUBLIC)', 'description': '', 'operationId': 'deleteSession', 'produces': ['application/json'], 'parameters': [], 'responses': {'default': {'description': 'successful operation'}}}
evict_session = {'tags': ['authentication/v1/session'], 'summary': 'Delete a specific session. The session will be deleted from the authorative cache and flushed from all distributed caches (PUBLIC)', 'description': '', 'operationId': 'evictSession', 'produces': ['application/json'], 'parameters': [{'name': 'sessionIdentifier', 'in': 'path', 'description': 'Session identifier for the session to delete.', 'required': True, 'type': 'str', 'pattern': '.+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionKey': {'type': 'str', 'position': 0, 'description': 'Session wide encryption key for CSRF and other uses'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The creation timestamp of this session'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The last updated timestamp of this session'}, 'authenticationMethod': {'type': 'str', 'position': 0, 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'str', 'position': 0, 'description': 'The client IP this session is bound to (as seen from Argus)'}, 'readOnly': {'type': 'bool', 'position': 0, 'description': 'If true, this session is read-only'}, 'passwordNotSet': {'type': 'bool', 'position': 0, 'description': 'If true, password is not set for this user'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Session not found'}, '412': {'description': 'Invalid arguments'}}}
get_session = {'tags': ['authentication/v1/session'], 'summary': 'Get session information of current user. If the request specifies a domain, this will also ensure that thecurrent session is bound to the requested domain.  (PUBLIC)', 'description': '', 'operationId': 'getSession', 'produces': ['application/json'], 'parameters': [{'name': 'domain', 'in': 'query', 'description': 'Expected domain for this session.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionKey': {'type': 'str', 'position': 0, 'description': 'Session wide encryption key for CSRF and other uses'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The creation timestamp of this session'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The last updated timestamp of this session'}, 'authenticationMethod': {'type': 'str', 'position': 0, 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'str', 'position': 0, 'description': 'The client IP this session is bound to (as seen from Argus)'}, 'readOnly': {'type': 'bool', 'position': 0, 'description': 'If true, this session is read-only'}, 'passwordNotSet': {'type': 'bool', 'position': 0, 'description': 'If true, password is not set for this user'}}}}}}, '401': {'description': 'Authentication failed, or session does not belong to expected domain'}}}
get_session_auth_methods = {'tags': ['authentication/v1/session'], 'summary': 'List the current users valid authentication methods (PUBLIC)', 'description': '', 'operationId': 'getSessionAuthMethods', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms'}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP'}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized'}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings', 'additionalProperties': {'type': 'object'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
get_session_customers = {'tags': ['authentication/v1/session'], 'summary': 'List customers available in this session (PUBLIC)', 'description': '', 'operationId': 'getSessionCustomers', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}}}}}}
get_session_functions = {'tags': ['authentication/v1/session'], 'summary': 'List functions available in this session (PUBLIC)', 'description': '', 'operationId': 'getSessionFunctions', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}}}}
impersonate_session = {'tags': ['authentication/v1/session'], 'summary': 'Request an impersonated session (INTERNAL)', 'description': 'This operation will spawn a new user session impersonating another user, where the active users permissions are constrained to the intersection of the impersonating and impersonated users, and limited to the subset optionally specified in the request. In addition to returning the impersonating session token, the new session will be set as cookies, overwriting any existing session cookies.', 'operationId': 'impersonateSession', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Impersonation request', 'required': False, 'schema': {'type': 'object', 'required': ['userName'], 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'Username of user to impersonate.'}, 'domain': {'type': 'str', 'position': 0, 'description': 'Domain of user to impersonate (id or name)'}, 'customer': {'type': 'list', 'position': 0, 'description': 'Set of customers the session should be valid for. If not specified, customers will be inherited from active permissions.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'function': {'type': 'list', 'position': 0, 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.', 'uniqueItems': True, 'items': {'type': 'string'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'dict', 'properties': {'uri': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}}}, 'sessionKey': {'type': 'str', 'position': 0, 'description': 'The symmetric key created for this session'}, 'authorizations': {'type': 'list', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}}}}}}