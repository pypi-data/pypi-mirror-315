"""Autogenerated API schema"""
from argus_api import session


add_analysis = {'tags': ['development'], 'summary': 'Adds an analysis to a sample (DEV)', 'description': '', 'operationId': 'addAnalysis', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add analysis result to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add analysis request', 'required': False, 'schema': {'type': 'object', 'required': ['analysisResult', 'analysisScore', 'customer', 'tlp', 'userAgent'], 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis as a JSON object'}, 'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of customer the analysis belongs to'}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'description': 'The user agent used in add requests'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'The shortname or IDs of users or groups that will be given explicit access', 'uniqueItems': True, 'items': {'type': 'string'}}, 'profile': {'type': 'str', 'position': 0, 'description': 'The execution profile of the worker => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}}, 'description': 'Request used to add an analysis detection'}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Can be set to signify that the worker posting the analysis result is 100% certain that the sample is malicious or benign. The verdict engine will consider this field and use as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags for the analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['type', 'value'], 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The value for the tag => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag with a type and value for an analysis'}}, 'executedWithInternetAccess': {'type': 'bool', 'position': 0, 'description': 'A boolean to indicate whether the analysis have been executed with internet access or not'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The score for this analysis. The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious. A value of -1 indicates no findings.', 'minimum': -1, 'maximum': 100}}, 'description': 'Request to create an analysis'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample the analysis is for'}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'profile': {'type': 'str', 'position': 0, 'description': 'The execution profile of the worker'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}}, 'description': 'Representation of an analysis detection'}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags for the analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag with a type and value for an analysis'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the analysis', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['executedWithInternetAccess', 'hasEvidence']}}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious'}}, 'description': 'The result of an analysis performed on a sample'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_evidence = {'tags': ['development'], 'summary': 'Adds evidence to an analysis (DEV)', 'description': '', 'operationId': 'addEvidence', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample that holds the analysis', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'UUID of analysis to add evidence to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add evidence request', 'required': False, 'schema': {'type': 'object', 'required': ['evidence', 'fileName', 'mimeType'], 'properties': {'evidence': {'type': 'str', 'position': 0, 'description': 'Base64 encoded evidence', 'minLength': 1, 'maxLength': 30000000}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The mimeType of the evidence'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The file name given to the evidence'}, 'internal': {'type': 'bool', 'position': 0, 'description': 'Whether the Evidence should be available to external users or not. By default this is false which means that external users have access. Set to true if only internal'}, 'potentiallyMalicious': {'type': 'bool', 'position': 0, 'description': 'Whether the Evidence is malicious or not'}}, 'description': 'Request to add evidence to an analysis'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this Evidence'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the evidence was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The file name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}, 'checksum': {'type': 'str', 'position': 0, 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the evidence', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['internal', 'potentiallyMalicious']}}}, 'description': 'Evidence data produced as a part of an analysis'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_link = {'tags': ['development'], 'summary': 'Adds an link to a sample (DEV)', 'description': '', 'operationId': 'addLink', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add link to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add link request', 'required': False, 'schema': {'type': 'object', 'required': ['reference', 'tlp', 'type', 'userAgent'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of customer the link belongs to'}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'description': 'The user agent used in add requests'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'The shortname or IDs of users or groups that will be given explicit access', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'str', 'position': 0, 'description': 'The nature of the link between the two samples', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'reference': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the link references'}}, 'description': 'Request to add a link'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this link'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this link belongs to'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the link was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': 'str', 'referencedSample': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha512': {'type': 'str', 'position': 0, 'description': 'The SHA512 hash of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created.'}, 'latestClassification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}}, 'latestVerdict': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first submission for this sample'}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last submission for this sample'}, 'firstObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation for this sample'}, 'lastObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last observation for this sample'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was deleted'}}, 'description': 'Metadata for a sample file'}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this link', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deadReference']}}, 'options': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'description': 'Representation of a link between two samples'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_sample = {'tags': ['sampledb/v2'], 'summary': 'Upload a new sample file (INTERNAL)', 'description': '', 'operationId': 'addSample', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The sample file content', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'exists': {'type': 'bool', 'position': 0, 'description': 'Whether the sample already existed'}, 'sample': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}}, 'description': 'A compact representation of a sample'}, 'challenge': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The challenge token'}}, 'description': 'A challenge for a particular sample'}}, 'description': 'The response from a sample upload'}}}}, '201': {'description': 'The sample was created', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'exists': {'type': 'boolean', 'position': 0, 'description': 'Whether the sample already existed'}, 'sample': {'type': 'object', 'properties': {'id': {'type': 'string', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'The size of the sample in bytes'}}, 'description': 'A compact representation of a sample'}, 'challenge': {'type': 'object', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'position': 0, 'description': 'The id of the challenge'}, 'sha256': {'type': 'string', 'position': 0, 'description': 'The challenge token'}}, 'description': 'A challenge for a particular sample'}}, 'description': 'The response from a sample upload'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
add_static_fact = {'tags': ['development'], 'summary': 'Endpoint for registering a new static fact (DEV)', 'description': '', 'operationId': 'addStaticFact', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to add the static fact to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add static fact request', 'required': False, 'schema': {'type': 'object', 'required': ['key', 'userAgent', 'value'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'The static fact key'}, 'value': {'type': 'str', 'position': 0, 'description': 'The static fact value'}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'description': 'The user agent used in add requests'}}, 'description': 'Request to register a static fact on a sample'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the static fact'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'Sha256 that the static fact belongs to'}, 'key': {'type': 'str', 'position': 0, 'description': 'Key of the static fact'}, 'value': {'type': 'str', 'position': 0, 'description': 'Value of the static fact'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the static fact was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}}, 'description': 'The static fact added to a sample'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_submission = {'tags': ['sampledb/v2'], 'summary': 'Add a new sample submission. Requires a challenge token. A challenge token is a solution to a challenge generated by the challenge endpoint (INTERNAL)', 'description': '', 'operationId': 'addSubmission', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add submission for', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add submission request', 'required': False, 'schema': {'type': 'object', 'required': ['challengeToken', 'fileName', 'userAgent'], 'properties': {'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'str', 'position': 0, 'description': "The shortname or ID of customer the submission belongs to. Default value is the currernt user's customer"}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of when the sample was observed. Defaults to the current time'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type (default application/octet-stream)'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample (default {})', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission. Submissions with TLP Red will be rejected as Sample Service does not support submissions with TLP redDefaults to amber (default amber)', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of user IDs or shortnames that are given explicit access to the submission', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'description': 'The user agent used in add requests'}, 'challengeToken': {'type': 'dict', 'required': ['id', 'sha256'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The challenge token'}}, 'description': 'Request containing the answer to a challenge'}, 'retention': {'type': 'str', 'position': 0, 'description': 'Only retain the submission until the specified time. The submission will be deleted after this time, unless the sample is malicious. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'description': 'Request to add a submission'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed'}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'expiryTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the submission will be deleted'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set on this submission', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}}, 'description': 'A submission for a sample. Represents the observation of a sample at a customer site'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_verdict = {'tags': ['development'], 'summary': 'Manually add a verdict to a sample (DEV)', 'description': '', 'operationId': 'addVerdict', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'VerdictAddRequest', 'required': False, 'schema': {'type': 'object', 'required': ['comment', 'statusOverride'], 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'A comment providing information or context to the verdict => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Field for manually overriding the status of the sample. If this field is set, this overrides the future event generations and verdicts for this sample', 'enum': ['malicious', 'benign']}}, 'description': 'Request to add a verdict'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
advanced_search = {'tags': ['development'], 'summary': 'Advanced search for samples (DEV)', 'description': '', 'operationId': 'advancedSearch', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The search critieras', 'required': False, 'schema': {'type': 'object', 'properties': {'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords to search for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected keyword fields', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'sha256': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected sample sha256 IDs', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sha512': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these sha512 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sha1': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these sha1 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'md5': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these md5 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'submissionExpiry', 'firstSubmitted', 'lastSubmitted', 'analysisCreated', 'linkCreated']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'classification': {'type': 'list', 'position': 0, 'description': 'Search criteria for classifications', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Criteria for the version field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'superType': {'type': 'list', 'position': 0, 'description': 'Criteria for the superType field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'arch': {'type': 'list', 'position': 0, 'description': 'Criteria for the arch field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'platform': {'type': 'list', 'position': 0, 'description': 'Criteria for the platform field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'metaData': {'type': 'list', 'position': 0, 'description': 'Criteria for the meta data field of a classification', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for classifications'}}, 'submission': {'type': 'list', 'position': 0, 'description': 'Search criteria for submissions', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'fileName': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the file names defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mimeType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the mime types defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'metaData': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions not containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results (default false)', 'default': False}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement (default false)', 'default': False}}, 'description': 'Request used to search for links'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'tlp': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['red', 'amber', 'green', 'clear']}}, 'analysis': {'type': 'list', 'position': 0, 'description': 'Search criteria for analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analysis with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'analysisResult': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for analyses'}}, 'link': {'type': 'list', 'position': 0, 'description': 'Search criteria for links', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to link with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'linkType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to links of a certain type', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}}, 'reference': {'type': 'list', 'position': 0, 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for links'}}, 'verdict': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdicts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'includeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to verdicts containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags to search for', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['type', 'value'], 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The value of the tag to search for'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'Request model for searching for analysis tags'}}, 'minimumScore': {'type': 'int', 'position': 0, 'description': 'The minimum score to search for. The range is from -1 to 100 where -1 is unknown', 'minimum': -1, 'maximum': 100}, 'maximumScore': {'type': 'int', 'position': 0, 'description': 'The maximum score to search for. The range is from -1 to 100 where -1 is unknown', 'minimum': -1, 'maximum': 100}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for verdicts'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Search sub criteria', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords to search for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected keyword fields', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'sha256': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected sample sha256 IDs', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sha512': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these sha512 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sha1': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these sha1 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'md5': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these md5 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'submissionExpiry', 'firstSubmitted', 'lastSubmitted', 'analysisCreated', 'linkCreated']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'classification': {'type': 'list', 'position': 0, 'description': 'Search criteria for classifications', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Criteria for the version field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'superType': {'type': 'list', 'position': 0, 'description': 'Criteria for the superType field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'arch': {'type': 'list', 'position': 0, 'description': 'Criteria for the arch field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'platform': {'type': 'list', 'position': 0, 'description': 'Criteria for the platform field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'metaData': {'type': 'list', 'position': 0, 'description': 'Criteria for the meta data field of a classification', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for classifications'}}, 'submission': {'type': 'list', 'position': 0, 'description': 'Search criteria for submissions', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'fileName': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the file names defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mimeType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the mime types defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'metaData': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions not containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results (default false)', 'default': False}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement (default false)', 'default': False}}, 'description': 'Request used to search for links'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'tlp': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['red', 'amber', 'green', 'clear']}}, 'analysis': {'type': 'list', 'position': 0, 'description': 'Search criteria for analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analysis with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'analysisResult': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for analyses'}}, 'link': {'type': 'list', 'position': 0, 'description': 'Search criteria for links', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to link with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'linkType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to links of a certain type', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}}, 'reference': {'type': 'list', 'position': 0, 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for links'}}, 'verdict': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdicts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'includeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to verdicts containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags to search for', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['type', 'value'], 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The value of the tag to search for'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'Request model for searching for analysis tags'}}, 'minimumScore': {'type': 'int', 'position': 0, 'description': 'The minimum score to search for. The range is from -1 to 100 where -1 is unknown', 'minimum': -1, 'maximum': 100}, 'maximumScore': {'type': 'int', 'position': 0, 'description': 'The maximum score to search for. The range is from -1 to 100 where -1 is unknown', 'minimum': -1, 'maximum': 100}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for verdicts'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Search sub criteria', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords to search for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected keyword fields', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'sha256': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected sample sha256 IDs', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sha512': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these sha512 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sha1': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these sha1 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'md5': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in samples with these md5 hashes', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'submissionExpiry', 'firstSubmitted', 'lastSubmitted', 'analysisCreated', 'linkCreated']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'classification': {'type': 'list', 'position': 0, 'description': 'Search criteria for classifications', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Criteria for the version field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'superType': {'type': 'list', 'position': 0, 'description': 'Criteria for the superType field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'arch': {'type': 'list', 'position': 0, 'description': 'Criteria for the arch field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'platform': {'type': 'list', 'position': 0, 'description': 'Criteria for the platform field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'metaData': {'type': 'list', 'position': 0, 'description': 'Criteria for the meta data field of a classification', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for classifications'}}, 'submission': {'type': 'list', 'position': 0, 'description': 'Search criteria for submissions', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'fileName': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the file names defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mimeType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the mime types defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'metaData': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions not containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results (default false)', 'default': False}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement (default false)', 'default': False}}, 'description': 'Request used to search for links'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'tlp': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['red', 'amber', 'green', 'clear']}}, 'analysis': {'type': 'list', 'position': 0, 'description': 'Search criteria for analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analysis with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'analysisResult': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for sample metadata'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for analyses'}}, 'link': {'type': 'list', 'position': 0, 'description': 'Search criteria for links', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to link with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'linkType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to links of a certain type', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}}, 'reference': {'type': 'list', 'position': 0, 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for links'}}, 'verdict': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdicts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'includeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to verdicts containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags to search for', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['type', 'value'], 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The value of the tag to search for'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'Request model for searching for analysis tags'}}, 'minimumScore': {'type': 'int', 'position': 0, 'description': 'The minimum score to search for. The range is from -1 to 100 where -1 is unknown', 'minimum': -1, 'maximum': 100}, 'maximumScore': {'type': 'int', 'position': 0, 'description': 'The maximum score to search for. The range is from -1 to 100 where -1 is unknown', 'minimum': -1, 'maximum': 100}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}, 'description': 'Request used to search for verdicts'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Search sub criteria', 'uniqueItems': True, 'items': []}, 'fact': {'type': 'list', 'position': 0, 'description': 'Search criteria for static facts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'key': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the keys', 'uniqueItems': True, 'items': {'type': 'string'}}, 'value': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the values', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for static facts'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria is a requirement. Defaults to false'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}}, 'description': 'Request used for sample sub criteria search'}}, 'fact': {'type': 'list', 'position': 0, 'description': 'Search criteria for static facts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'key': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the keys', 'uniqueItems': True, 'items': {'type': 'string'}}, 'value': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the values', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for static facts'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria is a requirement. Defaults to false'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}}, 'description': 'Request used for sample sub criteria search'}}, 'fact': {'type': 'list', 'position': 0, 'description': 'Search criteria for static facts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined versions', 'uniqueItems': True, 'items': {'type': 'string'}}, 'name': {'type': 'list', 'position': 0, 'description': 'Restrict the search to user agents with either of the defined names', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'description': 'The user agent request used in sample search'}}, 'key': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the keys', 'uniqueItems': True, 'items': {'type': 'string'}}, 'value': {'type': 'list', 'position': 0, 'description': 'Restrict the search to static facts with one of the values', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}, 'description': 'Request used to search for static facts'}}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip a number of search results (default 0)', 'minimum': 0, 'maximum': 10000, 'default': 0}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit the number of search results (default 25)', 'minimum': 0, 'maximum': 10000, 'default': 25}, 'indexStartTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details (default now - 1 month)'}, 'indexEndTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details (default now)'}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Specify sort ordering for returned samples (default -sampleCreatedTimestamp)', 'items': {'type': 'str', 'enum': ['sampleCreatedTimestamp', 'sampleSize', 'sampleClassificationType', 'lastAddedSubmission', 'lastAddedAnalysis', 'lastAddedLink', '-sampleCreatedTimestamp', '-sampleSize', '-sampleClassificationType', '-lastAddedSubmission', '-lastAddedAnalysis', '-lastAddedLink']}}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}}, 'description': 'Request used for sample search'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha512': {'type': 'str', 'position': 0, 'description': 'The SHA512 hash of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created.'}, 'latestClassification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}}, 'latestVerdict': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first submission for this sample'}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last submission for this sample'}, 'firstObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation for this sample'}, 'lastObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last observation for this sample'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was deleted'}}, 'description': 'Metadata for a sample file'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_sample = {'tags': ['development'], 'summary': 'Delete a sample and all of its resources including submissions, analyses, links, classifications, verdicts, and jobs async. A minimal metadata record will be left behind (DEV)', 'description': '', 'operationId': 'deleteSample', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'correlationID': {'type': 'str', 'position': 0, 'description': 'The correlation ID of the service task. Not to be confused with an actual task ID,\nthe correlation ID can be used to reference tasks created from the request at a later point in time\nas these are created async.\n'}}, 'description': 'The resulting correlation ID of the created tasks'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
download_raw_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a raw sample file. Warning: The file returned may be malicious. Take caution (INTERNAL)', 'description': '', 'operationId': 'downloadRawSample', 'produces': ['application/octet-stream'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
download_safe_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a zipped sample file, password protected with the password "infected". Warning: The zipped file may be malicious. Take caution (INTERNAL)', 'description': '', 'operationId': 'downloadSafeSample', 'produces': ['application/zip'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
get_analysis = {'tags': ['development'], 'summary': 'Fetches the analysis for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getAnalysis', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample the analysis is for'}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'profile': {'type': 'str', 'position': 0, 'description': 'The execution profile of the worker'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}}, 'description': 'Representation of an analysis detection'}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags for the analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag with a type and value for an analysis'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the analysis', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['executedWithInternetAccess', 'hasEvidence']}}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious'}}, 'description': 'The result of an analysis performed on a sample'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_analysis_summary = {'tags': ['development'], 'summary': 'Get a summary of all analysis results for a given sample (DEV)', 'description': '', 'operationId': 'getAnalysisSummary', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis summary from', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysers': {'type': 'list', 'position': 0, 'description': 'A set of analysers used on this sample.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}}, 'latestAnalysis': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'description': 'Response model representing a summary of samples analyses'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_evidence = {'tags': ['development'], 'summary': 'Fetches the evidence metadata for the analysis for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getEvidence', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis the evidence is for', 'required': True, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'ID of the evidence to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this Evidence'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the evidence was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The file name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}, 'checksum': {'type': 'str', 'position': 0, 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the evidence', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['internal', 'potentiallyMalicious']}}}, 'description': 'Evidence data produced as a part of an analysis'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_evidence_data = {'tags': ['development'], 'summary': 'Returns the evidence file. (DEV)', 'description': '', 'operationId': 'getEvidenceData', 'produces': ['*/*'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to fetch evidence from', 'required': True, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'The ID of the evidence data you want to fetch', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_link = {'tags': ['development'], 'summary': 'Fetches the link for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getLink', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'type': 'str'}, {'name': 'linkID', 'in': 'path', 'description': 'ID of the link to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this link'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this link belongs to'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the link was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': 'str', 'referencedSample': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha512': {'type': 'str', 'position': 0, 'description': 'The SHA512 hash of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created.'}, 'latestClassification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}}, 'latestVerdict': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first submission for this sample'}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last submission for this sample'}, 'firstObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation for this sample'}, 'lastObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last observation for this sample'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was deleted'}}, 'description': 'Metadata for a sample file'}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this link', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deadReference']}}, 'options': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'description': 'Representation of a link between two samples'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_link_summary = {'tags': ['development'], 'summary': 'Get a summary of up to 1000 links for a given sample (DEV)', 'description': '', 'operationId': 'getLinkSummary', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch the links summary from', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'linkTypeSummary': {'type': 'list', 'position': 0, 'description': 'A list of Links that contains the type and count for the different links fetched for the sample.', 'items': {'type': 'dict', 'properties': {'type': 'str', 'count': {'type': 'int', 'position': 0, 'description': 'Counts the number of a given Link Type'}, 'options': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'description': 'The link type and count'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this link', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['incompleteTypeCount']}}}, 'description': 'Response model representing a summary of samples links'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_meta_data = {'tags': ['sampledb/v2'], 'summary': 'Fetch meta data about a sample file (INTERNAL)', 'description': '', 'operationId': 'getSampleMetaData', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha512': {'type': 'str', 'position': 0, 'description': 'The SHA512 hash of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created.'}, 'latestClassification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}}, 'latestVerdict': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first submission for this sample'}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last submission for this sample'}, 'firstObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation for this sample'}, 'lastObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last observation for this sample'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was deleted'}}, 'description': 'Metadata for a sample file'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
get_submission = {'tags': ['sampledb/v2'], 'summary': 'Fetch a submission for the sample with the given ID (INTERNAL)', 'description': '', 'operationId': 'getSubmission', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample the submission belongs to', 'required': True, 'type': 'str'}, {'name': 'submissionID', 'in': 'path', 'description': 'The ID of the submission to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed'}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'expiryTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the submission will be deleted'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set on this submission', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}}, 'description': 'A submission for a sample. Represents the observation of a sample at a customer site'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}}}
get_upload_challenge = {'tags': ['sampledb/v2'], 'summary': "Generate a new challenge for a sample. The solution of the challenge is SHA256(x) where x is 'length' bytes of data starting from 'offset' bytes into the sample file (INTERNAL)", 'description': '', 'operationId': 'getUploadChallenge', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to get submission challenge for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge'}, 'offset': {'type': 'int', 'position': 0, 'description': 'The offset into the sample file from where to start calculating the hash'}, 'length': {'type': 'int', 'position': 0, 'description': 'The number of bytes to process'}}, 'description': 'Model representing a sample challenge. Must be solved in order to prove possession of the sample'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}, '422': {'description': 'The sample file is too small. Upload the full sample and use the challenge token returned in that response as proof'}}}
list_analysis = {'tags': ['development'], 'summary': 'Lists the analysis for the sample (DEV)', 'description': '', 'operationId': 'listAnalysis', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample the analysis is for'}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'profile': {'type': 'str', 'position': 0, 'description': 'The execution profile of the worker'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}}, 'description': 'Representation of an analysis detection'}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}, 'tags': {'type': 'list', 'position': 0, 'description': 'The tags for the analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag with a type and value for an analysis'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the analysis', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['executedWithInternetAccess', 'hasEvidence']}}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious'}}, 'description': 'The result of an analysis performed on a sample'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_classifications = {'tags': ['development'], 'summary': 'Fetch all classifications for a sample (DEV)', 'description': '', 'operationId': 'listClassifications', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'The maximum number of classifications to return', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The field on which to sort the classifications. Prefix with '-' to sort descending", 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-createdTimestamp', 'enum': ['createdTimestamp', 'version', 'type', 'superType', 'arch', 'platform', '-createdTimestamp', '-version', '-type', '-superType', '-arch', '-platform']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
list_evidence = {'tags': ['development'], 'summary': 'Lists the evidence metadata for the analysis (DEV)', 'description': '', 'operationId': 'listEvidence', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to list evidence from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this Evidence'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the evidence was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The file name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}, 'checksum': {'type': 'str', 'position': 0, 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the evidence', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['internal', 'potentiallyMalicious']}}}, 'description': 'Evidence data produced as a part of an analysis'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_links = {'tags': ['development'], 'summary': 'Lists the links for the sample (DEV)', 'description': '', 'operationId': 'listLinks', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this link'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this link belongs to'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the link was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': 'str', 'referencedSample': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha512': {'type': 'str', 'position': 0, 'description': 'The SHA512 hash of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created.'}, 'latestClassification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}}, 'latestVerdict': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first submission for this sample'}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last submission for this sample'}, 'firstObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation for this sample'}, 'lastObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last observation for this sample'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was deleted'}}, 'description': 'Metadata for a sample file'}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this link', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deadReference']}}, 'options': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'description': 'Representation of a link between two samples'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_static_fact = {'tags': ['development'], 'summary': 'Endpoint for listing the static facts for a sample (DEV)', 'description': '', 'operationId': 'listStaticFact', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample the static facts are for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "Sort order of returned results. Prefix with '-' to sort descending", 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'key', 'enum': ['key', 'createdTimestamp', '-key', '-createdTimestamp']}, 'collectionFormat': 'multi'}, {'name': 'key', 'in': 'query', 'description': 'A set of keys to search for', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the static fact'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'Sha256 that the static fact belongs to'}, 'key': {'type': 'str', 'position': 0, 'description': 'Key of the static fact'}, 'value': {'type': 'str', 'position': 0, 'description': 'Value of the static fact'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when the static fact was created'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}}, 'description': 'The static fact added to a sample'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_submissions = {'tags': ['sampledb/v2'], 'summary': 'List all the submissions for a sample (INTERNAL)', 'description': '', 'operationId': 'listSubmissions', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch submissions for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed'}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'clear']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}, 'description': 'Response model for access control'}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'expiryTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the submission will be deleted'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set on this submission', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}}}, 'description': 'A submission for a sample. Represents the observation of a sample at a customer site'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}}}
list_verdicts = {'tags': ['development'], 'summary': 'List all verdicts for a sample (DEV)', 'description': '', 'operationId': 'listVerdicts', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch verdicts for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The field on which to sort the verdicts. Prefix any of the allowed values with '-' to sort descending", 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-createdTimestamp', 'enum': ['createdTimestamp', 'triggeredDetections', 'score', '-createdTimestamp', '-triggeredDetections', '-score']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
reanalyse_sample = {'tags': ['development'], 'summary': 'Triggering reanalysis of a Sample without having to upload a new submission. (DEV)', 'description': '', 'operationId': 'reanalyseSample', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'analysedSample': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}}, 'description': 'A compact representation of a sample'}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was enqueued'}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was started'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was ended'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'Information about an analysis job'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
reclassify_sample = {'tags': ['development'], 'summary': 'Manually reclassify an existing sample (DEV)', 'description': '', 'operationId': 'reclassifySample', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request to reclassify sample', 'required': False, 'schema': {'type': 'object', 'description': 'Manually reclassify an existing sample'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
simple_search = {'tags': ['development'], 'summary': 'Simple search for samples (DEV)', 'description': '', 'operationId': 'simpleSearch', 'produces': ['application/json'], 'parameters': [{'name': 'offset', 'in': 'query', 'description': 'Number of results to skip', 'required': False, 'type': 'int', 'default': 0, 'maximum': 10000, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'maximum': 10000, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The fields to sort the results by. Prefix with '-' to sort descending", 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-sampleCreatedTimestamp', 'enum': ['sampleCreatedTimestamp', 'sampleSize', 'sampleClassificationType', 'lastUpdatedSubmission', 'lastUpdatedAnalysis', 'lastUpdatedLink', '-sampleCreatedTimestamp', '-sampleSize', '-sampleClassificationType', '-lastUpdatedSubmission', '-lastUpdatedAnalysis', '-lastUpdatedLink']}, 'collectionFormat': 'multi'}, {'name': 'indexStartTimestamp', 'in': 'query', 'description': 'Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'required': False, 'type': 'str', 'default': 'now - 1 month'}, {'name': 'indexEndTimestamp', 'in': 'query', 'description': 'Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'required': False, 'type': 'str', 'default': 'now'}, {'name': 'keywords', 'in': 'query', 'description': 'A set of keywords to search for', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordFieldStrategy', 'in': 'query', 'description': 'Which fields to search on', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}, 'collectionFormat': 'multi'}, {'name': 'keywordMatchStrategy', 'in': 'query', 'description': 'Whether the keywords must match all or any of the keyword fields', 'required': False, 'type': 'str', 'default': 'any', 'enum': ['all', 'any']}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha512': {'type': 'str', 'position': 0, 'description': 'The SHA512 hash of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created.'}, 'latestClassification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}, 'description': 'The result of a classification performed on a sample'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}}, 'latestVerdict': {'type': 'dict', 'properties': {'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the sample this verdict belongs to'}, 'job': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}, 'description': 'A compact representation of an analysis job'}, 'analysis': {'type': 'list', 'position': 0, 'description': 'The analyses that this verdict is based on', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}, 'description': 'Model used for representing a user agent'}, 'analysisScore': {'type': 'int', 'position': 0, 'description': 'The scores for the analysis'}}, 'description': 'Compact representation of an analysis'}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags for the verdict', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'value': {'type': 'str', 'position': 0, 'description': 'The tag value'}, 'count': {'type': 'int', 'position': 0, 'description': 'The number of times this tag was found in analysis results'}, 'options': ['family', 'behaviour', 'yara']}, 'description': 'A tag for verdicts'}}, 'statusOverride': {'type': 'str', 'position': 0, 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'score': {'type': 'int', 'position': 0, 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}}, 'description': 'Representation of a verdict about a sample'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first submission for this sample'}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last submission for this sample'}, 'firstObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation for this sample'}, 'lastObservedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last observation for this sample'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was deleted'}}, 'description': 'Metadata for a sample file'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
upload_evidence = {'tags': ['development'], 'summary': 'Uploads an evidence file (DEV)', 'description': '', 'operationId': 'uploadEvidence', 'consumes': ['*/*'], 'produces': ['application/json'], 'parameters': [{'name': 'Content-Type', 'in': 'header', 'description': 'The mime type of the file', 'required': False, 'type': 'string'}, {'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample that holds the analysis', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'UUID of analysis to add evidence to', 'required': True, 'type': 'str'}, {'name': 'fileName', 'in': 'path', 'description': 'The name of the evidence file to upload', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'The evidence file content', 'required': False, 'schema': {'type': 'object'}}, {'name': 'internal', 'in': 'query', 'description': 'If the evidence is internal', 'required': False, 'type': 'bool'}, {'name': 'potentiallyMalicious', 'in': 'query', 'description': 'If the evidence is potentially malicious', 'required': False, 'type': 'bool'}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of this Evidence'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the evidence was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The file name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}, 'checksum': {'type': 'str', 'position': 0, 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags for the evidence', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['internal', 'potentiallyMalicious']}}}, 'description': 'Evidence data produced as a part of an analysis'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}