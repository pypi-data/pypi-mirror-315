"""Autogenerated API schema"""
from argus_api import session


add_field_policy = {'tags': ['cases/v2/field'], 'summary': 'Define new field policy. (INTERNAL)', 'description': '', 'operationId': 'addFieldPolicy', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['domain', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of policy to add. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'domain': {'type': 'str', 'position': 0, 'description': 'Name or ID of domain to create this policy in.'}, 'customer': {'type': 'str', 'position': 0, 'description': 'Name or ID of customer to create this policy for (optional).'}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_field_to_policy = {'tags': ['cases/v2/field'], 'summary': 'Bind a field to a policy (INTERNAL)', 'description': 'Bind a field to a policy. This can be done on active policies, and will make the specified field available on the cases covered by the policy. After adding a field with a required policy, affected cases without this field will start requiring the field on the next update.', 'operationId': 'addFieldToPolicy', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'policy', 'in': 'path', 'description': 'ID or name of policy to bind field to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying field to add', 'required': False, 'schema': {'type': 'object', 'required': ['field', 'fieldPolicy'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'ID or field name of field to add to policy.'}, 'displayName': {'type': 'str', 'position': 0, 'description': 'Display name for field. Default is field name. => [a-zA-Z0-9_:\\-\\.]*'}, 'fieldPolicy': {'type': 'str', 'position': 0, 'description': 'FieldPolicy for this field. If the field is requiredOnCreate, a case cannot be created without this field, unless a defaultValue is set in the field fieldPolicy.If the field is requiredOnClose, the case cannot be closed before this field has been set. Default fieldPolicy is optional.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for policy in (when using policy name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
create_field_descriptor = {'tags': ['cases/v2/field'], 'summary': 'Define new field descriptor. (INTERNAL)', 'description': '', 'operationId': 'createFieldDescriptor', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['domain', 'name', 'readRole', 'valueType', 'writeRole'], 'properties': {'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of field to add. If not specified, it will be set to a lowercase, concatenated shortname based on the name. => [a-zA-Z0-9_:\\-\\.]*'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of field to add. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names. If not set, locales will fallback to main name. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'additionalProperties': {'type': 'string'}}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions. If not set, localizedDescription will return null. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'additionalProperties': {'type': 'string'}}, 'domain': {'type': 'str', 'position': 0, 'description': 'Name or ID of domain to create this field in.'}, 'customer': {'type': 'str', 'position': 0, 'description': 'Name or ID of customer to create this field for (optional).'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'Value type for the field.The field will only accept values that can be safely converted to this value type. If the field uses an autocompleter, the autocompleter should convert user input to valid values of this type. Default type is stringType.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'multiValue': {'type': 'bool', 'position': 0, 'description': 'If multiValue is enabled, this field will accept multiple values of the specified type (optional).'}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value to populate this field with. (optional, default is not set).'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.'}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.'}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.'}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.'}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.'}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field. With no maxLength, the system maximum is 255 characters.'}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field. With no maxLength, the system maximum is 65k.'}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'str', 'position': 0, 'description': 'If set, only allow subjects which have this permission granted.'}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.'}, 'memberOf': {'type': 'int', 'position': 0, 'description': 'If set, only allow subjects which are member of this group'}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases for this service.'}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases with this category.'}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.'}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.'}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.'}}}, 'jsonSettings': {'type': 'object'}}}, 'valueSource': {'type': 'dict', 'properties': {'listType': {'type': 'dict', 'properties': {'values': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, values specifies a set of available values. This is a shorthand notation for a list of entries with equal key/label.', 'items': {'type': 'string'}}, 'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label. Use either parameter entries or the parameter values. ', 'items': {'type': 'dict', 'properties': {'key': {'type': 'string'}, 'label': {'type': 'string'}}}}}}, 'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.'}}}}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'Renderer options. Only for use by the Argus frontend application (optional).', 'additionalProperties': {'type': 'string'}}, 'readRole': {'type': 'str', 'position': 0, 'description': "Required service role to read this field. Default is 'user', meaning that any user with read access to the case, can also read this field.", 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': "Required service role to set/update this field. Default is 'user', meaning that any user with write access to the case, can also write to this field.", 'enum': ['user', 'tech', 'admin']}, 'hidden': {'type': 'bool', 'position': 0, 'description': 'Mark this field as hidden. Hidden fields will not be displayed in the UI. (default false)', 'default': False}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value of this field, if the field is not set. If defaultValue is not set, the field will not be regarded as set on the case until a value is provided.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.', 'readOnly': True}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'readOnly': True, 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'readOnly': True, 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.', 'readOnly': True}, 'memberOf': {'allOf': [{'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {'description': {'type': 'string'}}}]}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Service ID'}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname'}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Service name localized to the current users language'}}}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'readOnly': True, 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Category name', 'readOnly': True}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Category shortname', 'readOnly': True}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Category name localized to current users language', 'readOnly': True}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.', 'readOnly': True}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.', 'readOnly': True}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.', 'readOnly': True}}}}}, 'valueSource': {'type': 'dict', 'properties': {'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.', 'readOnly': True}}}, 'listType': {'type': 'dict', 'properties': {'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label.', 'readOnly': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'readOnly': True}, 'label': {'type': 'str', 'readOnly': True}}}}}}, 'type': 'str', 'options': ['url', 'list']}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'DEPRECATED: Options to the GUI renderer.'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this field.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this field.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field.', 'enum': ['user', 'tech', 'admin']}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language)'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names', 'additionalProperties': {'type': 'string'}}, 'localizedDescription': {'type': 'str', 'position': 0, 'description': 'Localized description (current users language)'}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions', 'additionalProperties': {'type': 'string'}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_field_descriptor = {'tags': ['cases/v2/field'], 'summary': 'Delete a field descriptor. (INTERNAL)', 'description': 'Delete a field descriptor. This will mark the field as deleted, and will deny using the field in policies. Deleting the field will be rejected if the field is still in use in any field policy.', 'operationId': 'deleteFieldDescriptor', 'produces': ['application/json'], 'parameters': [{'name': 'field', 'in': 'path', 'description': 'ID or name of descriptor to delete', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for field in (when using field name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value of this field, if the field is not set. If defaultValue is not set, the field will not be regarded as set on the case until a value is provided.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.', 'readOnly': True}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'readOnly': True, 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'readOnly': True, 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.', 'readOnly': True}, 'memberOf': {'allOf': [{'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {'description': {'type': 'string'}}}]}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Service ID'}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname'}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Service name localized to the current users language'}}}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'readOnly': True, 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Category name', 'readOnly': True}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Category shortname', 'readOnly': True}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Category name localized to current users language', 'readOnly': True}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.', 'readOnly': True}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.', 'readOnly': True}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.', 'readOnly': True}}}}}, 'valueSource': {'type': 'dict', 'properties': {'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.', 'readOnly': True}}}, 'listType': {'type': 'dict', 'properties': {'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label.', 'readOnly': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'readOnly': True}, 'label': {'type': 'str', 'readOnly': True}}}}}}, 'type': 'str', 'options': ['url', 'list']}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'DEPRECATED: Options to the GUI renderer.'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this field.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this field.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field.', 'enum': ['user', 'tech', 'admin']}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language)'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names', 'additionalProperties': {'type': 'string'}}, 'localizedDescription': {'type': 'str', 'position': 0, 'description': 'Localized description (current users language)'}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions', 'additionalProperties': {'type': 'string'}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_field_policy = {'tags': ['cases/v2/field'], 'summary': 'Delete a field policy (INTERNAL)', 'description': 'Delete a field policy. A deleted policy cannot be assigned to a service, and deleting a policy will be denied if the policy is still in use in any service.', 'operationId': 'deleteFieldPolicy', 'produces': ['application/json'], 'parameters': [{'name': 'policy', 'in': 'path', 'description': 'ID or name of policy to delete', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for policy in (when using policy name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_field_descriptor = {'tags': ['cases/v2/field'], 'summary': 'Fetch field descriptor (INTERNAL)', 'description': '', 'operationId': 'getFieldDescriptor', 'produces': ['application/json'], 'parameters': [{'name': 'field', 'in': 'path', 'description': 'ID or name of descriptor to fetch', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for field in (when using field name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value of this field, if the field is not set. If defaultValue is not set, the field will not be regarded as set on the case until a value is provided.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.', 'readOnly': True}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'readOnly': True, 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'readOnly': True, 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.', 'readOnly': True}, 'memberOf': {'allOf': [{'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {'description': {'type': 'string'}}}]}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Service ID'}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname'}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Service name localized to the current users language'}}}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'readOnly': True, 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Category name', 'readOnly': True}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Category shortname', 'readOnly': True}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Category name localized to current users language', 'readOnly': True}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.', 'readOnly': True}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.', 'readOnly': True}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.', 'readOnly': True}}}}}, 'valueSource': {'type': 'dict', 'properties': {'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.', 'readOnly': True}}}, 'listType': {'type': 'dict', 'properties': {'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label.', 'readOnly': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'readOnly': True}, 'label': {'type': 'str', 'readOnly': True}}}}}}, 'type': 'str', 'options': ['url', 'list']}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'DEPRECATED: Options to the GUI renderer.'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this field.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this field.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field.', 'enum': ['user', 'tech', 'admin']}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language)'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names', 'additionalProperties': {'type': 'string'}}, 'localizedDescription': {'type': 'str', 'position': 0, 'description': 'Localized description (current users language)'}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions', 'additionalProperties': {'type': 'string'}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_field_policy_by_id = {'tags': ['cases/v2/field'], 'summary': 'Fetch policy descriptor by ID. (INTERNAL)', 'description': '', 'operationId': 'getFieldPolicyByID', 'produces': ['application/json'], 'parameters': [{'name': 'policy', 'in': 'path', 'description': 'ID or name of policy to fetch', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for policy in (when using policy name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_field_descriptors = {'tags': ['cases/v2/field'], 'summary': 'List field descriptors. (INTERNAL)', 'description': 'This endpoint will return all fields the user has access to, limited by specified filters.', 'operationId': 'listFieldDescriptors', 'produces': ['application/json'], 'parameters': [{'name': 'customerID', 'in': 'query', 'description': 'Limit result to fields bound to one of these customer IDs', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'domain', 'in': 'query', 'description': 'Limit result to fields bound to one of these domains (by ID or name)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'valueType', 'in': 'query', 'description': 'Limit result to fields with one of these valueTypes', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'collectionFormat': 'multi'}, {'name': 'field', 'in': 'query', 'description': 'Limit result to one of these fields (by ID or name)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'policy', 'in': 'query', 'description': 'Limit result to fields bound to one of these field policies (by ID or name)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywords', 'in': 'query', 'description': 'Limit result to fields matching one of these keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort order (see /cases/v2/field/descriptor/search documentation for details)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value of this field, if the field is not set. If defaultValue is not set, the field will not be regarded as set on the case until a value is provided.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.', 'readOnly': True}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'readOnly': True, 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'readOnly': True, 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.', 'readOnly': True}, 'memberOf': {'allOf': [{'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {'description': {'type': 'string'}}}]}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Service ID'}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname'}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Service name localized to the current users language'}}}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'readOnly': True, 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Category name', 'readOnly': True}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Category shortname', 'readOnly': True}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Category name localized to current users language', 'readOnly': True}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.', 'readOnly': True}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.', 'readOnly': True}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.', 'readOnly': True}}}}}, 'valueSource': {'type': 'dict', 'properties': {'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.', 'readOnly': True}}}, 'listType': {'type': 'dict', 'properties': {'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label.', 'readOnly': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'readOnly': True}, 'label': {'type': 'str', 'readOnly': True}}}}}}, 'type': 'str', 'options': ['url', 'list']}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'DEPRECATED: Options to the GUI renderer.'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this field.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this field.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field.', 'enum': ['user', 'tech', 'admin']}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language)'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names', 'additionalProperties': {'type': 'string'}}, 'localizedDescription': {'type': 'str', 'position': 0, 'description': 'Localized description (current users language)'}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions', 'additionalProperties': {'type': 'string'}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was last updated (in ISO-8601 time format)'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_field_policies = {'tags': ['cases/v2/field'], 'summary': 'List field policies (INTERNAL)', 'description': 'This endpoint will return all policies which the user has role based permissions for, filtered by specified parameters.', 'operationId': 'listFieldPolicies', 'produces': ['application/json'], 'parameters': [{'name': 'customerID', 'in': 'query', 'description': 'Limit result to fields bound to one of these customer IDs', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'domain', 'in': 'query', 'description': 'Limit result to fields bound to one of these domains (ID or name)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywords', 'in': 'query', 'description': 'Limit result to fields matching one of these keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort order (see /cases/v2/field/policy/search documentation for details)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_field_source_values = {'tags': ['cases/v2/field'], 'summary': 'List define source values for a field. Fields may have a defined value source for available values, which can be used to select valid values to set on the field. This endpoint returns and filters the values from the defined data source. (INTERNAL)', 'description': '', 'operationId': 'listFieldSourceValues', 'produces': ['application/json'], 'parameters': [{'name': 'field', 'in': 'path', 'description': 'ID or name of field to fetch values for', 'required': True, 'type': 'str'}, {'name': 'caseID', 'in': 'query', 'description': 'ID for case to list field values for', 'required': False, 'type': 'int'}, {'name': 'service', 'in': 'query', 'description': 'ID or shortname of service to list field values for', 'required': False, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'ID or shortname of customer to list field values for', 'required': False, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or name of domain for looking up service and customer. Defaults to the current users domain', 'required': False, 'type': 'str'}, {'name': 'keywords', 'in': 'query', 'description': 'Keyword to filter returned values by', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Value key. May be a string, number or boolean value.'}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key.'}, 'info': {'type': 'object'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_field_from_policy = {'tags': ['cases/v2/field'], 'summary': 'Unbind a field from a policy. (INTERNAL)', 'description': 'Unbind a field from a policy. This will not remove the field from affected cases where this field is set, but will stop accepting the field on new cases or future updates of existing cases.', 'operationId': 'removeFieldFromPolicy', 'produces': ['application/json'], 'parameters': [{'name': 'policy', 'in': 'path', 'description': 'ID or name of policy to bind field to', 'required': True, 'type': 'str'}, {'name': 'field', 'in': 'path', 'description': 'ID or name of field to unbind', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for policy in (when using policy name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
search_field_descriptors = {'tags': ['cases/v2/field'], 'summary': 'Search field descriptors. (INTERNAL)', 'description': 'This endpoint will search all fields the user has access to, and apply the search criteria specified in the request.', 'operationId': 'searchFieldDescriptors', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific fields (by name or ID).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'domain': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields bound to one of these domains.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields which are in use in one of the specified services (service ID or shortname).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'policy': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields which are in use in one of the specified policies (by policy ID or name)', 'uniqueItems': True, 'items': {'type': 'string'}}, 'availableForCaseID': {'type': 'int', 'position': 0, 'description': 'Restrict search to fields which are available for specified case (by ID)'}, 'valueType': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these value types.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (start timestamp).'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (end timestamp).'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdatedTimestamp).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords).', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields created or updated by specified users (by id or shortname, selected by userFieldStrategy).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead.", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdByUser', 'lastUpdatedByUser', 'all']}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'customer', 'domain', '-createdByUser', '-createdTimestamp', '-lastUpdatedByUser', '-lastUpdatedTimestamp', '-name', '-customer', '-domain']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific fields (by name or ID).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'domain': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields bound to one of these domains.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields which are in use in one of the specified services (service ID or shortname).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'policy': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields which are in use in one of the specified policies (by policy ID or name)', 'uniqueItems': True, 'items': {'type': 'string'}}, 'availableForCaseID': {'type': 'int', 'position': 0, 'description': 'Restrict search to fields which are available for specified case (by ID)'}, 'valueType': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these value types.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (start timestamp).'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (end timestamp).'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdatedTimestamp).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords).', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to fields created or updated by specified users (by id or shortname, selected by userFieldStrategy).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead.", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdByUser', 'lastUpdatedByUser', 'all']}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'customer', 'domain', '-createdByUser', '-createdTimestamp', '-lastUpdatedByUser', '-lastUpdatedTimestamp', '-name', '-customer', '-domain']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value of this field, if the field is not set. If defaultValue is not set, the field will not be regarded as set on the case until a value is provided.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.', 'readOnly': True}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'readOnly': True, 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'readOnly': True, 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.', 'readOnly': True}, 'memberOf': {'allOf': [{'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {'description': {'type': 'string'}}}]}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Service ID'}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname'}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Service name localized to the current users language'}}}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'readOnly': True, 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Category name', 'readOnly': True}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Category shortname', 'readOnly': True}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Category name localized to current users language', 'readOnly': True}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.', 'readOnly': True}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.', 'readOnly': True}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.', 'readOnly': True}}}}}, 'valueSource': {'type': 'dict', 'properties': {'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.', 'readOnly': True}}}, 'listType': {'type': 'dict', 'properties': {'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label.', 'readOnly': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'readOnly': True}, 'label': {'type': 'str', 'readOnly': True}}}}}}, 'type': 'str', 'options': ['url', 'list']}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'DEPRECATED: Options to the GUI renderer.'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this field.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this field.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field.', 'enum': ['user', 'tech', 'admin']}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language)'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names', 'additionalProperties': {'type': 'string'}}, 'localizedDescription': {'type': 'str', 'position': 0, 'description': 'Localized description (current users language)'}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions', 'additionalProperties': {'type': 'string'}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was last updated (in ISO-8601 time format)'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
search_field_policies = {'tags': ['cases/v2/field'], 'summary': 'Search field policies (INTERNAL)', 'description': 'This endpoint will search all policies which the user has role based permission for, limited by provided search criteria.', 'operationId': 'searchFieldPolicies', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'domain': {'type': 'list', 'position': 0, 'description': 'Search by domain (ID or name).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords).', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'all']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (start timestamp).'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (end timestamp).'}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdatedTimestamp).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to policies created or updated by specified users (by id or shortname, selected by userFieldStrategy).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead.", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdByUser', 'lastUpdatedByUser', 'all']}}, 'field': {'type': 'list', 'position': 0, 'description': 'Search for policies bound to specific fields (by field UUID or name).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'policy': {'type': 'list', 'position': 0, 'description': 'Search for policies with specified id (UUID or name).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'customer', 'domain', '-createdByUser', '-createdTimestamp', '-lastUpdatedByUser', '-lastUpdatedTimestamp', '-name', '-customer', '-domain']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'domain': {'type': 'list', 'position': 0, 'description': 'Search by domain (ID or name).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords).', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'all']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (start timestamp).'}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to a time frame based on the set TimeFieldStrategy (end timestamp).'}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdatedTimestamp).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to policies created or updated by specified users (by id or shortname, selected by userFieldStrategy).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead.", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields).', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdByUser', 'lastUpdatedByUser', 'all']}}, 'field': {'type': 'list', 'position': 0, 'description': 'Search for policies bound to specific fields (by field UUID or name).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'policy': {'type': 'list', 'position': 0, 'description': 'Search for policies with specified id (UUID or name).', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'name', 'customer', 'domain', '-createdByUser', '-createdTimestamp', '-lastUpdatedByUser', '-lastUpdatedTimestamp', '-name', '-customer', '-domain']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_field_descriptor = {'tags': ['cases/v2/field'], 'summary': 'Update a field descriptor. (INTERNAL)', 'description': '', 'operationId': 'updateFieldDescriptor', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'field', 'in': 'path', 'description': 'ID or name of descriptor to update', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for field in (when using field name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set, change the name of the field. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'If set, change the shortname of the field. => [a-zA-Z0-9_:\\-\\.]*'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'If set, update the localized names. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'additionalProperties': {'type': 'string'}}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'If set, update the localized descriptions. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'additionalProperties': {'type': 'string'}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'If set, change the value type for the field.The field will only accept values that can be safely converted to this value type. If the field uses an autocompleter, the autocompleter should convert user input to valid values of this type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'multiValue': {'type': 'bool', 'position': 0, 'description': 'If set, change the multivalue parameter of this field. This will not affect existing cases with this field set.'}, 'hidden': {'type': 'bool', 'position': 0, 'description': 'If set, change the hidden parameter of this field.'}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'If set, change the default value to populate this field with.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.'}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.'}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.'}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.'}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.'}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field. With no maxLength, the system maximum is 255 characters.'}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field. With no maxLength, the system maximum is 65k.'}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'str', 'position': 0, 'description': 'If set, only allow subjects which have this permission granted.'}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.'}, 'memberOf': {'type': 'int', 'position': 0, 'description': 'If set, only allow subjects which are member of this group'}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases for this service.'}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases with this category.'}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.'}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.'}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.'}}}, 'jsonSettings': {'type': 'object'}}}, 'valueSource': {'type': 'dict', 'properties': {'listType': {'type': 'dict', 'properties': {'values': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, values specifies a set of available values. This is a shorthand notation for a list of entries with equal key/label.', 'items': {'type': 'string'}}, 'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label. Use either parameter entries or the parameter values. ', 'items': {'type': 'dict', 'properties': {'key': {'type': 'string'}, 'label': {'type': 'string'}}}}}}, 'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.'}}}}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'Renderer options. Only for use by the Argus frontend application.', 'additionalProperties': {'type': 'string'}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'If set, update the required service role to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'If set, update the required service role to write this field.', 'enum': ['user', 'tech', 'admin']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.'}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'defaultValue': {'type': 'str', 'position': 0, 'description': 'The default value of this field, if the field is not set. If defaultValue is not set, the field will not be regarded as set on the case until a value is provided.'}, 'validator': {'type': 'dict', 'properties': {'integerSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'int', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'int', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'floatSettings': {'type': 'dict', 'properties': {'minimum': {'type': 'float', 'position': 0, 'description': 'Minimum value for this field.', 'readOnly': True}, 'maximum': {'type': 'float', 'position': 0, 'description': 'Maximum value for this field.', 'readOnly': True}}}, 'stringSettings': {'type': 'dict', 'properties': {'regex': {'type': 'str', 'position': 0, 'description': 'Regular expression which values must match.', 'readOnly': True}, 'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'textSettings': {'type': 'dict', 'properties': {'maxLength': {'type': 'int', 'position': 0, 'description': 'Max length for this field.', 'readOnly': True}}}, 'ipSettings': {'type': 'dict', 'properties': {'ipVersion': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified IP family.', 'readOnly': True, 'enum': ['IPv4', 'IPv6']}}}, 'subjectSettings': {'type': 'dict', 'properties': {'subjectType': {'type': 'str', 'position': 0, 'description': 'If set, limit values to specified subject type.', 'readOnly': True, 'enum': ['user', 'group']}, 'requiredPermission': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow subjects from same customer as the case.', 'readOnly': True}, 'memberOf': {'allOf': [{'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {'description': {'type': 'string'}}}]}}}, 'caseSettings': {'type': 'dict', 'properties': {'service': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Service ID'}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname'}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Service name localized to the current users language'}}}, 'caseType': {'type': 'str', 'position': 0, 'description': 'If set, only allow cases of this type.', 'readOnly': True, 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Category name', 'readOnly': True}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Category shortname', 'readOnly': True}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Category name localized to current users language', 'readOnly': True}}}, 'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow cases from same customer as the current case.', 'readOnly': True}}}, 'documentSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow documents from same customer as the current case.', 'readOnly': True}}}, 'assetSettings': {'type': 'dict', 'properties': {'sameCustomer': {'type': 'bool', 'position': 0, 'description': 'If true, only allow assets from same customer as the current case.', 'readOnly': True}}}}}, 'valueSource': {'type': 'dict', 'properties': {'urlType': {'type': 'dict', 'properties': {'queryURL': {'type': 'str', 'position': 0, 'description': 'For valuesource of type url, queryURL specifies the endpoint to search for values. Any string %s in the URL will be replaced with the search string if set. This endpoint will also be invoked to lookup single values when resolving existing field values, so it should return the exact match of the value key.', 'readOnly': True}}}, 'listType': {'type': 'dict', 'properties': {'entries': {'type': 'list', 'position': 0, 'description': 'For valuesource of type list, entries specifies a set of available field values, each having a key and a label.', 'readOnly': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'readOnly': True}, 'label': {'type': 'str', 'readOnly': True}}}}}}, 'type': 'str', 'options': ['url', 'list']}}, 'rendererOptions': {'type': 'dict', 'position': 0, 'description': 'DEPRECATED: Options to the GUI renderer.'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this field.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this field.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field.', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field.', 'enum': ['user', 'tech', 'admin']}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language)'}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names', 'additionalProperties': {'type': 'string'}}, 'localizedDescription': {'type': 'str', 'position': 0, 'description': 'Localized description (current users language)'}, 'localizedDescriptions': {'type': 'dict', 'position': 0, 'description': 'Localized descriptions', 'additionalProperties': {'type': 'string'}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this descriptor was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_field_policy = {'tags': ['cases/v2/field'], 'summary': 'Update a field policy. (INTERNAL)', 'description': '', 'operationId': 'updateFieldPolicy', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'policy', 'in': 'path', 'description': 'ID or name of policy to update', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to look for policy in (when using policy name for ID). Defaults to the current users domain.', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set, change the name of this policy. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy.'}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy.'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}, 'type': 'str', 'options': ['user', 'group']}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies.', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE', 'HIDDEN']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type.', 'readOnly': True, 'enum': ['booleanType', 'integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType', 'jsonType']}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The shortname of this field.', 'readOnly': True}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name.'}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy.', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format)'}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}