"""Autogenerated API schema"""
from argus_api import session


aggregate_metrics = {'tags': ['metrics/v1'], 'summary': 'Fetch metrics that matches given aggregation criteria (PUBLIC)', 'description': '', 'operationId': 'aggregateMetrics', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'descriptor', 'in': 'path', 'description': 'Shortname or ID of descriptor', 'required': True, 'type': 'str'}, {'name': 'descriptorDomain', 'in': 'query', 'description': "Domain which is used if short name is specified for 'descriptor' parameter. Defaults to current user domain.", 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Metric records aggregation search request', 'required': False, 'schema': {'type': 'object', 'required': ['endTimestamp', 'startTimestamp', 'values'], 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.'}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. Deprecated, use keyIntervals instead.', 'additionalProperties': {'type': 'string'}}, 'keyIntervals': {'type': 'list', 'position': 0, 'description': 'List of key intervals, to filter the aggregation on. (default null)', 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'key' type field the interval is set on."}, 'values': {'type': 'list', 'position': 0, 'description': "Set of discrete values the records will be filtered with. This field uses 'Where value in' logic. Please make sure the values type is congruent with the key field type. For IP addresses only single IPs are allowed. Can't be used with ranges.", 'uniqueItems': True, 'items': {'type': 'string'}}, 'gt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values larger than the value in this field.'}, 'lt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values smaller than the value in this field.'}, 'gte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values larger then or equal to the value in this field. Can't be used together with 'gt'"}, 'lte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values smaller then or equal to the value in this field. Can't be used together with 'lt'"}, 'cidr': {'type': 'str', 'position': 0, 'description': "CIDR mask, only for keys holding ip addresses. Can't be used together with 'gte', 'gt', 'lte', 'lt'"}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.'}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. Deprecated, use keyIntervals instead.', 'additionalProperties': {'type': 'string'}}, 'keyIntervals': {'type': 'list', 'position': 0, 'description': 'List of key intervals, to filter the aggregation on. (default null)', 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'key' type field the interval is set on."}, 'values': {'type': 'list', 'position': 0, 'description': "Set of discrete values the records will be filtered with. This field uses 'Where value in' logic. Please make sure the values type is congruent with the key field type. For IP addresses only single IPs are allowed. Can't be used with ranges.", 'uniqueItems': True, 'items': {'type': 'string'}}, 'gt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values larger than the value in this field.'}, 'lt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values smaller than the value in this field.'}, 'gte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values larger then or equal to the value in this field. Can't be used together with 'gt'"}, 'lte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values smaller then or equal to the value in this field. Can't be used together with 'lt'"}, 'cidr': {'type': 'str', 'position': 0, 'description': "CIDR mask, only for keys holding ip addresses. Can't be used together with 'gte', 'gt', 'lte', 'lt'"}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.'}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. Deprecated, use keyIntervals instead.', 'additionalProperties': {'type': 'string'}}, 'keyIntervals': {'type': 'list', 'position': 0, 'description': 'List of key intervals, to filter the aggregation on. (default null)', 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'key' type field the interval is set on."}, 'values': {'type': 'list', 'position': 0, 'description': "Set of discrete values the records will be filtered with. This field uses 'Where value in' logic. Please make sure the values type is congruent with the key field type. For IP addresses only single IPs are allowed. Can't be used with ranges.", 'uniqueItems': True, 'items': {'type': 'string'}}, 'gt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values larger than the value in this field.'}, 'lt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values smaller than the value in this field.'}, 'gte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values larger then or equal to the value in this field. Can't be used together with 'gt'"}, 'lte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values smaller then or equal to the value in this field. Can't be used together with 'lt'"}, 'cidr': {'type': 'str', 'position': 0, 'description': "CIDR mask, only for keys holding ip addresses. Can't be used together with 'gte', 'gt', 'lte', 'lt'"}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': []}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded.'}}}}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded.'}}}}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records submitted after this time.Allows the use of unix timestamp (milliseconds), ISO timestamp, or relative time.'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records submitted before this time. Allows the use of unix timestamp (milliseconds), ISO timestamp, or relative time. (default now)'}, 'timeZone': {'type': 'str', 'position': 0, 'description': "Settable Timezone. For more information please refer to official java documentation\nhttps://docs.oracle.com/middleware/12211/wcs/tag-ref/MISC/TimeZones.html\nIf not set the data will be localized according to user's timezone. (default null)"}, 'skipKeyTranslation': {'type': 'bool', 'position': 0, 'description': 'Whether to skip key translation and return the raw value. (default false)', 'default': False}, 'resolution': {'type': 'int', 'position': 0, 'description': "Aggregation resolution period in units specified by 'resolutionUnit' property. If 0 the resolution is the entire time span given by the start and end timestamps. If the expected combination of timestamps, resolution, and resolution unit would result in more buckets than ElasticSearch permits, which is 10000, then the request will be denied. Note that the initial calculation on this is rough, and that ES might still deny the request. In which case lower the resolution.", 'minimum': 0}, 'resolutionUnit': {'type': 'str', 'position': 0, 'description': 'Units for aggregation resolution. (default millisecond)', 'enum': ['millisecond', 'second', 'minute', 'hour', 'day', 'milliseconds', 'seconds', 'minutes', 'hours', 'days']}, 'groupBy': {'type': 'list', 'position': 0, 'description': "List of descriptor's key names for aggregating the result. The result will be grouped into key buckets up to the limit given.The buckets themselves will be ordered in a descending order based on the values aggregated.", 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': "Name of the key you want to have the results grouped by, results will return one bucket for each found key value.\nAdditionally supports 'customer' as an option.\n"}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. Min 1, max 10000 (default 10)', 'minimum': 1, 'maximum': 10000, 'default': 10}}}}, 'groupByCustomer': {'type': 'bool', 'position': 0, 'description': 'DEPRECATED: States whether Metric records will be aggregated by customers. Deprecated, use the groupBy field. (default false)', 'default': False}, 'includeOthers': {'type': 'bool', 'position': 0, 'description': 'States whether the aggregation results will contain buckets for the data not included in the keys given by the groupBy field.Is not used if the groupBy field is empty. It defaults to true. (default true)', 'default': True}, 'calendarInterval': {'type': 'str', 'position': 0, 'description': 'States the calendar interval the aggregation results should be sorted by, such as month or year.It only allows for a resolution of 1, and overrides the resolution unit such that if calendar interval is week, then the result will be in intervals of 1 whole week, expanding backwards in time for start and forwards for end. It is by defaults not used and set to null. (default null)', 'enum': ['second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']}, 'values': {'type': 'list', 'position': 0, 'description': "Descriptor's values included in aggregation result.", 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'value' type field the aggregation should be performed on."}, 'aggregationFunction': {'type': 'str', 'position': 0, 'description': "Aggregation function used for aggregating the result. Defaults to the metric descriptor's 'defaultAggregationFunction'.", 'enum': ['sum', 'avg', 'min', 'max', 'wavg', 'sumOfSquares']}, 'weightByValue': {'type': 'str', 'position': 0, 'description': "Which 'value' type field should be used as weight. This field is required for wavg aggregate function, it is not used by other functions."}}}, 'maxItems': 2147483647, 'minItems': 1}, 'sortBy': {'type': 'list', 'position': 0, 'description': "Fields to sort result by. The results are sortable by any of the keys or values in the resulting aggregation. Note: you have to provide the exact names of the fields you need the sorting done on. So if the resulting field name is 'value1_sum' this is what has to be provided. The sorting is prioritized based on the order given, and in the case of key and value having the same name, then the value is used, while the key is ignored. Note: use '-' to sort in desc order. By default the results are not sorted. To sort by customer use option field name 'customerID'.", 'items': {'type': 'string'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'metricDescriptorID': {'type': 'str', 'position': 0, 'description': 'Unique identifier of the metric descriptor.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'metricTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of metric aggregate. 0 if query is not time-based.'}, 'keys': {'type': 'list', 'position': 0, 'description': 'Keys associated to the metric aggregate.', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric key.'}, 'value': {'type': 'str', 'position': 0, 'description': 'Value of the metric key.'}, 'translation': {'type': 'str', 'position': 0, 'description': 'Translation of the key value to a human readable string.'}}}}, 'values': {'type': 'list', 'position': 0, 'description': 'Measured values for the metric aggregate.', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric value.'}, 'value': {'type': 'int', 'position': 0, 'description': 'Actual value of the metric value.'}, 'unit': {'type': 'str', 'position': 0, 'description': 'The unit in which the value is measured', 'enum': ['count', 'milliseconds', 'seconds', 'minutes', 'hours', 'bytes']}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}, '404': {'description': 'Object not found'}}}
search_metrics = {'tags': ['metrics/v1'], 'summary': 'Search the submitted metrics for a specific descriptor. (PUBLIC)', 'description': '', 'operationId': 'searchMetrics', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'descriptor', 'in': 'path', 'description': 'Shortname or ID of descriptor', 'required': True, 'type': 'str'}, {'name': 'descriptorDomain', 'in': 'query', 'description': "Domain which is used if short name is specified for 'descriptor' parameter. Defaults to current user domain.", 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Metric records search request', 'required': False, 'schema': {'type': 'object', 'required': ['endTimestamp', 'startTimestamp'], 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.'}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. Deprecated, use keyIntervals instead.', 'additionalProperties': {'type': 'string'}}, 'keyIntervals': {'type': 'list', 'position': 0, 'description': 'List of key intervals, to filter the aggregation on. (default null)', 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'key' type field the interval is set on."}, 'values': {'type': 'list', 'position': 0, 'description': "Set of discrete values the records will be filtered with. This field uses 'Where value in' logic. Please make sure the values type is congruent with the key field type. For IP addresses only single IPs are allowed. Can't be used with ranges.", 'uniqueItems': True, 'items': {'type': 'string'}}, 'gt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values larger than the value in this field.'}, 'lt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values smaller than the value in this field.'}, 'gte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values larger then or equal to the value in this field. Can't be used together with 'gt'"}, 'lte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values smaller then or equal to the value in this field. Can't be used together with 'lt'"}, 'cidr': {'type': 'str', 'position': 0, 'description': "CIDR mask, only for keys holding ip addresses. Can't be used together with 'gte', 'gt', 'lte', 'lt'"}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.'}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. Deprecated, use keyIntervals instead.', 'additionalProperties': {'type': 'string'}}, 'keyIntervals': {'type': 'list', 'position': 0, 'description': 'List of key intervals, to filter the aggregation on. (default null)', 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'key' type field the interval is set on."}, 'values': {'type': 'list', 'position': 0, 'description': "Set of discrete values the records will be filtered with. This field uses 'Where value in' logic. Please make sure the values type is congruent with the key field type. For IP addresses only single IPs are allowed. Can't be used with ranges.", 'uniqueItems': True, 'items': {'type': 'string'}}, 'gt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values larger than the value in this field.'}, 'lt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values smaller than the value in this field.'}, 'gte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values larger then or equal to the value in this field. Can't be used together with 'gt'"}, 'lte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values smaller then or equal to the value in this field. Can't be used together with 'lt'"}, 'cidr': {'type': 'str', 'position': 0, 'description': "CIDR mask, only for keys holding ip addresses. Can't be used together with 'gte', 'gt', 'lte', 'lt'"}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.'}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. Deprecated, use keyIntervals instead.', 'additionalProperties': {'type': 'string'}}, 'keyIntervals': {'type': 'list', 'position': 0, 'description': 'List of key intervals, to filter the aggregation on. (default null)', 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of the 'key' type field the interval is set on."}, 'values': {'type': 'list', 'position': 0, 'description': "Set of discrete values the records will be filtered with. This field uses 'Where value in' logic. Please make sure the values type is congruent with the key field type. For IP addresses only single IPs are allowed. Can't be used with ranges.", 'uniqueItems': True, 'items': {'type': 'string'}}, 'gt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values larger than the value in this field.'}, 'lt': {'type': 'str', 'position': 0, 'description': 'Include only records with the key values smaller than the value in this field.'}, 'gte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values larger then or equal to the value in this field. Can't be used together with 'gt'"}, 'lte': {'type': 'str', 'position': 0, 'description': "Include only records with the key values smaller then or equal to the value in this field. Can't be used together with 'lt'"}, 'cidr': {'type': 'str', 'position': 0, 'description': "CIDR mask, only for keys holding ip addresses. Can't be used together with 'gte', 'gt', 'lte', 'lt'"}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': []}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded.'}}}}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded.'}}}}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records submitted after this time.Allows the use of unix timestamp (milliseconds), ISO timestamp, or relative time.'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records submitted before this time. Allows the use of unix timestamp (milliseconds), ISO timestamp, or relative time. (default now)'}, 'timeZone': {'type': 'str', 'position': 0, 'description': "Settable Timezone. For more information please refer to official java documentation\nhttps://docs.oracle.com/middleware/12211/wcs/tag-ref/MISC/TimeZones.html\nIf not set the data will be localized according to user's timezone. (default null)"}, 'skipKeyTranslation': {'type': 'bool', 'position': 0, 'description': 'Whether to skip key translation and return the raw value. (default false)', 'default': False}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. Cannot exceed 10000 which is the Elasticsearch search window. (default 25)', 'maximum': 10000, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object.Cannot, in combination with the limit, exceed 10000, as this will exceed the Elasticsearch search window.', 'maximum': 9999}, 'sortBy': {'type': 'list', 'position': 0, 'description': "Fields to sort result by. The results are sortable by any of the keys or values in the descriptor,e.g. 'suricata_detections' is sortable by 'host, interface, alerts, rules_loaded'.The sorting is prioritized based on the order given, and in the case of both key and value having the same name,then the value is used, while the key is ignored.Note: use '-' to sort in desc order. By default the results are sorted by timestamp.", 'items': {'type': 'string'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the metric as required by ES'}, 'descriptor': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the  metric descriptor. This name is unique per domain.'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'metricTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the metric record provided by client.'}, 'submissionTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the metric record submission.'}, 'submittedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'keys': {'type': 'list', 'position': 0, 'description': 'List of key associated to the metric record.', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric key.'}, 'value': {'type': 'str', 'position': 0, 'description': 'Value of the metric key.'}, 'translation': {'type': 'str', 'position': 0, 'description': 'Translation of the key value to a human readable string.'}}}}, 'values': {'type': 'list', 'position': 0, 'description': 'List of measured values for a given metricTimestamp.', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric value.'}, 'value': {'type': 'int', 'position': 0, 'description': 'Actual value of the metric value.'}, 'unit': {'type': 'str', 'position': 0, 'description': 'The unit in which the value is measured', 'enum': ['count', 'milliseconds', 'seconds', 'minutes', 'hours', 'bytes']}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
submit_metric = {'tags': ['metrics/v1'], 'summary': 'Submit new metric (PUBLIC)', 'description': '', 'operationId': 'submitMetric', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'descriptor', 'in': 'path', 'description': 'ID or short name of metric descriptor', 'required': True, 'type': 'str'}, {'name': 'descriptorDomain', 'in': 'query', 'description': "Domain which is used if short name is specified for 'descriptor' parameter. Defaults to current user domain.", 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Metric submission request', 'required': False, 'schema': {'type': 'object', 'required': ['records'], 'properties': {'records': {'type': 'list', 'position': 0, 'description': 'Metric records for submission.', 'items': {'type': 'dict', 'required': ['keys', 'values'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': "ID or shortname of customer owning the metric record. This will default to current user's customer if not set. For global metrics, this field should not be set. (default Current user customer)"}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'ID or shortname of domain for customer owning the metric record. (default Current user domain)'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the metric record. (default now)', 'minimum': 1}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Keys for the metric record.', 'additionalProperties': {'type': 'string'}}, 'values': {'type': 'dict', 'position': 0, 'description': 'Measured values for the metric record.', 'additionalProperties': {'type': 'int'}}}}, 'maxItems': 2147483647, 'minItems': 1}, 'ignoreOnFailed': {'type': 'bool', 'position': 0, 'description': 'Set this value for successful response even failures occur while submitting. (default false)', 'default': False}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'success': {'type': 'int', 'position': 0, 'description': 'Number of successfully submitted metric records.'}, 'failed': {'type': 'int', 'position': 0, 'description': 'Number of failed metric records.'}, 'errorInformationList': {'type': 'list', 'position': 0, 'description': 'Information regarding any metrics that failed during submission.', 'items': {'type': 'dict', 'properties': {'submissionIndex': {'type': 'int', 'position': 0, 'description': 'Index of the submission as it appears in the submission request.'}, 'errorMessages': {'type': 'list', 'position': 0, 'description': 'String message of error cause.', 'items': {'type': 'string'}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}