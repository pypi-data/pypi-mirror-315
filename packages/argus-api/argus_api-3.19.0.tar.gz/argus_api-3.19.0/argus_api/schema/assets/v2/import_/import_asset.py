"""Autogenerated API schema"""
from argus_api import session


get_import_status_by_id = {'tags': ['development'], 'summary': 'Retrieve the status of an import job by the job id returned when submitting an import request (DEV)', 'description': '', 'operationId': 'getImportStatusByID', 'produces': ['application/json'], 'parameters': [{'name': 'importJobID', 'in': 'path', 'description': 'ID assigned to the import job', 'required': True, 'type': 'str'}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include any comments generated by the import job', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id assigned to the import job'}, 'asset': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'dataSourceID': {'type': 'str', 'position': 0, 'description': 'ID of the Data Source that reported this asset'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the asset'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the asset'}}, 'description': "Compact representation of an Asset's metadata"}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'dataSource': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of data source'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the data source'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the data source'}}, 'description': "Data Source's metadata"}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import was submitted'}, 'submittedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'jobStartTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import pipeline started processing the import'}, 'jobEndTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import pipeline completed processing the import'}, 'jobStatus': {'type': 'str', 'position': 0, 'description': 'The current status of the import job', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'jobResult': {'type': 'str', 'position': 0, 'description': 'The final result of the import job', 'enum': ['created', 'updated', 'failed']}, 'comments': {'type': 'list', 'position': 0, 'description': 'Any comments generated while processing the import, sorted by their timestamps', 'items': {'type': 'dict', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'The actual comment'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'When the comment was generated by the import process'}}, 'description': 'A comment added to an asset import status entity as the job progresses through the import pipeline'}}, 'submittedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components submitted by the import request'}, 'newComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components created by the import job'}, 'expiredComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components expired by the import job'}, 'rejectedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components rejected by the import job'}, 'replacedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components replaced by the import job'}, 'appendedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components appended by the import job'}, 'refreshedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components refreshed by the import job'}, 'submittedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations submitted by the import request'}, 'newObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations created by the import job'}, 'processedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations processed by the import job'}, 'invalidObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of invalid observations processed by the import job'}, 'failedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of observations the import job failed to process'}, 'refreshedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations refreshed by the import job'}}, 'description': 'The status of an import request as it progresses through the import processing pipeline'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
import_asset = {'tags': ['development'], 'summary': 'Imports Assets (DEV)', 'description': '', 'operationId': 'importAsset', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Asset import request', 'required': False, 'schema': {'type': 'object', 'required': ['assetIdentification', 'customer', 'dataSource', 'ttl'], 'properties': {'assetName': {'type': 'str', 'position': 0, 'description': 'Display name of the Asset. Used if new asset. If not set a random UUID will be generated'}, 'dataSource': {'type': 'str', 'position': 0, 'description': 'Required ID or short name of the data source'}, 'customer': {'type': 'str', 'position': 0, 'description': "ID or short name of the asset's customer"}, 'assetIdentification': {'type': 'dict', 'required': ['assetDefinition', 'strategy'], 'properties': {'strategy': {'type': 'str', 'position': 0, 'description': 'Identification strategy to be used - by asset or by component', 'enum': ['asset', 'component']}, 'asset': {'type': 'str', 'position': 0, 'description': 'ID or shortName of asset - required if identifying by asset'}, 'assetDefinition': {'type': 'str', 'position': 0, 'description': "ID or shortname of the asset's definition"}, 'identificationComponent': {'type': 'str', 'position': 0, 'description': 'ID or shortName of component - required if identifying by component'}, 'identificationComponentValue': {'type': 'str', 'position': 0, 'description': 'Component value, parsed based on the component definition type - required if identifying by component'}}, 'description': 'Request to identify an Asset'}, 'components': {'type': 'list', 'position': 0, 'description': 'Specify components to import', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['componentDefinition', 'value'], 'properties': {'componentDefinition': {'type': 'str', 'position': 0, 'description': 'ID Or shortName of component definition'}, 'value': {'type': 'str', 'position': 0, 'description': "Value which is parsed based on the definition's type"}}, 'description': 'Request to import Components to an Asset'}}, 'observations': {'type': 'list', 'position': 0, 'description': 'Observations to be added to the asset', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['cvss', 'vulnerability'], 'properties': {'vulnerability': {'type': 'str', 'position': 0, 'description': 'Identify the Vulnerability definition by ID (UUID) or vulnerability identifier (e.g. CVE-2015-3429) => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'severity': {'type': 'str', 'position': 0, 'description': 'Optional field which describes the severity of the observation', 'enum': ['info', 'low', 'medium', 'high', 'critical']}, 'rawOutput': {'type': 'str', 'position': 0, 'description': 'Raw output of the scanner'}, 'cvss': {'type': 'float', 'position': 0, 'description': 'CVSS score of the observation (range from 0 to 10) (default 0.0)', 'minimum': 0, 'maximum': 10, 'default': 0.0}, 'observationDescription': {'type': 'str', 'position': 0, 'description': 'Description of observation'}, 'observationReferences': {'type': 'list', 'position': 0, 'description': 'Observation references', 'uniqueItems': True, 'items': {'type': 'string'}}, 'components': {'type': 'list', 'position': 0, 'description': 'Observation components connected to the observation', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['component', 'value'], 'properties': {'component': {'type': 'str', 'position': 0, 'description': 'Id or short name of component definition'}, 'value': {'type': 'str', 'position': 0, 'description': 'Component value, will be eventually parsed based on the component definition type'}, 'ttl': {'type': 'int', 'position': 0, 'description': 'Time to live duration of this observations since last seen, 0 means will not expire. If not set will inherit from the parent ObservationImportRequest if set there and the root DataImportRequest otherwise.', 'minimum': 0}}, 'description': 'Observation components connected to an observation import in a data import request'}}, 'ttl': {'type': 'int', 'position': 0, 'description': 'Time to live duration of this observations since last seen, 0 means will not expire. If not set will inherit from the root DataImportRequest ttl.', 'minimum': 0}}, 'description': 'Request to record vulnerabilities observed on an asset submitted to the asset import endpoint'}}, 'ttl': {'type': 'int', 'position': 0, 'description': "Time to live duration of this asset since last seen, 0 means won't expire.Will be inherited by any observations and their components in the import if they do not have their own non-null TTLs.", 'minimum': 0}}, 'description': 'Request to import an Asset'}}], 'responses': {'200': {'description': 'OK'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
list_import_status = {'tags': ['development'], 'summary': 'Basic import status search (DEV)', 'description': '', 'operationId': 'listImportStatus', 'produces': ['application/json'], 'parameters': [{'name': 'job', 'in': 'query', 'description': 'Job ids', 'required': False, 'type': 'list', 'items': {'type': 'str'}, 'collectionFormat': 'multi'}, {'name': 'customer', 'in': 'query', 'description': 'Customer ids or short names', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'asset', 'in': 'query', 'description': 'Asset ids or short names', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'minCount', 'in': 'query', 'description': 'Filter by minCount', 'required': False, 'type': 'int', 'minimum': 0}, {'name': 'maxCount', 'in': 'query', 'description': 'Filter by maxCount', 'required': False, 'type': 'int', 'minimum': 0}, {'name': 'countFieldStrategy', 'in': 'query', 'description': 'Which count field(s) to filter min/maxCount', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}, 'collectionFormat': 'multi'}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'required': False, 'type': 'str', 'default': '0', 'minimum': 0}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'required': False, 'type': 'str', 'default': '0', 'minimum': 0}, {'name': 'timeFieldStrategy', 'in': 'query', 'description': 'Which time field(s) to filter by timestamp start/end', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result set', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result set', 'required': False, 'type': 'int', 'default': 0}, {'name': 'sortBy', 'in': 'query', 'description': 'Field(s) to sort by - refer to the search POST endpoint to see which fields are permitted', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include any comments generated by the import job', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id assigned to the import job'}, 'asset': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'dataSourceID': {'type': 'str', 'position': 0, 'description': 'ID of the Data Source that reported this asset'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the asset'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the asset'}}, 'description': "Compact representation of an Asset's metadata"}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'dataSource': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of data source'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the data source'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the data source'}}, 'description': "Data Source's metadata"}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import was submitted'}, 'submittedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'jobStartTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import pipeline started processing the import'}, 'jobEndTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import pipeline completed processing the import'}, 'jobStatus': {'type': 'str', 'position': 0, 'description': 'The current status of the import job', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'jobResult': {'type': 'str', 'position': 0, 'description': 'The final result of the import job', 'enum': ['created', 'updated', 'failed']}, 'comments': {'type': 'list', 'position': 0, 'description': 'Any comments generated while processing the import, sorted by their timestamps', 'items': {'type': 'dict', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'The actual comment'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'When the comment was generated by the import process'}}, 'description': 'A comment added to an asset import status entity as the job progresses through the import pipeline'}}, 'submittedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components submitted by the import request'}, 'newComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components created by the import job'}, 'expiredComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components expired by the import job'}, 'rejectedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components rejected by the import job'}, 'replacedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components replaced by the import job'}, 'appendedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components appended by the import job'}, 'refreshedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components refreshed by the import job'}, 'submittedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations submitted by the import request'}, 'newObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations created by the import job'}, 'processedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations processed by the import job'}, 'invalidObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of invalid observations processed by the import job'}, 'failedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of observations the import job failed to process'}, 'refreshedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations refreshed by the import job'}}, 'description': 'The status of an import request as it progresses through the import processing pipeline'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
search_import_status = {'tags': ['development'], 'summary': 'Search import statuses (DEV)', 'description': '', 'operationId': 'searchImportStatus', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Import status search request', 'required': False, 'schema': {'type': 'object', 'properties': {'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp). (default 0)'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp). (default 0)'}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'minCount': {'type': 'int', 'position': 0, 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at least this count i.e. >=', 'minimum': 0}, 'maxCount': {'type': 'int', 'position': 0, 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at most this count i.e. <=', 'minimum': 0}, 'countFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which count fields will be filtered with min/maxCount (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}}, 'countMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different count fields (all/any) using min/maxCount(default any) (default any)', 'enum': ['any', 'all']}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields to filter by (default submittedByUser)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['submittedByUser', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different user fields (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'job': {'type': 'list', 'position': 0, 'description': 'Filter by the IDs of the import jobs', 'uniqueItems': True, 'items': {'type': 'str'}}, 'asset': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'dataSource': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'importStatus': {'type': 'list', 'position': 0, 'description': 'Filter for import jobs with any of these statuses', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}}, 'importResult': {'type': 'list', 'position': 0, 'description': 'Filter for import jobs with any of these results', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'updated', 'failed']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criteria that are applied with logical OR by default', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp). (default 0)'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp). (default 0)'}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'minCount': {'type': 'int', 'position': 0, 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at least this count i.e. >=', 'minimum': 0}, 'maxCount': {'type': 'int', 'position': 0, 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at most this count i.e. <=', 'minimum': 0}, 'countFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which count fields will be filtered with min/maxCount (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}}, 'countMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different count fields (all/any) using min/maxCount(default any) (default any)', 'enum': ['any', 'all']}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields to filter by (default submittedByUser)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['submittedByUser', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different user fields (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'job': {'type': 'list', 'position': 0, 'description': 'Filter by the IDs of the import jobs', 'uniqueItems': True, 'items': {'type': 'str'}}, 'asset': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'dataSource': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'importStatus': {'type': 'list', 'position': 0, 'description': 'Filter for import jobs with any of these statuses', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}}, 'importResult': {'type': 'list', 'position': 0, 'description': 'Filter for import jobs with any of these results', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'updated', 'failed']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criteria that are applied with logical OR by default', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp). (default 0)'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp). (default 0)'}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'minCount': {'type': 'int', 'position': 0, 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at least this count i.e. >=', 'minimum': 0}, 'maxCount': {'type': 'int', 'position': 0, 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at most this count i.e. <=', 'minimum': 0}, 'countFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which count fields will be filtered with min/maxCount (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}}, 'countMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different count fields (all/any) using min/maxCount(default any) (default any)', 'enum': ['any', 'all']}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields to filter by (default submittedByUser)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['submittedByUser', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different user fields (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'job': {'type': 'list', 'position': 0, 'description': 'Filter by the IDs of the import jobs', 'uniqueItems': True, 'items': {'type': 'str'}}, 'asset': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'dataSource': {'type': 'list', 'position': 0, 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'importStatus': {'type': 'list', 'position': 0, 'description': 'Filter for import jobs with any of these statuses', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}}, 'importResult': {'type': 'list', 'position': 0, 'description': 'Filter for import jobs with any of these results', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'updated', 'failed']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criteria that are applied with logical OR by default', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching these criteria will be excluded (default false)', 'default': False}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching these criteria are required (logical AND-ed together with parent criteria) (default false)', 'default': False}}, 'description': 'Search sub-criteria for searching for import statuses with query logic i.e. AND/OR/NOT'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching these criteria will be excluded (default false)', 'default': False}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching these criteria are required (logical AND-ed together with parent criteria) (default false)', 'default': False}}, 'description': 'Search sub-criteria for searching for import statuses with query logic i.e. AND/OR/NOT'}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit the results to the specified amount (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip specified amount of results (default 0)', 'minimum': 0, 'default': 0}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Field(s) by which to sort the results (default jobEndTimestamp)', 'items': {'type': 'str', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'submittedComponentsCount', 'newComponentsCount', 'submittedObservationsCount', 'newObservationsCount', '-submittedTimestamp', '-jobStartTimestamp', '-jobEndTimestamp', '-submittedComponentsCount', '-newComponentsCount', '-submittedObservationsCount', '-newObservationsCount']}}, 'includeComments': {'type': 'bool', 'position': 0, 'description': 'Whether to include any comments generated by the import job'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id assigned to the import job'}, 'asset': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'dataSourceID': {'type': 'str', 'position': 0, 'description': 'ID of the Data Source that reported this asset'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the asset'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the asset'}}, 'description': "Compact representation of an Asset's metadata"}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'dataSource': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of data source'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the data source'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the data source'}}, 'description': "Data Source's metadata"}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import was submitted'}, 'submittedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'jobStartTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import pipeline started processing the import'}, 'jobEndTimestamp': {'type': 'int', 'position': 0, 'description': 'When the import pipeline completed processing the import'}, 'jobStatus': {'type': 'str', 'position': 0, 'description': 'The current status of the import job', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'jobResult': {'type': 'str', 'position': 0, 'description': 'The final result of the import job', 'enum': ['created', 'updated', 'failed']}, 'comments': {'type': 'list', 'position': 0, 'description': 'Any comments generated while processing the import, sorted by their timestamps', 'items': {'type': 'dict', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'The actual comment'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'When the comment was generated by the import process'}}, 'description': 'A comment added to an asset import status entity as the job progresses through the import pipeline'}}, 'submittedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components submitted by the import request'}, 'newComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components created by the import job'}, 'expiredComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components expired by the import job'}, 'rejectedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components rejected by the import job'}, 'replacedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components replaced by the import job'}, 'appendedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components appended by the import job'}, 'refreshedComponentsCount': {'type': 'int', 'position': 0, 'description': 'The number of asset components refreshed by the import job'}, 'submittedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations submitted by the import request'}, 'newObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations created by the import job'}, 'processedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations processed by the import job'}, 'invalidObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of invalid observations processed by the import job'}, 'failedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of observations the import job failed to process'}, 'refreshedObservationsCount': {'type': 'int', 'position': 0, 'description': 'The number of vulnerability observations refreshed by the import job'}}, 'description': 'The status of an import request as it progresses through the import processing pipeline'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}