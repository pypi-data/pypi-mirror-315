"""Autogenerated API schema"""
from argus_api import session


add_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Adds an analysis filter (INTERNAL)', 'description': '', 'operationId': 'addAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Add analysis filter request', 'required': False, 'schema': {'type': 'object', 'required': ['actions', 'customer', 'description', 'filters', 'name'], 'properties': {'shortName': {'type': 'str', 'position': 0, 'description': 'Optional short name of the filter. => [a-zA-Z0-9_:\\-\\.]*'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'str', 'position': 0, 'description': "The shortname or ID of the customer the filter belongs to. To create a global filter set the value to '0'"}, 'filters': {'type': 'dict', 'required': ['statementCode'], 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'required': ['actionName', 'triggerCode'], 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter (default false)', 'default': False}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage (default false)', 'default': False}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true the filter will store the raw events (default false)', 'default': False}, 'disableCompileStaticValidation': {'type': 'bool', 'position': 0, 'description': 'If true, we will skip static validation of the filter (default false)', 'default': False}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'A set of labels which can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'enabled': {'type': 'bool', 'position': 0, 'description': 'Whether or not the filter is enabled (default false)', 'default': False}, 'externallyManaged': {'type': 'bool', 'position': 0, 'description': 'Whether or not the filter code is externally managed (default false)', 'default': False}, 'authoredByUser': {'type': 'str', 'position': 0, 'description': 'The user that submitted the Filter-as-Code change. Should be used with externallyManaged=true.'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change. Should be used with externallyManaged=true.'}}, 'description': 'A request to add analysis filters'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
delete_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Deletes an analysis filter (INTERNAL)', 'description': '', 'operationId': 'deleteAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of filter to delete', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
disable_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Disables an analysis filter (INTERNAL)', 'description': '', 'operationId': 'disableAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Disable analysis filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was enabled/disabled'}}, 'description': 'A request to enable an analysis filter'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
disable_analysis_filter_on_instance = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Disables an analysis filter on instance (INTERNAL)', 'description': '', 'operationId': 'disableAnalysisFilterOnInstance', 'produces': ['application/json'], 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'instanceID', 'in': 'path', 'description': 'ID of the instance', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'filterID': {'type': 'int', 'position': 0, 'description': 'The ID of the filter disabled on an instance'}}, 'description': 'An object describing the filter disabled on an instance'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
duplicate_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Duplicates an analysis filter (INTERNAL)', 'description': '', 'operationId': 'duplicateAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Analysis filter duplication request', 'required': False, 'schema': {'type': 'object', 'properties': {'customer': {'type': 'str', 'position': 0, 'description': "The customer the duplicate should belong to (id or shortname). Use '0' to create a global filter, If this field is not set the default is using the same customer as the original filter."}}, 'description': 'A request to duplicate an analysis filter'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
enable_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Enables an analysis filter (INTERNAL)', 'description': '', 'operationId': 'enableAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Enable analysis filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was enabled/disabled'}}, 'description': 'A request to enable an analysis filter'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
enable_analysis_filter_on_instance = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Enables an analysis filter on instance (INTERNAL)', 'description': '', 'operationId': 'enableAnalysisFilterOnInstance', 'produces': ['application/json'], 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'instanceID', 'in': 'path', 'description': 'ID of the instance', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'filterID': {'type': 'int', 'position': 0, 'description': 'The ID of the filter enabled on instance'}}, 'description': 'An object describing the enabled filter on instance'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Gets an analysis filter (INTERNAL)', 'description': '', 'operationId': 'getAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of filter', 'required': True, 'type': 'str'}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in AnnotationFilter', 'required': False, 'type': 'bool', 'default': False}, {'name': 'revision', 'in': 'query', 'description': 'The expected revision of the filter', 'required': False, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_analysis_filter_revisions = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Gets a analysis filters earlier revisions (INTERNAL)', 'description': '', 'operationId': 'getAnalysisFilterRevisions', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to fetch revisions for', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'limit', 'in': 'query', 'description': 'The max amount of revisions to return', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'The number of revisions to skip before returning', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp the filter was updated'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'comment': {'type': 'str', 'position': 0, 'description': 'An explanation of the change that was made'}}, 'description': 'A an earlier version of a filter. Should describe when and why a filter was changes, and who made the change'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_analysis_filter_status = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Gets the status of a analysis filters instance statuses (INTERNAL)', 'description': '', 'operationId': 'listAnalysisFilterStatus', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision of the filter that is running'}, 'filterStatus': {'type': 'str', 'position': 0, 'description': 'The current filter status of the filter', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'errorMessage': {'type': 'str', 'position': 0, 'description': 'The message connected to the current error of the filter. null if no error is reported'}, 'loggingStatus': {'type': 'str', 'position': 0, 'description': 'The current logging status of the filter', 'enum': ['debug', 'info']}, 'container': {'type': 'dict', 'properties': {'instanceID': {'type': 'int', 'position': 0, 'description': 'The id of the container the filter is running on'}, 'componentName': {'type': 'str', 'position': 0, 'description': 'The name of the component the filter is running on'}}, 'description': 'An object containing information about the container the filter instance is running on'}, 'host': {'type': 'dict', 'properties': {'hostName': {'type': 'str', 'position': 0, 'description': 'The name of the host the filter is running on'}, 'id': {'type': 'int', 'position': 0, 'description': 'The ID of the host'}}, 'description': 'An object containing information about the host the filter is running on'}}, 'description': 'An object describing the current status of an analysis filter instance on a host'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
list_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Simple search for analysis filters (INTERNAL)', 'description': '', 'operationId': 'listAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordMatchStrategy', 'in': 'query', 'description': 'Set match strategy for keyword search', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordFieldStrategy', 'in': 'query', 'description': 'Set field strategy for keyword search', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'collectionFormat': 'multi'}, {'name': 'timestampMatchStrategy', 'in': 'query', 'description': 'Set match strategy for timestamp filtering', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampFieldStrategy', 'in': 'query', 'description': 'Set field strategy for timestamp filtering', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'lastUpdated', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'collectionFormat': 'multi'}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in results', 'required': False, 'type': 'bool', 'default': False}, {'name': 'sortBy', 'in': 'query', 'description': 'Field to sort by', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-created', '-lastUpdated', '-deleted']}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
revert_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Reverts an analysis filter to a previous revision (INTERNAL)', 'description': '', 'operationId': 'revertAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter to revert( must be the current version of a filter)', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying which revision to revert to', 'required': False, 'schema': {'type': 'object', 'required': ['comment'], 'properties': {'revisionID': {'type': 'int', 'position': 0, 'description': 'The ID of the filter to revert to. Must be a revision of the filter to revert'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was reverted'}}, 'description': 'A request to revert an analysis filter to an earlier version'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
revive_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Revives a deleted a analysis filter (INTERNAL)', 'description': '', 'operationId': 'reviveAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
search_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Searches for analysis filters (INTERNAL)', 'description': '', 'operationId': 'searchAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search analysis filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'sortBy': {'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-created', '-lastUpdated', '-deleted']}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted filters (excluded by default). (default false)', 'default': False}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'The set of sub criteria to add to the search', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted filters (excluded by default). (default false)', 'default': False}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'The set of sub criteria to add to the search', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted filters (excluded by default). (default false)', 'default': False}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'The set of sub criteria to add to the search', 'uniqueItems': True, 'items': []}}, 'description': 'The sub criteria for searching for analysis filters'}}}, 'description': 'The sub criteria for searching for analysis filters'}}, 'includeCode': {'type': 'bool', 'position': 0, 'description': 'Whether or not to include code in the result object. The code is only returned if set to true (default false)', 'default': False}, 'includeDescendingCustomers': {'type': 'bool', 'position': 0, 'description': 'When limiting filters by customer, include filters of descending customers (default is true) (default true)', 'default': True}, 'includeAscendingCustomers': {'type': 'bool', 'position': 0, 'description': 'When limiting filters by customer, include filters of ascending customers (default is false)'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit maximum amount of results (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip specified amount of results (default 0)', 'minimum': 0, 'default': 0}}, 'description': 'A request to search for analysis filters'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
search_analysis_filter_status = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Search for analysis filters instance statuses for filters that match the criteria (INTERNAL)', 'description': '', 'operationId': 'searchAnalysisFilterStatus', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search analysis filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'filterID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'filterStatus': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}}, 'loggingStatus': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['debug', 'info']}}, 'customer': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'limit': {'type': 'int'}, 'offset': {'type': 'int'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision of the filter that is running'}, 'filterStatus': {'type': 'str', 'position': 0, 'description': 'The current filter status of the filter', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'errorMessage': {'type': 'str', 'position': 0, 'description': 'The message connected to the current error of the filter. null if no error is reported'}, 'loggingStatus': {'type': 'str', 'position': 0, 'description': 'The current logging status of the filter', 'enum': ['debug', 'info']}, 'container': {'type': 'dict', 'properties': {'instanceID': {'type': 'int', 'position': 0, 'description': 'The id of the container the filter is running on'}, 'componentName': {'type': 'str', 'position': 0, 'description': 'The name of the component the filter is running on'}}, 'description': 'An object containing information about the container the filter instance is running on'}, 'host': {'type': 'dict', 'properties': {'hostName': {'type': 'str', 'position': 0, 'description': 'The name of the host the filter is running on'}, 'id': {'type': 'int', 'position': 0, 'description': 'The ID of the host'}}, 'description': 'An object containing information about the host the filter is running on'}}, 'description': 'An object describing the current status of an analysis filter instance on a host'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
set_analysis_filter_log_level = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Sets the log level of a analysis filter (INTERNAL)', 'description': '', 'operationId': 'setAnalysisFilterLogLevel', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Set analysis filter log level request', 'required': False, 'schema': {'type': 'object', 'required': ['logLevel'], 'properties': {'logLevel': {'type': 'str', 'position': 0, 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}, 'description': 'A request to set the log level of the instances of the analysis filter'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'logLevel': {'type': 'str', 'position': 0, 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}, 'description': 'The log level filter instances of this filter should be set to'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Updates an analysis filter (INTERNAL)', 'description': '', 'operationId': 'updateAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of filter', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Update analysis filter request', 'required': False, 'schema': {'type': 'object', 'required': ['actions', 'comment', 'filters'], 'properties': {'shortName': {'type': 'str', 'position': 0, 'description': 'Optional short name of the filter (no change if left blank) => [a-zA-Z0-9_:\\-\\.]*'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'filters': {'type': 'dict', 'required': ['statementCode'], 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code which is run on the selected events'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'The name of the signature which should be attached to the created event'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will populate the created event with information from the selected event'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit triggered events for central storage'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true the filter will store the raw events'}, 'disableCompileStaticValidation': {'type': 'bool', 'position': 0, 'description': 'If true, we will skip static validation of the filter (default false)', 'default': False}}}, 'removeLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'addLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'setLabels': {'type': 'list', 'position': 0, 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels', 'uniqueItems': True, 'items': {'type': 'string'}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was updated'}, 'externallyManaged': {'type': 'bool', 'position': 0, 'description': 'Whether or not the filter code is externally managed'}, 'authoredByUser': {'type': 'str', 'position': 0, 'description': 'The user that submitted the Filter-as-Code change. Should be used with externallyManaged=true or existing filter should have that flag set.'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change. Should be used with externallyManaged=true or existing filter should have that flag set.'}}, 'description': 'A request to update an analysis filter'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'The ID of the filter'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The short name of the filter (can be null)'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'masterID': {'type': 'int', 'position': 0, 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}}}, 'actions': {'type': 'dict', 'properties': {'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code used to generate the new event'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'storeRawEvents': {'type': 'bool', 'position': 0, 'description': 'If true, the filter will store the raw events'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit generated events for central storage'}}}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was changed'}, 'authoredByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'flags': {'type': 'list', 'position': 0, 'description': "The subject's flags", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted']}}, 'type': 'str', 'options': ['user', 'group']}, 'description': 'SPI UserInfo'}, 'commitID': {'type': 'str', 'position': 0, 'description': 'The commit ID of the Filter-as-Code change'}}, 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}