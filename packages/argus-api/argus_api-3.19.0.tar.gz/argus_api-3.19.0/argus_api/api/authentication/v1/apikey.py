"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module
)
def initiate_api_key(
    description: str = None,
    validSources: str = None,
    source: dict = None,
    expirationDays: int = None,
    sessionConstraints: dict = None,
    password: str = None,
    authorization: str = None,
    disableSourceRestriction: bool = None,
    disableExpiration: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Initiate a new apikey for current user (PUBLIC)
    
    :param str description: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str validSources: Client IP\/CIDR networks which the api key will be valid for. Deprecated\! Instead use source where you set provider to´staticIP´ and specify networks by setting staticOptions
    :param dict source: 
    :param int expirationDays: Requested expiration days\, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period\, an error will be returned.
    :param dict sessionConstraints: 
    :param str password: User password to verify this request
    :param str authorization: User authorization token obtained from the user authorization endpoint. The token must be issued for operation \'apikey.create\'
    :param bool disableSourceRestriction: Request API\-key without source restriction. If key without source restriction is not permitted\, a 412 error will be returned. Deprecated\! Instead set provider in source to ´disabled´ \(default false\)
    :param bool disableExpiration: Request API\-key with unlimited expiration. If unlimited expiration is not permitted\, a 412 error will be returned. \(default false\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey".format()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send validSources if the argument was provided, don't send null values
    if validSources is not None:
        body.update({"validSources": validSources})
    # Only send source if the argument was provided, don't send null values
    if source is not None:
        body.update({"source": source})
    # Only send disableSourceRestriction if the argument was provided, don't send null values
    if disableSourceRestriction is not None:
        body.update({"disableSourceRestriction": disableSourceRestriction})
    # Only send expirationDays if the argument was provided, don't send null values
    if expirationDays is not None:
        body.update({"expirationDays": expirationDays})
    # Only send disableExpiration if the argument was provided, don't send null values
    if disableExpiration is not None:
        body.update({"disableExpiration": disableExpiration})
    # Only send sessionConstraints if the argument was provided, don't send null values
    if sessionConstraints is not None:
        body.update({"sessionConstraints": sessionConstraints})
    # Only send password if the argument was provided, don't send null values
    if password is not None:
        body.update({"password": password})
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module
)
def list_api_keys(
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List current user apikeys (PUBLIC)
    
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey".format()
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module
)
def renew_api_key_by_id(
    keyID: int,
    expirationDays: int = None,
    password: str = None,
    authorization: str = None,
    disableExpiration: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Renew existing API-key (PUBLIC)
    
    :param int keyID: Key ID
    :param int expirationDays: Requested expiration days\, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period\, an error will be returned.
    :param str password: User password to verify this request
    :param str authorization: User authorization token obtained from the user authorization endpoint. The token must be issued for operation \'apikey.renew\'
    :param bool disableExpiration: Request API\-key with unlimited expiration. If unlimited expiration is not permitted\, a 412 error will be returned. \(default false\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{keyID}".format(keyID=keyID)
    headers = {}

    body = body or {}
    # Only send expirationDays if the argument was provided, don't send null values
    if expirationDays is not None:
        body.update({"expirationDays": expirationDays})
    # Only send disableExpiration if the argument was provided, don't send null values
    if disableExpiration is not None:
        body.update({"disableExpiration": disableExpiration})
    # Only send password if the argument was provided, don't send null values
    if password is not None:
        body.update({"password": password})
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module
)
def renew_api_key_by_prefix(
    prefix: str,
    expirationDays: int = None,
    password: str = None,
    authorization: str = None,
    disableExpiration: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Renew an apikey for current user (PUBLIC)
    
    :param str prefix: Key prefix on the form 1ab\/2c
    :param int expirationDays: Requested expiration days\, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period\, an error will be returned.
    :param str password: User password to verify this request
    :param str authorization: User authorization token obtained from the user authorization endpoint. The token must be issued for operation \'apikey.renew\'
    :param bool disableExpiration: Request API\-key with unlimited expiration. If unlimited expiration is not permitted\, a 412 error will be returned. \(default false\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{prefix}".format(prefix=prefix)
    headers = {}

    body = body or {}
    # Only send expirationDays if the argument was provided, don't send null values
    if expirationDays is not None:
        body.update({"expirationDays": expirationDays})
    # Only send disableExpiration if the argument was provided, don't send null values
    if disableExpiration is not None:
        body.update({"disableExpiration": disableExpiration})
    # Only send password if the argument was provided, don't send null values
    if password is not None:
        body.update({"password": password})
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module
)
def revoke_api_key_by_id(
    keyID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """null (PUBLIC)
    
    :param int keyID: Key ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{keyID}".format(keyID=keyID)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module
)
def revoke_api_key_by_prefix(
    prefix: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Revoke an apikey from current user (PUBLIC)
    
    :param str prefix: Key prefix on the form 1ab\/2c
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{prefix}".format(prefix=prefix)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``initiate_1`` is an alias for ``initiate_api_key``. Exists
#: only for backward compatibility - **do not use** - use ``initiate_api_key`` instead.
initiate_1 = register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module,
    alias="initiate_1"
)(deprecated_alias("initiate_1")(initiate_api_key))
#: **DEPRECATED** : ``list_1`` is an alias for ``list_api_keys``. Exists
#: only for backward compatibility - **do not use** - use ``list_api_keys`` instead.
list_1 = register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module,
    alias="list_1"
)(deprecated_alias("list_1")(list_api_keys))
#: **DEPRECATED** : ``renew_2`` is an alias for ``renew_api_key_by_prefix``. Exists
#: only for backward compatibility - **do not use** - use ``renew_api_key_by_prefix`` instead.
renew_2 = register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module,
    alias="renew_2"
)(deprecated_alias("renew_2")(renew_api_key_by_prefix))
#: **DEPRECATED** : ``renew_3`` is an alias for ``renew_api_key_by_id``. Exists
#: only for backward compatibility - **do not use** - use ``renew_api_key_by_id`` instead.
renew_3 = register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module,
    alias="renew_3"
)(deprecated_alias("renew_3")(renew_api_key_by_id))
#: **DEPRECATED** : ``revoke_2`` is an alias for ``revoke_api_key_by_id``. Exists
#: only for backward compatibility - **do not use** - use ``revoke_api_key_by_id`` instead.
revoke_2 = register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module,
    alias="revoke_2"
)(deprecated_alias("revoke_2")(revoke_api_key_by_id))
#: **DEPRECATED** : ``revoke_3`` is an alias for ``revoke_api_key_by_prefix``. Exists
#: only for backward compatibility - **do not use** - use ``revoke_api_key_by_prefix`` instead.
revoke_3 = register_command(
    extending=("authentication", "v1", "apikey"),
    module=argus_cli_module,
    alias="revoke_3"
)(deprecated_alias("revoke_3")(revoke_api_key_by_prefix))