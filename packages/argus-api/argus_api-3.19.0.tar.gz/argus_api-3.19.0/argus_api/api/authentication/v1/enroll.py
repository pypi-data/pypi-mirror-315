"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "enroll"),
    module=argus_cli_module
)
def activate_user_enrollment(
    userName: str = None,
    enrollmentCode: str = None,
    domain: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use /enrollment instead. (DEV)
    
    :param str userName: Username for user to activate enrollment for
    :param str enrollmentCode: Enrollment code
    :param str domain: Domain id or name for the domain to lookup user in. Typically set by UI client
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises EnrollmentCodeExpiredException: on 408
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/enroll".format()
    headers = {}

    body = body or {}
    # Only send userName if the argument was provided, don't send null values
    if userName is not None:
        body.update({"userName": userName})
    # Only send enrollmentCode if the argument was provided, don't send null values
    if enrollmentCode is not None:
        body.update({"enrollmentCode": enrollmentCode})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("authentication", "v1", "enroll"),
    module=argus_cli_module
)
def authenticate_user_enrollment(
    userID: int = None,
    verificationCode: str = None,
    activationCookie: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: use /enrollment/authentication instead (DEV)
    
    :param int userID: Username for user to verify enrollment for
    :param str verificationCode: Verification code
    :param str activationCookie: The activation cookie received in the activation step
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises EnrollmentCodeExpiredException: on 408
    :raises EnrollmentVerificationCodeExpiredException: on 410
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/enroll/authentication".format()
    headers = {}

    body = body or {}
    # Only send userID if the argument was provided, don't send null values
    if userID is not None:
        body.update({"userID": userID})
    # Only send verificationCode if the argument was provided, don't send null values
    if verificationCode is not None:
        body.update({"verificationCode": verificationCode})
    # Only send activationCookie if the argument was provided, don't send null values
    if activationCookie is not None:
        body.update({"activationCookie": activationCookie})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
