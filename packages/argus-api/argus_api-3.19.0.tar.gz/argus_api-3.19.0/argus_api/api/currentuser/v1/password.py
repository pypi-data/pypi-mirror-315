"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
log = logging.getLogger(__name__)


@register_command(
    extending=("currentuser", "v1", "password"),
    module=argus_cli_module
)
def change_password(
    oldPassword: str = None,
    authorization: str = None,
    newPassword: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """This endpoint is deprecated. Use PUT /authentication/v1/password instead. (PUBLIC)
    
    :param str oldPassword: Existing password\, to validate password change.
    :param str authorization: The authorization token to permit setting a new password. Token must be valid for operation \'password.set\'.
    :param str newPassword: New password to change to.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidPasswordException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/currentuser/v1/password".format()
    headers = {}

    body = body or {}
    # Only send oldPassword if the argument was provided, don't send null values
    if oldPassword is not None:
        body.update({"oldPassword": oldPassword})
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})
    # Only send newPassword if the argument was provided, don't send null values
    if newPassword is not None:
        body.update({"newPassword": newPassword})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``set_properties`` is an alias for ``change_password``. Exists
#: only for backward compatibility - **do not use** - use ``change_password`` instead.
set_properties = register_command(
    extending=("currentuser", "v1", "password"),
    module=argus_cli_module,
    alias="set_properties"
)(deprecated_alias("set_properties")(change_password))