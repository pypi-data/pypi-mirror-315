"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
from requests import Response
log = logging.getLogger(__name__)


@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def create_artifact(
    groupID: str = None,
    artifactID: str = None,
    version: str = None,
    data: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Add new code artifact as JSON object (INTERNAL)
    
    :param str groupID: The Maven groupID of this artifact \=\> \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str artifactID: The Maven artifactID of this artifact \=\> \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str version: The Maven version of this artifact \=\> \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str data: The base64\-encoded bytes of this artifact
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact".format()
    headers = {}

    body = body or {}
    # Only send groupID if the argument was provided, don't send null values
    if groupID is not None:
        body.update({"groupID": groupID})
    # Only send artifactID if the argument was provided, don't send null values
    if artifactID is not None:
        body.update({"artifactID": artifactID})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        body.update({"version": version})
    # Only send data if the argument was provided, don't send null values
    if data is not None:
        body.update({"data": data})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def create_artifact_from_octet_stream(
    groupID: str,
    artifactID: str,
    version: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Upload new code artifact as binary file upload (INTERNAL)
    
    :param str groupID: Group ID
    :param str artifactID: Artifact ID
    :param str version: Version
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact/{groupID}/{artifactID}/{version}".format(groupID=groupID,
        artifactID=artifactID,
        version=version)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def delete_unused_artifacts(
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Mark unused artifacts as deleted (INTERNAL)
    
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact/unused".format()
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def download_code_artifact_by_gav(
    groupID: str,
    artifactID: str,
    version: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> Response:
    """Download raw artifact by groupID, artifactID and version (GAV) (INTERNAL)
    
    :param str groupID: GroupID of artifact to fetch
    :param str artifactID: ArtifactID of artifact to fetch
    :param str version: Version of artifact to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: ``requests.Response`` object
    
    """

    route = "/configurationadmin/v1/artifact/{groupID}/{artifactID}/{version}/download".format(groupID=groupID,
        artifactID=artifactID,
        version=version)
    headers = {}
    headers['content'] = None

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response
    

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def download_code_artifact_by_id(
    id: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> Response:
    """Download artifact by ID (INTERNAL)
    
    :param str id: ID of artifact to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: ``requests.Response`` object
    
    """

    route = "/configurationadmin/v1/artifact/{id}/download".format(id=id)
    headers = {}
    headers['content'] = None

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response
    

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def get_code_artifact_by_gav(
    groupID: str,
    artifactID: str,
    version: str,
    includeData: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Fetch code artifact metadata by groupID, artifactID and version (GAV) (INTERNAL)
    
    :param str groupID: GroupID of artifact to fetch
    :param str artifactID: ArtifactID of artifact to fetch
    :param str version: Version of artifact to fetch
    :param bool includeData: If true\, include encoded artifact binary data
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact/{groupID}/{artifactID}/{version}".format(groupID=groupID,
        artifactID=artifactID,
        version=version,
        includeData=includeData)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        query_parameters.update({"includeData": includeData})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def get_code_artifcat_by_id(
    id: str,
    includeData: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Fetch code artifact metadata by hash ID (INTERNAL)
    
    :param str id: ID of artifact to fetch
    :param bool includeData: If true\, include encoded artifact binary data
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact/{id}".format(id=id,
        includeData=includeData)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        query_parameters.update({"includeData": includeData})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def list_code_artifacts(
    search: str = None,
    orderDesc: bool = None,
    limit: int = 25,
    orderBy: str = "groupID",
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List code artifacts (INTERNAL)
    
    :param str search: Limit result to artifacts matching this search string
    :param bool orderDesc: Sort results descending
    :param int limit: Limit result
    :param str orderBy: Order result
    :param int offset: Offset result
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact".format(limit=limit,
        orderBy=orderBy,
        search=search,
        offset=offset,
        orderDesc=orderDesc)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send orderBy if the argument was provided, don't send null values
    if orderBy is not None:
        query_parameters.update({"orderBy": orderBy})
    
    # Only send search if the argument was provided, don't send null values
    if search is not None:
        query_parameters.update({"search": search})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send orderDesc if the argument was provided, don't send null values
    if orderDesc is not None:
        query_parameters.update({"orderDesc": orderDesc})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def list_unused_code_artifacts(
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List unused artifact (INTERNAL)
    
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact/unused".format()
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module
)
def search_code_artifacts(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    searchString: str = None,
    id: str = None,
    groupID: str = None,
    artifactID: str = None,
    version: str = None,
    status: str = None,
    gav: dict = None,
    includeData: bool = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    sortBy: str = None,
    includeCreatedTimestamp: bool = True,
    includeLastUpdatedTimestamp: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Search code artifacts (INTERNAL)
    
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param str searchString: Keyword search string
    :param list id: Only return artifacts with these specific ids
    :param list groupID: Only return artifacts with these groupIDs
    :param list artifactID: Only return artifacts with these artifactIDs
    :param list version: Only return artifacts with these versions
    :param list status: Only return artifacts with these statuses
    :param list gav: Only return artifacts which matches any of these GAVs
    :param bool includeData: DEPRECATED\: Also include artifact data in response. This option should not be used.
    :param int startTimestamp: Search artifacts created or updated after this timestamp
    :param int endTimestamp: Search artifacts created or updated before this timestamp
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param bool includeCreatedTimestamp: Consider creation time in time filtering. Defaults to true. \(default true\)
    :param bool includeLastUpdatedTimestamp: Consider creation time in time filtering. Defaults to false. \(default false\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/artifact/search".format()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send searchString if the argument was provided, don't send null values
    if searchString is not None:
        body.update({"searchString": searchString})
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send groupID if the argument was provided, don't send null values
    if groupID is not None:
        body.update({"groupID": groupID})
    # Only send artifactID if the argument was provided, don't send null values
    if artifactID is not None:
        body.update({"artifactID": artifactID})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        body.update({"version": version})
    # Only send status if the argument was provided, don't send null values
    if status is not None:
        body.update({"status": status})
    # Only send gav if the argument was provided, don't send null values
    if gav is not None:
        body.update({"gav": gav})
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        body.update({"includeData": includeData})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send includeCreatedTimestamp if the argument was provided, don't send null values
    if includeCreatedTimestamp is not None:
        body.update({"includeCreatedTimestamp": includeCreatedTimestamp})
    # Only send includeLastUpdatedTimestamp if the argument was provided, don't send null values
    if includeLastUpdatedTimestamp is not None:
        body.update({"includeLastUpdatedTimestamp": includeLastUpdatedTimestamp})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``create`` is an alias for ``create_artifact``. Exists
#: only for backward compatibility - **do not use** - use ``create_artifact`` instead.
create = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="create"
)(deprecated_alias("create")(create_artifact))
#: **DEPRECATED** : ``create_from_octet_stream`` is an alias for ``create_artifact_from_octet_stream``. Exists
#: only for backward compatibility - **do not use** - use ``create_artifact_from_octet_stream`` instead.
create_from_octet_stream = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="create_from_octet_stream"
)(deprecated_alias("create_from_octet_stream")(create_artifact_from_octet_stream))
#: **DEPRECATED** : ``delete_unused`` is an alias for ``delete_unused_artifacts``. Exists
#: only for backward compatibility - **do not use** - use ``delete_unused_artifacts`` instead.
delete_unused = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="delete_unused"
)(deprecated_alias("delete_unused")(delete_unused_artifacts))
#: **DEPRECATED** : ``download_by_g_a_v`` is an alias for ``download_code_artifact_by_gav``. Exists
#: only for backward compatibility - **do not use** - use ``download_code_artifact_by_gav`` instead.
download_by_g_a_v = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="download_by_g_a_v"
)(deprecated_alias("download_by_g_a_v")(download_code_artifact_by_gav))
#: **DEPRECATED** : ``download_by_id`` is an alias for ``download_code_artifact_by_id``. Exists
#: only for backward compatibility - **do not use** - use ``download_code_artifact_by_id`` instead.
download_by_id = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="download_by_id"
)(deprecated_alias("download_by_id")(download_code_artifact_by_id))
#: **DEPRECATED** : ``get_by_g_a_v`` is an alias for ``get_code_artifact_by_gav``. Exists
#: only for backward compatibility - **do not use** - use ``get_code_artifact_by_gav`` instead.
get_by_g_a_v = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="get_by_g_a_v"
)(deprecated_alias("get_by_g_a_v")(get_code_artifact_by_gav))
#: **DEPRECATED** : ``get_code_artifact_by_g_a_v`` is an alias for ``get_code_artifact_by_gav``. Exists
#: only for backward compatibility - **do not use** - use ``get_code_artifact_by_gav`` instead.
get_code_artifact_by_g_a_v = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="get_code_artifact_by_g_a_v"
)(deprecated_alias("get_code_artifact_by_g_a_v")(get_code_artifact_by_gav))
#: **DEPRECATED** : ``download_code_artifact_by_g_a_v`` is an alias for ``download_code_artifact_by_gav``. Exists
#: only for backward compatibility - **do not use** - use ``download_code_artifact_by_gav`` instead.
download_code_artifact_by_g_a_v = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="download_code_artifact_by_g_a_v"
)(deprecated_alias("download_code_artifact_by_g_a_v")(download_code_artifact_by_gav))
#: **DEPRECATED** : ``get_by_id`` is an alias for ``get_code_artifcat_by_id``. Exists
#: only for backward compatibility - **do not use** - use ``get_code_artifcat_by_id`` instead.
get_by_id = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="get_by_id"
)(deprecated_alias("get_by_id")(get_code_artifcat_by_id))
#: **DEPRECATED** : ``list`` is an alias for ``list_code_artifacts``. Exists
#: only for backward compatibility - **do not use** - use ``list_code_artifacts`` instead.
list = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="list"
)(deprecated_alias("list")(list_code_artifacts))
#: **DEPRECATED** : ``list_unused`` is an alias for ``list_unused_code_artifacts``. Exists
#: only for backward compatibility - **do not use** - use ``list_unused_code_artifacts`` instead.
list_unused = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="list_unused"
)(deprecated_alias("list_unused")(list_unused_code_artifacts))
#: **DEPRECATED** : ``search`` is an alias for ``search_code_artifacts``. Exists
#: only for backward compatibility - **do not use** - use ``search_code_artifacts`` instead.
search = register_command(
    extending=("configurationadmin", "v1", "artifact"),
    module=argus_cli_module,
    alias="search"
)(deprecated_alias("search")(search_code_artifacts))