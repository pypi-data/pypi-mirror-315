"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
log = logging.getLogger(__name__)


@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def clear_persistent_component(
    host: str,
    component: str = None,
    container: str = None,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Clear persistent component (DEV)
    
    :param str host: Host ID or name
    :param str component: Component name
    :param str container: Container name
    :param int waitFor: Wait for completion of this task \(milliseconds\)\, default is 0 \(no wait\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/persistence".format(host=host,
        component=component,
        container=container,
        waitFor=waitFor)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send component if the argument was provided, don't send null values
    if component is not None:
        query_parameters.update({"component": component})
    
    # Only send container if the argument was provided, don't send null values
    if container is not None:
        query_parameters.update({"container": container})
    
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        query_parameters.update({"waitFor": waitFor})
    
    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def compact_persistence(
    host: str,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Initiate persistence compaction on specified host (DEV)
    
    :param str host: Host ID or name
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/persistence/compact".format(host=host)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def fetch_instance_performance_data(
    instance: int,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Fetch performance data for specified instance (DEV)
    
    :param int instance: ID of the instance to fetch performance data from
    :param int waitFor: Wait for completion of this task \(milliseconds\)\, default is 0 \(no wait\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/performance".format(instance=instance,
        waitFor=waitFor)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        query_parameters.update({"waitFor": waitFor})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def get_task_response(
    taskID: str,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Fetch status for specific task (DEV)
    
    :param str taskID: ID of the task to fetch
    :param int waitFor: Wait for completion of this task \(milliseconds\)\, default is 0 \(no wait\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/task/{taskID}".format(taskID=taskID,
        waitFor=waitFor)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        query_parameters.update({"waitFor": waitFor})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def host_install_all_components(
    host: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Install all instances on specified host (DEV)
    
    :param str host: Host ID or name
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/installAll".format(host=host)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def host_restart_all_components(
    host: str,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Restart all instances on specified host (DEV)
    
    :param str host: Host ID or name
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/restart".format(host=host)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def host_uninstall_all(
    host: str,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Uninstall all instances on specified host (DEV)
    
    :param str host: Host ID or name
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/uninstallAll".format(host=host)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def install_instance(
    instance: int,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Install specified instance (DEV)
    
    :param int instance: ID of the instance
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/install".format(instance=instance)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def instance_expire_cache(
    instance: int,
    resources: str = None,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Expire cache on resources on specified instance (DEV)
    
    :param int instance: ID of the instance
    :param list resources: Set of resources to expire
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/expirecache".format(instance=instance)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})
    # Only send resources if the argument was provided, don't send null values
    if resources is not None:
        body.update({"resources": resources})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def list_host_persistent_components(
    host: str,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List persistent components (DEV)
    
    :param str host: Host ID or name
    :param int waitFor: Wait for completion of this task \(milliseconds\)\, default is 0 \(no wait\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/persistence".format(host=host,
        waitFor=waitFor)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        query_parameters.update({"waitFor": waitFor})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def list_task_response(
    state: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List task status (DEV)
    
    :param list state: Filter response by status
    :param int limit: Limit response to this number of results \(0 means unlimited\)
    :param int offset: Skip the first results in the response \(default is 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/task".format(limit=limit,
        offset=offset,
        state=state)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send state if the argument was provided, don't send null values
    if state is not None:
        query_parameters.update({"state": state})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def request_updated_host_status(
    host: str,
    instanceID: int = None,
    includeComponents: bool = None,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Request updated status of a specified host or instance (DEV)
    
    :param str host: ID or name of the host
    :param int instanceID: The ID of the instance from which to request updated status
    :param bool includeComponents: If true\, the components will be included
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/host/{host}/refreshstatus".format(host=host)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})
    # Only send instanceID if the argument was provided, don't send null values
    if instanceID is not None:
        body.update({"instanceID": instanceID})
    # Only send includeComponents if the argument was provided, don't send null values
    if includeComponents is not None:
        body.update({"includeComponents": includeComponents})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def restart_instance(
    instance: int,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Restart specified instance (DEV)
    
    :param int instance: ID of the instance
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/restart".format(instance=instance)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def start_instance(
    instance: int,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Start specified instance (DEV)
    
    :param int instance: ID of the instance
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/start".format(instance=instance)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def stop_instance(
    instance: int,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Stop specified instance (DEV)
    
    :param int instance: ID of the instance
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/stop".format(instance=instance)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("componentadmin", "v2", "invoke", "host", "installAll"),
    module=argus_cli_module
)
def uninstall_instance(
    instance: int,
    waitFor: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Uninstall specified instance (DEV)
    
    :param int instance: ID of the instance
    :param int waitFor: The max amount of millis to wait for a success or exception response \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/invoke/instance/{instance}/uninstall".format(instance=instance)
    headers = {}

    body = body or {}
    # Only send waitFor if the argument was provided, don't send null values
    if waitFor is not None:
        body.update({"waitFor": waitFor})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
