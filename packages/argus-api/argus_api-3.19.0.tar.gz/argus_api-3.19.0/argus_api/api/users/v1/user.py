"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
from requests import Response
log = logging.getLogger(__name__)


@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def check_permission(
    userId: int,
    function: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use GET useradmin/v2/user/{shortNameOrID}/permissions. Validate user permission to perform function (PUBLIC)
    
    :param int userId: ID of user
    :param str function: Function name
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises ForbiddenPermissionException: on 403
    :raises UserNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userId}/permission/{function}".format(userId=userId,
        function=function)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def find_users(
    domain: str = None,
    type: str = None,
    subjectID: int = None,
    excludeSubjectID: int = None,
    parentID: int = None,
    ancestorID: int = None,
    get_aclAncestorID: int = None,
    get_aclCustomerID: int = None,
    excludeAncestorID: int = None,
    userName: str = None,
    email: str = None,
    mobile: str = None,
    searchString: str = None,
    requiredFunctionID: int = None,
    requiredFunctionCustomerID: int = None,
    requireAllFunctions: bool = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    customerID: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use POST users/v2/user/search. Search user profiles (PUBLIC)
    
    :param list domain: 
    :param str type: 
    :param list subjectID: 
    :param list excludeSubjectID: 
    :param list parentID: 
    :param list ancestorID: 
    :param list get_aclAncestorID: 
    :param list get_aclCustomerID: 
    :param list excludeAncestorID: 
    :param list userName: 
    :param list email: 
    :param list mobile: 
    :param str searchString: 
    :param list requiredFunctionID: 
    :param int requiredFunctionCustomerID: 
    :param bool requireAllFunctions: 
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list customerID: Restrict search to data belonging to specified customers.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/search".format()
    headers = {}

    body = body or {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})
    # Only send subjectID if the argument was provided, don't send null values
    if subjectID is not None:
        body.update({"subjectID": subjectID})
    # Only send excludeSubjectID if the argument was provided, don't send null values
    if excludeSubjectID is not None:
        body.update({"excludeSubjectID": excludeSubjectID})
    # Only send parentID if the argument was provided, don't send null values
    if parentID is not None:
        body.update({"parentID": parentID})
    # Only send ancestorID if the argument was provided, don't send null values
    if ancestorID is not None:
        body.update({"ancestorID": ancestorID})
    # Only send get_aclAncestorID if the argument was provided, don't send null values
    if get_aclAncestorID is not None:
        body.update({"get_aclAncestorID": get_aclAncestorID})
    # Only send get_aclCustomerID if the argument was provided, don't send null values
    if get_aclCustomerID is not None:
        body.update({"get_aclCustomerID": get_aclCustomerID})
    # Only send excludeAncestorID if the argument was provided, don't send null values
    if excludeAncestorID is not None:
        body.update({"excludeAncestorID": excludeAncestorID})
    # Only send userName if the argument was provided, don't send null values
    if userName is not None:
        body.update({"userName": userName})
    # Only send email if the argument was provided, don't send null values
    if email is not None:
        body.update({"email": email})
    # Only send mobile if the argument was provided, don't send null values
    if mobile is not None:
        body.update({"mobile": mobile})
    # Only send searchString if the argument was provided, don't send null values
    if searchString is not None:
        body.update({"searchString": searchString})
    # Only send requiredFunctionID if the argument was provided, don't send null values
    if requiredFunctionID is not None:
        body.update({"requiredFunctionID": requiredFunctionID})
    # Only send requiredFunctionCustomerID if the argument was provided, don't send null values
    if requiredFunctionCustomerID is not None:
        body.update({"requiredFunctionCustomerID": requiredFunctionCustomerID})
    # Only send requireAllFunctions if the argument was provided, don't send null values
    if requireAllFunctions is not None:
        body.update({"requireAllFunctions": requireAllFunctions})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send customerID if the argument was provided, don't send null values
    if customerID is not None:
        body.update({"customerID": customerID})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def get_functions(
    userId: int,
    onlyRoles: bool = None,
    keywords: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use GET useradmin/v2/user/{shortNameOrID}/permissions List a user's permission functions regardless of customer (PUBLIC)
    
    :param int userId: ID of user
    :param bool onlyRoles: Only return functions marked as roles
    :param list keywords: Filter functions by keywords on name and description
    :param int limit: Maximum number of returned functions
    :param int offset: Skip a number of functions
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises UserNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userId}/functions".format(limit=limit,
        userId=userId,
        offset=offset,
        onlyRoles=onlyRoles,
        keywords=keywords)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send onlyRoles if the argument was provided, don't send null values
    if onlyRoles is not None:
        query_parameters.update({"onlyRoles": onlyRoles})
    
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def get_profile(
    userId: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use GET users/v2/user/{shortNameOrID}>. Get user profile by ID (PUBLIC)
    
    :param int userId: ID of user
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userId}".format(userId=userId)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def get_user_by_username(
    userName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use GET users/v2/user/{shortNameOrID}. Get user profile by username (PUBLIC)
    
    :param str userName: Username
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userName}".format(userName=userName)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def get_user_customers(
    userId: int,
    offset: int = None,
    keywords: str = None,
    keywordField: str = None,
    limit: int = 25,
    keywordMatch: str = "all",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use POST /customers/v1/customer/search. List a user's customers. (PUBLIC)
    
    :param int userId: ID of user
    :param int offset: Offset results
    :param list keywords: Search by keywords
    :param list keywordField: Set field strategy for keyword search
    :param int limit: Limit results
    :param str keywordMatch: Set match strategy for keyword search
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises UserNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userId}/customers".format(limit=limit,
        keywordMatch=keywordMatch,
        userId=userId,
        offset=offset,
        keywords=keywords,
        keywordField=keywordField)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send keywordMatch if the argument was provided, don't send null values
    if keywordMatch is not None:
        query_parameters.update({"keywordMatch": keywordMatch})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    
    # Only send keywordField if the argument was provided, don't send null values
    if keywordField is not None:
        query_parameters.update({"keywordField": keywordField})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def get_user_profile_picture(
    user: str,
    domain: str = None,
    default: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> Response:
    """DEPRECATED: Use GET /user/{shortNameOrID}/picture. Returns user profile picture. (PUBLIC)
    
    :param str user: User ID or username
    :param str domain: Domain ID or shortname \(optional\, defaults to current user domain\)
    :param bool default: If true\, return default avatar image if user picture not set. Default is false.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: ``requests.Response`` object
    
    """

    route = "/users/v1/user/{user}/picture".format(user=user,
        domain=domain,
        default=default)
    headers = {}
    headers['content'] = None

    body = body or {}

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    # Only send default if the argument was provided, don't send null values
    if default is not None:
        query_parameters.update({"default": default})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response
    

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def list_users_v1(
    subjectID: int = None,
    offset: int = None,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use GET users/v2/user. Get user profiles (PUBLIC)
    
    :param list subjectID: IDs of users
    :param int offset: Offset results
    :param int limit: Limit results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user".format(limit=limit,
        subjectID=subjectID,
        offset=offset)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send subjectID if the argument was provided, don't send null values
    if subjectID is not None:
        query_parameters.update({"subjectID": subjectID})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def update_profile_picture_for_user_form(
    userID: str,
    domain: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use PUT /user/{shortNameOrID}/picture. Upload and modify the user image (PUBLIC)
    
    :param str userID: ID or username of user to change image for
    :param str domain: Domain of the user \(defaults to current users domain
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userID}/picture".format(userID=userID,
        domain=domain)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def update_profile_picture_for_user_json(
    userId: str,
    domain: str = None,
    image: str = None,
    mimeType: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use PUT /user/{shortNameOrID}/picture. Upload and modify the user image (PUBLIC)
    
    :param str userId: ID or username of user to change image for
    :param str domain: Domain of the user \(defaults to current users domain
    :param str image: The image to upload \(in base64\)
    :param str mimeType: The MIME type of the image \=\> Sanitize by regex .\+\/.\+
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{userId}/picture".format(userId=userId,
        domain=domain)
    headers = {}

    body = body or {}
    # Only send image if the argument was provided, don't send null values
    if image is not None:
        body.update({"image": image})
    # Only send mimeType if the argument was provided, don't send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def update_user_preferences(
    user: str,
    domain: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: Use PUT useradmin/v2/user/{shortNameOrID}/preferences. Updates users preferences. Body should be a map of preferences to set.Any preference with a null value will be deleted. (PUBLIC)
    
    :param str user: User ID or username
    :param str domain: Domain ID or shortname \(optional\, defaults to current user domain\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{user}/preferences".format(user=user,
        domain=domain)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module
)
def view_user_preferences(
    user: str,
    domain: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """DEPRECATED: USE GET useradmin/v2/user/{shortNameOrID}/preferences. View users preferences. (PUBLIC)
    
    :param str user: User ID or username
    :param str domain: Domain ID or shortname \(optional\, defaults to current user domain\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/users/v1/user/{user}/preferences".format(user=user,
        domain=domain)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``list_users`` is an alias for ``list_users_v1``. Exists
#: only for backward compatibility - **do not use** - use ``list_users_v1`` instead.
list_users = register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module,
    alias="list_users"
)(deprecated_alias("list_users")(list_users_v1))
#: **DEPRECATED** : ``update_profile_picture_for_user_j_s_o_n`` is an alias for ``update_profile_picture_for_user_json``. Exists
#: only for backward compatibility - **do not use** - use ``update_profile_picture_for_user_json`` instead.
update_profile_picture_for_user_j_s_o_n = register_command(
    extending=("users", "v1", "user"),
    module=argus_cli_module,
    alias="update_profile_picture_for_user_j_s_o_n"
)(deprecated_alias("update_profile_picture_for_user_j_s_o_n")(update_profile_picture_for_user_json))