"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
log = logging.getLogger(__name__)


@register_command(
    extending=("assets", "v2", "import", "asset"),
    module=argus_cli_module
)
def get_import_status_by_id(
    importJobID: str,
    includeComments: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Retrieve the status of an import job by the job id returned when submitting an import request (DEV)
    
    :param str importJobID: ID assigned to the import job
    :param bool includeComments: Whether to include any comments generated by the import job
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/import/status/{importJobID}".format(importJobID=importJobID,
        includeComments=includeComments)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "import", "asset"),
    module=argus_cli_module
)
def import_asset(
    assetName: str = None,
    dataSource: str = None,
    customer: str = None,
    assetIdentification: dict = None,
    components: dict = None,
    observations: dict = None,
    ttl: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Imports Assets (DEV)
    
    :param str assetName: Display name of the Asset. Used if new asset. If not set a random UUID will be generated
    :param str dataSource: Required ID or short name of the data source
    :param str customer: ID or short name of the asset\'s customer
    :param dict assetIdentification: Request to identify an Asset
    :param list components: Specify components to import
    :param list observations: Observations to be added to the asset
    :param int ttl: Time to live duration of this asset since last seen\, 0 means won\'t expire.Will be inherited by any observations and their components in the import if they do not have their own non\-null TTLs.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/import/asset".format()
    headers = {}

    body = body or {}
    # Only send assetName if the argument was provided, don't send null values
    if assetName is not None:
        body.update({"assetName": assetName})
    # Only send dataSource if the argument was provided, don't send null values
    if dataSource is not None:
        body.update({"dataSource": dataSource})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send assetIdentification if the argument was provided, don't send null values
    if assetIdentification is not None:
        body.update({"assetIdentification": assetIdentification})
    # Only send components if the argument was provided, don't send null values
    if components is not None:
        body.update({"components": components})
    # Only send observations if the argument was provided, don't send null values
    if observations is not None:
        body.update({"observations": observations})
    # Only send ttl if the argument was provided, don't send null values
    if ttl is not None:
        body.update({"ttl": ttl})

    query_parameters = {}
    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "import", "asset"),
    module=argus_cli_module
)
def list_import_status(
    job: str = None,
    customer: str = None,
    asset: str = None,
    minCount: int = None,
    maxCount: int = None,
    countFieldStrategy: str = None,
    timeFieldStrategy: str = None,
    sortBy: str = None,
    startTimestamp: str = "0",
    endTimestamp: str = "0",
    limit: int = 25,
    offset: int = None,
    includeComments: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Basic import status search (DEV)
    
    :param list job: Job ids
    :param list customer: Customer ids or short names
    :param list asset: Asset ids or short names
    :param int minCount: Filter by minCount
    :param int maxCount: Filter by maxCount
    :param list countFieldStrategy: Which count field\(s\) to filter min\/maxCount
    :param list timeFieldStrategy: Which time field\(s\) to filter by timestamp start\/end
    :param list sortBy: Field\(s\) to sort by \- refer to the search POST endpoint to see which fields are permitted
    :param str startTimestamp: Lower bound timestamp filter value
    :param str endTimestamp: Upper bound timestamp filter value
    :param int limit: Limit result set
    :param int offset: Offset result set
    :param bool includeComments: Whether to include any comments generated by the import job
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/import/status".format(startTimestamp=startTimestamp,
        endTimestamp=endTimestamp,
        limit=limit,
        job=job,
        customer=customer,
        asset=asset,
        minCount=minCount,
        maxCount=maxCount,
        countFieldStrategy=countFieldStrategy,
        timeFieldStrategy=timeFieldStrategy,
        offset=offset,
        sortBy=sortBy,
        includeComments=includeComments)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        query_parameters.update({"startTimestamp": startTimestamp})
    
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        query_parameters.update({"endTimestamp": endTimestamp})
    
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send job if the argument was provided, don't send null values
    if job is not None:
        query_parameters.update({"job": job})
    
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    # Only send asset if the argument was provided, don't send null values
    if asset is not None:
        query_parameters.update({"asset": asset})
    
    # Only send minCount if the argument was provided, don't send null values
    if minCount is not None:
        query_parameters.update({"minCount": minCount})
    
    # Only send maxCount if the argument was provided, don't send null values
    if maxCount is not None:
        query_parameters.update({"maxCount": maxCount})
    
    # Only send countFieldStrategy if the argument was provided, don't send null values
    if countFieldStrategy is not None:
        query_parameters.update({"countFieldStrategy": countFieldStrategy})
    
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        query_parameters.update({"timeFieldStrategy": timeFieldStrategy})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("assets", "v2", "import", "asset"),
    module=argus_cli_module
)
def search_import_status(
    startTimestamp: str = None,
    endTimestamp: str = None,
    timeFieldStrategy: str = None,
    timeMatchStrategy: str = None,
    minCount: int = None,
    maxCount: int = None,
    countFieldStrategy: str = None,
    countMatchStrategy: str = None,
    userFieldStrategy: str = None,
    userMatchStrategy: str = None,
    user: str = None,
    job: str = None,
    asset: str = None,
    customer: str = None,
    dataSource: str = None,
    importStatus: str = None,
    importResult: str = None,
    subCriteria: dict = None,
    sortBy: str = None,
    includeComments: bool = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Search import statuses (DEV)
    
    :param str startTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(start timestamp\). \(default 0\)
    :param str endTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(end timestamp\). \(default 0\)
    :param list timeFieldStrategy: Defines which timestamps fields will be filtered with start\/endTimestamp \(default all\)
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp \(default any\) \(default any\)
    :param int minCount: Filter import job statuses whose count fields\, as selected by the count field strategy\, are at least this count i.e. \>\=
    :param int maxCount: Filter import job statuses whose count fields\, as selected by the count field strategy\, are at most this count i.e. \<\=
    :param list countFieldStrategy: Defines which count fields will be filtered with min\/maxCount \(default all\)
    :param str countMatchStrategy: Defines how strict to match against different count fields \(all\/any\) using min\/maxCount\(default any\) \(default any\)
    :param list userFieldStrategy: Defines which user fields to filter by \(default submittedByUser\)
    :param str userMatchStrategy: Defines how strict to match against different user fields \(default any\)
    :param list user: Filter by import jobs related to these users\, identifiable by their id or shortname
    :param list job: Filter by the IDs of the import jobs
    :param list asset: Filter by import jobs for these assets\, identifiable by their id or shortname
    :param list customer: Filter by import jobs for assets belonging to these customers\, identifiable by their id or shortname
    :param list dataSource: Filter by import jobs for assets reported by these data sources\, identifiable by their id or shortname
    :param list importStatus: Filter for import jobs with any of these statuses
    :param list importResult: Filter for import jobs with any of these results
    :param list subCriteria: Set additional criteria that are applied with logical OR by default
    :param list sortBy: Field\(s\) by which to sort the results \(default jobEndTimestamp\)
    :param bool includeComments: Whether to include any comments generated by the import job
    :param int limit: Limit the results to the specified amount \(default 25\)
    :param int offset: Skip specified amount of results \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/import/status/search".format()
    headers = {}

    body = body or {}
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send minCount if the argument was provided, don't send null values
    if minCount is not None:
        body.update({"minCount": minCount})
    # Only send maxCount if the argument was provided, don't send null values
    if maxCount is not None:
        body.update({"maxCount": maxCount})
    # Only send countFieldStrategy if the argument was provided, don't send null values
    if countFieldStrategy is not None:
        body.update({"countFieldStrategy": countFieldStrategy})
    # Only send countMatchStrategy if the argument was provided, don't send null values
    if countMatchStrategy is not None:
        body.update({"countMatchStrategy": countMatchStrategy})
    # Only send userFieldStrategy if the argument was provided, don't send null values
    if userFieldStrategy is not None:
        body.update({"userFieldStrategy": userFieldStrategy})
    # Only send userMatchStrategy if the argument was provided, don't send null values
    if userMatchStrategy is not None:
        body.update({"userMatchStrategy": userMatchStrategy})
    # Only send user if the argument was provided, don't send null values
    if user is not None:
        body.update({"user": user})
    # Only send job if the argument was provided, don't send null values
    if job is not None:
        body.update({"job": job})
    # Only send asset if the argument was provided, don't send null values
    if asset is not None:
        body.update({"asset": asset})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send dataSource if the argument was provided, don't send null values
    if dataSource is not None:
        body.update({"dataSource": dataSource})
    # Only send importStatus if the argument was provided, don't send null values
    if importStatus is not None:
        body.update({"importStatus": importStatus})
    # Only send importResult if the argument was provided, don't send null values
    if importResult is not None:
        body.update({"importResult": importResult})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        body.update({"includeComments": includeComments})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
