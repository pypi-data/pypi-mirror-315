"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional
if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def search_notifications(
    user: str = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    service: str = None,
    operation: str = None,
    objectID: str = None,
    objectCustomer: str = None,
    limit: int = 25,
    offset: int = None,
    includeContext: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Returns a list of current user's notifications matching the search criteria (DEV)
    
    :param list user: Restrict search to return notifications generated by specified users. Can be shortnames or userIds.
    :param int startTimestamp: Restrict search to return notifications created after the timestamp. Defaults to no restrictions.
    :param int endTimestamp: Restrict search to return notifications created before the timestamp. Defaults to now.
    :param list includeFlags: Restrict search to return notifications which have the specified flags set.
    :param list excludeFlags: Restrict search to return notifications which have the specified flags unset.
    :param list service: Limit to notifications generated by the specified Argus services.
    :param list operation: Limit to notifications generated by the specified Argus operations
    :param list objectID: Limit to notification generated by the specified set of Argus objects by their IDs
    :param list objectCustomer: Limit to notifications generated by the specified customers. Can be a list of shortnames and\/or customerIDs
    :param int limit: Limit number of returning notifications. \(default 25\)
    :param int offset: Offset notifications \(default 0\)
    :param bool includeContext: Specify if service specific notification context should be included \(default false\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/notification/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send user if the argument was provided, don't send null values
    if user is not None:
        body.update({"user": user})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send service if the argument was provided, don't send null values
    if service is not None:
        body.update({"service": service})
    # Only send operation if the argument was provided, don't send null values
    if operation is not None:
        body.update({"operation": operation})
    # Only send objectID if the argument was provided, don't send null values
    if objectID is not None:
        body.update({"objectID": objectID})
    # Only send objectCustomer if the argument was provided, don't send null values
    if objectCustomer is not None:
        body.update({"objectCustomer": objectCustomer})
    # Only send includeContext if the argument was provided, don't send null values
    if includeContext is not None:
        body.update({"includeContext": includeContext})

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
