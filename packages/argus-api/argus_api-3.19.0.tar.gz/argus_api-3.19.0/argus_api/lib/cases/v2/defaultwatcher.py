"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional
if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def list_default_watchers(
    customer: str = None,
    service: str = None,
    caseType: str = None,
    priority: str = None,
    accessMode: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """List default watchers for a specified service (PUBLIC)
    
    :param list customer: Filter watchers by customer
    :param list service: Filter watchers by service
    :param list caseType: Filter watchers by caseType
    :param list priority: Filter watchers by priority
    :param str accessMode: Filter watchers by access mode
    :param int limit: Maximum number of returned results
    :param int offset: 
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/cases/v2/defaultwatcher".format(limit=limit,
        offset=offset,
        customer=customer,
        service=service,
        caseType=caseType,
        priority=priority,
        accessMode=accessMode)

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    # Only send service if the argument was provided, don't send null values
    if service is not None:
        query_parameters.update({"service": service})
    
    # Only send caseType if the argument was provided, don't send null values
    if caseType is not None:
        query_parameters.update({"caseType": caseType})
    
    # Only send priority if the argument was provided, don't send null values
    if priority is not None:
        query_parameters.update({"priority": priority})
    
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        query_parameters.update({"accessMode": accessMode})
    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
