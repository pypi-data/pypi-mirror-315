# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SubscriptionResponse(pydantic.BaseModel):
    """
    Response model for a successful `Subscription` request retrieving plan
    information.

    Response field behavior:
    - Required fields are guaranteed to be present and non-null.
    - Optional fields may be `null`/`undefined` if the data couldn't
    be extracted during processing.
    """

    active: bool = pydantic.Field(description="Indicates whether the subscription is currently active.")
    concurrent_calls: int = pydantic.Field(
        description="The number of API calls allowed per second allowed in the current plan."
    )
    plan: str = pydantic.Field(description="The name of the subscription plan.")
    plan_calls: int = pydantic.Field(description="The total number of API calls assigned to the current subscription.")
    remaining_calls: int = pydantic.Field(
        description="The number of API calls remaining for the current subscription period."
    )
    historical_days: int = pydantic.Field(
        description="The number of historical days accessible under the current subscription plan."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
