# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AdditionalSourceInfo(pydantic.BaseModel):
    """
    The data model for additional information about a news source.
    """

    nb_articles_for_7_d: typing.Optional[int] = pydantic.Field(
        alias="nb_articles_for_7d", description="The number of articles published by the source in the last seven days."
    )
    country: typing.Optional[str] = pydantic.Field(description="The country of origin of the news source.")
    rank: typing.Optional[int] = pydantic.Field(description="The SEO rank of the news source.")
    is_news_domain: typing.Optional[bool] = pydantic.Field(description="Indicates whether the source is a news domain.")
    news_domain_type: typing.Optional[str] = pydantic.Field(description="The type of news domain.")
    news_type: typing.Optional[str] = pydantic.Field(description="The category of news provided by the source.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
