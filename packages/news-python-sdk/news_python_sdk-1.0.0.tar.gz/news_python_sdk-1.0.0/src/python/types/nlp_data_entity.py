# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .named_entity_list import NamedEntityList
from .sentiment_scores import SentimentScores

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class NlpDataEntity(pydantic.BaseModel):
    """
    Natural Language Processing data for the article.
    """

    theme: typing.Optional[str] = pydantic.Field(
        description="A comma-separated string of themes identified in the article."
    )
    summary: typing.Optional[str] = pydantic.Field(description="A brief AI-generated summary of the article content.")
    sentiment: typing.Optional[SentimentScores]
    new_embedding: typing.Optional[typing.List[float]] = pydantic.Field(
        description=(
            "A dense 1024-dimensional vector representation of the article content, generated using \n"
            "the [multilingual-e5-large](https://huggingface.co/intfloat/multilingual-e5-large) model.\n"
            "\n"
            "**Note**: The `new_embedding` field is only available in the `v3_local_news_nlp_embeddings` subscription plan.\n"
        )
    )
    ner_per: typing.Optional[NamedEntityList] = pydantic.Field(
        alias="ner_PER", description="Named Entity Recognition for person entities (individuals' names)."
    )
    ner_org: typing.Optional[NamedEntityList] = pydantic.Field(
        alias="ner_ORG", description="Named Entity Recognition for organization entities (company names, institutions)."
    )
    ner_misc: typing.Optional[NamedEntityList] = pydantic.Field(
        alias="ner_MISC",
        description="Named Entity Recognition for miscellaneous entities (events, nationalities, products).",
    )
    ner_loc: typing.Optional[NamedEntityList] = pydantic.Field(
        alias="ner_LOC",
        description="Named Entity Recognition for location entities (cities, countries, geographic features).",
    )
    iptc_tags_name: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "IPTC media topic taxonomy paths identified in the article content.\n"
            "Each path represents a hierarchical category following the IPTC standard.\n"
        )
    )
    iptc_tags_id: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "IPTC media topic numeric codes identified in the article content.\n"
            "These codes correspond to the standardized IPTC media topic taxonomy.\n"
        )
    )
    iab_tags_name: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "IAB content taxonomy paths identified in the article content.\n"
            "Each path represents a hierarchical category following the IAB content standard.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
