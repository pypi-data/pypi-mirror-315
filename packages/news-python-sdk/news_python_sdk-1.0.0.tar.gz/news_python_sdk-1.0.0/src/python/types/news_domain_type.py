# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class NewsDomainType(str, enum.Enum):
    """
    Filters results based on the news domain type.
    Possible values are:
    - `Original Content`: Sources that produce their own content.
    - `Aggregator`: Sources that collect content from various other sources.
    - `Press Releases`: Sources primarily publishing press releases.
    - `Republisher`: Sources that republish content from other sources.
    - `Other`: Sources that don't fit into main categories.
    """

    ORIGINAL_CONTENT = "Original Content"
    AGGREGATOR = "Aggregator"
    PRESS_RELEASES = "Press Releases"
    REPUBLISHER = "Republisher"
    OTHER = "Other"

    def visit(
        self,
        original_content: typing.Callable[[], T_Result],
        aggregator: typing.Callable[[], T_Result],
        press_releases: typing.Callable[[], T_Result],
        republisher: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is NewsDomainType.ORIGINAL_CONTENT:
            return original_content()
        if self is NewsDomainType.AGGREGATOR:
            return aggregator()
        if self is NewsDomainType.PRESS_RELEASES:
            return press_releases()
        if self is NewsDomainType.REPUBLISHER:
            return republisher()
        if self is NewsDomainType.OTHER:
            return other()
