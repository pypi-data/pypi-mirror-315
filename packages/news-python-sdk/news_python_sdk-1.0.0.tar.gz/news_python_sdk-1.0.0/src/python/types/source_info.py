# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .additional_source_info import AdditionalSourceInfo

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SourceInfo(pydantic.BaseModel):
    """
    The data model for information about a news source.
    """

    name_source: typing.Optional[str] = pydantic.Field(description="The name of the news source.")
    domain_url: str = pydantic.Field(description="The domain URL of the news source.")
    logo: typing.Optional[str] = pydantic.Field(description="The logo of the news source.")
    additional_info: typing.Optional[AdditionalSourceInfo]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
