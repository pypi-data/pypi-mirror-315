# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .source_response_sources_item import SourceResponseSourcesItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SourceResponse(pydantic.BaseModel):
    """
    The response model for a successful `Sources` request retrieving news
    sources matching the specified criteria.

    Response field behavior:
    - Required fields are guaranteed to be present and non-null.
    - Optional fields may be `null`/`undefined` if the data couldn't be extracted
    during processing.
    """

    message: str = pydantic.Field(description="A message indicating the result of the request.")
    sources: typing.List[SourceResponseSourcesItem] = pydantic.Field(
        description="A list of news sources that match the specified criteria."
    )
    user_input: typing.Dict[str, typing.Any] = pydantic.Field(description="The user input parameters for the request.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
