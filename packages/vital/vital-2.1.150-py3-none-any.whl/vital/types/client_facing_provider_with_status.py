# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .resource_availability import ResourceAvailability
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ClientFacingProviderWithStatus(UniversalBaseModel):
    name: str = pydantic.Field()
    """
    Name of source of information
    """

    slug: str = pydantic.Field()
    """
    Slug for designated source
    """

    logo: str = pydantic.Field()
    """
    URL for source logo
    """

    status: str = pydantic.Field()
    """
    Status of source, either error or connected
    """

    resource_availability: typing.Dict[str, ResourceAvailability]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
