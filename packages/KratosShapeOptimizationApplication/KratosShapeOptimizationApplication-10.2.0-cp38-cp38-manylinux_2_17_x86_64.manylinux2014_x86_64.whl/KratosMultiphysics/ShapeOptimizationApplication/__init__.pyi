import Kratos
from typing import overload

class DampingUtilities:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    def DampNodalVariable(self, arg0: Kratos.Array1DVariable3) -> None: ...

class DirectionDampingUtilities:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    def DampNodalVariable(self, arg0: Kratos.Array1DVariable3) -> None: ...

class FaceAngleResponseFunctionUtility:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    def CalculateGradient(self) -> None: ...
    def CalculateValue(self) -> float: ...
    def Initialize(self) -> None: ...

class GeometryUtilities:
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def CalculateLength(self, arg0: Kratos.ElementsArray) -> float: ...
    @overload
    def CalculateLength(self, arg0: Kratos.ConditionsArray) -> float: ...
    def CalculateNodalAreasFromConditions(self) -> None: ...
    def ComputeDistancesToBoundingModelPart(self, arg0: Kratos.ModelPart) -> tuple[list[float], list[float]]: ...
    def ComputeUnitSurfaceNormals(self) -> None: ...
    def ComputeVolume(self) -> float: ...
    def ComputeVolumeShapeDerivatives(self, arg0: Kratos.Array1DVariable3) -> None: ...
    def ExtractBoundaryNodes(self, arg0: str) -> None: ...
    def ExtractEdgeNodes(self, arg0: str) -> None: ...
    def ProjectNodalVariableOnDirection(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def ProjectNodalVariableOnTangentPlane(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def ProjectNodalVariableOnUnitSurfaceNormals(self, arg0: Kratos.Array1DVariable3) -> None: ...

class KratosShapeOptimizationApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class MapperVertexMorphing:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingAdaptiveRadius:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingImprovedIntegration:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingImprovedIntegrationAdaptiveRadius:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingMatrixFree:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingMatrixFreeAdaptiveRadius:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingSymmetric:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MapperVertexMorphingSymmetricAdaptiveRadius:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def Initialize(self) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def InverseMap(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    @overload
    def Map(self, arg0: Kratos.DoubleVariable, arg1: Kratos.DoubleVariable) -> None: ...
    @overload
    def Map(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def Update(self) -> None: ...

class MeshControllerUtilities:
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    def AddFirstVariableToSecondVariable(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def LogMeshChangeAccordingInputVariable(self, arg0: Kratos.Array1DVariable3) -> None: ...
    def RevertMeshUpdateAccordingInputVariable(self, arg0: Kratos.Array1DVariable3) -> None: ...
    def SetDeformationVariablesToZero(self) -> None: ...
    def SetMeshToReferenceMesh(self) -> None: ...
    def SetReferenceMeshToMesh(self) -> None: ...
    def SubtractCoordinatesFromVariable(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array1DVariable3) -> None: ...
    def UpdateMeshAccordingInputVariable(self, arg0: Kratos.Array1DVariable3) -> None: ...
    def WriteCoordinatesToVariable(self, arg0: Kratos.Array1DVariable3) -> None: ...

class OptimizationUtilities:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def AddFirstVariableToSecondVariable(arg0: Kratos.ModelPart, arg1: Kratos.Array1DVariable3, arg2: Kratos.Array1DVariable3) -> None: ...
    @staticmethod
    def AssembleBufferMatrix(arg0: Kratos.Matrix, arg1: list[float]) -> None: ...
    @staticmethod
    def AssembleMatrix(arg0: Kratos.ModelPart, arg1: Kratos.Matrix, arg2: list) -> None: ...
    @overload
    @staticmethod
    def AssembleVector(arg0: Kratos.ModelPart, arg1: Kratos.Vector, arg2: Kratos.DoubleVariable) -> None: ...
    @overload
    @staticmethod
    def AssembleVector(arg0: Kratos.ModelPart, arg1: Kratos.Vector, arg2: Kratos.Array1DVariable3) -> None: ...
    @overload
    @staticmethod
    def AssignVectorToVariable(arg0: Kratos.ModelPart, arg1: Kratos.Vector, arg2: Kratos.DoubleVariable) -> None: ...
    @overload
    @staticmethod
    def AssignVectorToVariable(arg0: Kratos.ModelPart, arg1: Kratos.Vector, arg2: Kratos.Array1DVariable3) -> None: ...
    @staticmethod
    def CalculateProjectedSearchDirectionAndCorrection(*args, **kwargs): ...
    @staticmethod
    def CalculateRelaxedProjectedSearchDirectionAndCorrection(*args, **kwargs): ...
    @staticmethod
    def ComputeControlPointUpdate(arg0: Kratos.ModelPart, arg1: float, arg2: bool) -> None: ...
    @overload
    @staticmethod
    def ComputeL2NormOfNodalVariable(arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable) -> float: ...
    @overload
    @staticmethod
    def ComputeL2NormOfNodalVariable(arg0: Kratos.ModelPart, arg1: Kratos.Array1DVariable3) -> float: ...
    @overload
    @staticmethod
    def ComputeMaxNormOfNodalVariable(arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable) -> float: ...
    @overload
    @staticmethod
    def ComputeMaxNormOfNodalVariable(arg0: Kratos.ModelPart, arg1: Kratos.Array1DVariable3) -> float: ...
    @staticmethod
    def ComputeProjectedSearchDirection(arg0: Kratos.ModelPart) -> None: ...
    @staticmethod
    def ComputeSearchDirectionSteepestDescent(arg0: Kratos.ModelPart) -> None: ...
    @staticmethod
    def CorrectProjectedSearchDirection(arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: float, arg4: bool) -> float: ...

class SearchBasedFunctions:
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    def FlagNodesInRadius(self, arg0: Kratos.NodesArray, arg1: Kratos.Flags, arg2: float) -> None: ...

class UniversalFileIO:
    def __init__(self, arg0: Kratos.ModelPart, arg1: str, arg2: str, arg3: Kratos.Parameters) -> None: ...
    def InitializeLogging(self) -> None: ...
    def LogNodalResults(self, arg0: int) -> None: ...
