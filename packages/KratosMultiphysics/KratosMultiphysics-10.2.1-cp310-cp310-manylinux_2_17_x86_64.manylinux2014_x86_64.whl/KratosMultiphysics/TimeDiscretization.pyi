from typing import overload

class BDF:
    def __init__(self, arg0: int) -> None: ...
    def ComputeAndSaveBDFCoefficients(self, arg0) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float, arg1: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...
    def GetTimeOrder(self) -> int: ...

class BDF1:
    def __init__(self) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...

class BDF2:
    def __init__(self) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float, arg1: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...

class BDF3:
    def __init__(self) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...

class BDF4:
    def __init__(self) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...

class BDF5:
    def __init__(self) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...

class BDF6:
    def __init__(self) -> None: ...
    @overload
    def ComputeBDFCoefficients(self, arg0: float) -> list[float]: ...
    @overload
    def ComputeBDFCoefficients(self, arg0) -> list[float]: ...

class Bossak:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def GetAlphaM(self) -> float: ...
    def GetBeta(self) -> float: ...
    def GetGamma(self) -> float: ...

class GeneralizedAlpha:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def GetAlphaF(self) -> float: ...
    def GetAlphaM(self) -> float: ...
    def GetBeta(self) -> float: ...
    def GetGamma(self) -> float: ...

class Newmark:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    def GetBeta(self) -> float: ...
    def GetGamma(self) -> float: ...

@overload
def GetMinimumBufferSize(arg0: BDF) -> int: ...
@overload
def GetMinimumBufferSize(arg0: BDF1) -> int: ...
@overload
def GetMinimumBufferSize(arg0: BDF2) -> int: ...
@overload
def GetMinimumBufferSize(arg0: BDF3) -> int: ...
@overload
def GetMinimumBufferSize(arg0: BDF4) -> int: ...
@overload
def GetMinimumBufferSize(arg0: BDF5) -> int: ...
@overload
def GetMinimumBufferSize(arg0: BDF6) -> int: ...
@overload
def GetMinimumBufferSize(arg0: Newmark) -> int: ...
@overload
def GetMinimumBufferSize(arg0: Bossak) -> int: ...
@overload
def GetMinimumBufferSize(arg0: GeneralizedAlpha) -> int: ...
