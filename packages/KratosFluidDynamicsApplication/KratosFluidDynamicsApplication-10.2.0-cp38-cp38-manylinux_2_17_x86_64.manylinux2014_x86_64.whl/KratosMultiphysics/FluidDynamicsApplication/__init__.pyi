import Kratos
from typing import ClassVar, overload

class AccelerationLimitationUtilities:
    def __init__(self, arg0: Kratos.ModelPart, arg1: float) -> None: ...
    def Execute(self) -> None: ...
    def SetLimitAsMultipleOfGravitionalAcceleration(self, arg0: float) -> None: ...

class ApplyCompressibleNavierStokesBoundaryConditionsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class BDF2TurbulentScheme(Kratos.Scheme):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Process) -> None: ...

class BaseSettingsType:
    def __init__(self, *args, **kwargs) -> None: ...

class Bingham3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class BoussinesqForceProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class CalulateLevelsetConsistentNodalGradientProcess(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class CompressibleElementRotationUtility(Kratos.CoordinateTransformationUtils):
    def __init__(self, arg0: int, arg1: Kratos.Flags) -> None: ...

class CompressibleNavierStokesExplicitSolvingStrategyBFECC(Kratos.ExplicitSolvingStrategyBFECC):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: bool, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ExplicitBuilder, arg2: bool, arg3: int) -> None: ...

class CompressibleNavierStokesExplicitSolvingStrategyForwardEuler(Kratos.ExplicitSolvingStrategyRungeKutta1):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: bool, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ExplicitBuilder, arg2: bool, arg3: int) -> None: ...

class CompressibleNavierStokesExplicitSolvingStrategyRungeKutta3TVD(Kratos.ExplicitSolvingStrategyRungeKutta3TVD):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: bool, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ExplicitBuilder, arg2: bool, arg3: int) -> None: ...

class CompressibleNavierStokesExplicitSolvingStrategyRungeKutta4(Kratos.ExplicitSolvingStrategyRungeKutta4):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: bool, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ExplicitBuilder, arg2: bool, arg3: int) -> None: ...

class ComputePressureCoefficientProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class ComputeYPlusProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class DistanceModificationProcess(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: bool, arg4: bool, arg5: bool) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class DistanceSmoothingProcess2D(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.LinearSolver) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class DistanceSmoothingProcess3D(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.LinearSolver) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class DragResponseFunction2D(Kratos.AdjointResponseFunction):
    def __init__(self, arg0: Kratos.Parameters, arg1: Kratos.ModelPart) -> None: ...

class DragResponseFunction3D(Kratos.AdjointResponseFunction):
    def __init__(self, arg0: Kratos.Parameters, arg1: Kratos.ModelPart) -> None: ...

class DragUtilities:
    def __init__(self) -> None: ...
    def CalculateBodyFittedDrag(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def CalculateEmbeddedDrag(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...

class DynamicSmagorinskyUtils:
    def __init__(self, arg0: Kratos.ModelPart, arg1: int) -> None: ...
    def CalculateC(self) -> None: ...
    def CorrectFlagValues(self, arg0: Kratos.DoubleVariable) -> None: ...
    def StoreCoarseMesh(self) -> None: ...

class EmbeddedNodesInitializationProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: int) -> None: ...

class EmbeddedPostprocessProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...

class EmbeddedSkinVisualizationProcess(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: list[Kratos.DoubleVariable], arg3: list[Kratos.Array1DVariable3], arg4: list[Kratos.DoubleVariable], arg5: list[Kratos.Array1DVariable3], arg6, arg7, arg8: bool) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...

class EstimateDtUtility:
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: float) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    def EstimateDt(self) -> float: ...
    def SetCFL(self, arg0: float) -> None: ...
    @overload
    def SetDtMax(self, arg0: float) -> None: ...
    @overload
    def SetDtMax(self, arg0: float) -> None: ...

class Euler2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class Euler3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class FluidAuxiliaryUtilities:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def CalculateFlowRate(arg0: Kratos.ModelPart) -> float: ...
    @overload
    @staticmethod
    def CalculateFlowRateNegativeSkin(arg0: Kratos.ModelPart) -> float: ...
    @overload
    @staticmethod
    def CalculateFlowRateNegativeSkin(arg0: Kratos.ModelPart, arg1: Kratos.Flags) -> float: ...
    @overload
    @staticmethod
    def CalculateFlowRatePositiveSkin(arg0: Kratos.ModelPart) -> float: ...
    @overload
    @staticmethod
    def CalculateFlowRatePositiveSkin(arg0: Kratos.ModelPart, arg1: Kratos.Flags) -> float: ...
    @staticmethod
    def CalculateFluidNegativeVolume(arg0: Kratos.ModelPart) -> float: ...
    @staticmethod
    def CalculateFluidPositiveVolume(arg0: Kratos.ModelPart) -> float: ...
    @staticmethod
    def CalculateFluidVolume(arg0: Kratos.ModelPart) -> float: ...
    @overload
    @staticmethod
    def FindMaximumEdgeLength(arg0: Kratos.ModelPart) -> float: ...
    @overload
    @staticmethod
    def FindMaximumEdgeLength(arg0: Kratos.ModelPart, arg1: bool) -> float: ...
    @staticmethod
    def MapVelocityFromSkinToVolumeRBF(arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: float) -> None: ...
    @staticmethod
    def PostprocessP2P1ContinuousPressure(arg0: Kratos.ModelPart) -> None: ...

class FluidCharacteristicNumbersUtilities:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def CalculateLocalCFL(arg0: Kratos.ModelPart) -> None: ...

class FluidMeshUtilities:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def AllElementsAreSimplex(arg0: Kratos.ModelPart) -> bool: ...
    @staticmethod
    def AssignNeighbourElementsToConditions(arg0: Kratos.ModelPart, arg1: bool) -> None: ...

class FluidTestUtilities:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    @staticmethod
    def RandomFillHistoricalVariable(arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable, arg2: float, arg3: float, arg4: int) -> None: ...
    @overload
    @staticmethod
    def RandomFillHistoricalVariable(arg0: Kratos.ModelPart, arg1: Kratos.Array1DVariable3, arg2: float, arg3: float, arg4: int) -> None: ...
    @overload
    @staticmethod
    def RandomFillHistoricalVariable(arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable, arg2: str, arg3: float, arg4: float, arg5: int) -> None: ...
    @overload
    @staticmethod
    def RandomFillHistoricalVariable(arg0: Kratos.ModelPart, arg1: Kratos.Array1DVariable3, arg2: str, arg3: float, arg4: float, arg5: int) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.NodesArray, arg1: Kratos.DoubleVariable, arg2: int, arg3: float, arg4: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.NodesArray, arg1: Kratos.DoubleVariable, arg2: str, arg3: int, arg4: float, arg5: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.NodesArray, arg1: Kratos.Array1DVariable3, arg2: int, arg3: float, arg4: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.NodesArray, arg1: Kratos.Array1DVariable3, arg2: str, arg3: int, arg4: float, arg5: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ConditionsArray, arg1: Kratos.DoubleVariable, arg2: int, arg3: float, arg4: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ConditionsArray, arg1: Kratos.DoubleVariable, arg2: str, arg3: int, arg4: float, arg5: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ConditionsArray, arg1: Kratos.Array1DVariable3, arg2: int, arg3: float, arg4: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ConditionsArray, arg1: Kratos.Array1DVariable3, arg2: str, arg3: int, arg4: float, arg5: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ElementsArray, arg1: Kratos.DoubleVariable, arg2: int, arg3: float, arg4: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ElementsArray, arg1: Kratos.DoubleVariable, arg2: str, arg3: int, arg4: float, arg5: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ElementsArray, arg1: Kratos.Array1DVariable3, arg2: int, arg3: float, arg4: float) -> None: ...
    @overload
    @staticmethod
    def RandomFillNonHistoricalVariable(arg0: Kratos.ElementsArray, arg1: Kratos.Array1DVariable3, arg2: str, arg3: int, arg4: float, arg5: float) -> None: ...

class FractionalStepSettings(BaseSettingsType):
    def __init__(self, arg0: Kratos.ModelPart, arg1: int, arg2: int, arg3: bool, arg4: bool, arg5: bool) -> None: ...
    def GetStrategy(self, arg0: StrategyLabel) -> Kratos.ImplicitSolvingStrategy: ...
    def SetEchoLevel(self, arg0: int) -> None: ...
    def SetStrategy(self, arg0: StrategyLabel, arg1: Kratos.LinearSolver, arg2: float, arg3: int) -> None: ...
    @overload
    def SetTurbulenceModel(self, arg0: TurbulenceModelLabel, arg1: Kratos.LinearSolver, arg2: float, arg3: int) -> None: ...
    @overload
    def SetTurbulenceModel(self, arg0: Kratos.Process) -> None: ...

class FractionalStepSettingsPeriodic(BaseSettingsType):
    def __init__(self, arg0: Kratos.ModelPart, arg1: int, arg2: int, arg3: bool, arg4: bool, arg5: bool, arg6: Kratos.IntegerVariable) -> None: ...
    def GetStrategy(self, arg0: StrategyLabel) -> Kratos.ImplicitSolvingStrategy: ...
    def SetEchoLevel(self, arg0: int) -> None: ...
    def SetStrategy(self, arg0: StrategyLabel, arg1: Kratos.LinearSolver, arg2: float, arg3: int) -> None: ...

class FractionalStepStrategy(Kratos.ImplicitSolvingStrategy):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddIterationStep(self, arg0: Kratos.Process) -> None: ...
    def CalculateReactions(self) -> None: ...
    def ClearExtraIterationSteps(self) -> None: ...

class HerschelBulkley3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class IntegrationPointStatisticsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...

class IntegrationPointToNodeTransformationUtility2D:
    def __init__(self) -> None: ...
    def TransformFromIntegrationPointsToNodes(self, arg0: Kratos.DoubleVariable, arg1: Kratos.ModelPart) -> None: ...

class IntegrationPointToNodeTransformationUtility3D:
    def __init__(self) -> None: ...
    def TransformFromIntegrationPointsToNodes(self, arg0: Kratos.DoubleVariable, arg1: Kratos.ModelPart) -> None: ...

class KratosFluidDynamicsApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class MassConservationCheckProcess(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: bool, arg2: int, arg3: bool, arg4: str) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    def ComputeFlowOverBoundary(self, arg0: Kratos.Flags) -> float: ...
    def ComputeInterfaceArea(self) -> float: ...
    def ComputeNegativeVolume(self) -> float: ...
    def ComputePositiveVolume(self) -> float: ...
    def ExecuteInTimeStep(self) -> str: ...
    def Initialize(self) -> str: ...

class Newtonian2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class Newtonian3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class NewtonianTemperatureDependent2DLaw(Newtonian2DLaw):
    def __init__(self) -> None: ...

class NewtonianTemperatureDependent3DLaw(Newtonian3DLaw):
    def __init__(self) -> None: ...

class NewtonianTwoFluid2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class NewtonianTwoFluid3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class PeriodicConditionUtilities:
    def __init__(self, arg0: Kratos.ModelPart, arg1: int) -> None: ...
    def AddPeriodicVariable(self, arg0: Kratos.Properties, arg1: Kratos.DoubleVariable) -> None: ...
    def DefinePeriodicBoundary(self, arg0: Kratos.Properties, arg1: str, arg2: float, arg3: float, arg4: float) -> None: ...
    def SetUpSearchStructure(self, arg0: Kratos.DoubleVariable, arg1: float) -> None: ...

class ResidualBasedBlockBuilderAndSolverPeriodic(Kratos.ResidualBasedBlockBuilderAndSolver):
    def __init__(self, arg0: Kratos.LinearSolver, arg1: Kratos.IntegerVariable) -> None: ...

class ResidualBasedPredictorCorrectorVelocityBossakSchemeTurbulent(Kratos.Scheme):
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: int, arg3: Kratos.Process) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: int, arg3: float, arg4: Kratos.Process) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: int, arg2: Kratos.IntegerVariable) -> None: ...

class ResidualBasedSimpleSteadyScheme(Kratos.Scheme):
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: int, arg3: Kratos.Process) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: int) -> None: ...
    def GetPressureRelaxationFactor(self) -> float: ...
    def GetVelocityRelaxationFactor(self) -> float: ...
    def SetPressureRelaxationFactor(self, arg0: float) -> None: ...
    def SetVelocityRelaxationFactor(self, arg0: float) -> None: ...

class ShockCapturingEntropyViscosityProcess(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ShockCapturingPhysicsBasedProcess(Kratos.Process):
    @overload
    def __init__(self, arg0: Kratos.Model, arg1: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class SimpleSteadyAdjointScheme(Kratos.Scheme):
    def __init__(self, arg0: Kratos.AdjointResponseFunction, arg1: int, arg2: int) -> None: ...

class SimpleSteadySensitivityBuilderScheme(Kratos.SensitivityBuilderScheme):
    def __init__(self, arg0: int, arg1: int) -> None: ...

class SpalartAllmarasTurbulenceModel(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.LinearSolver, arg2: int, arg3: float, arg4: int, arg5: bool, arg6: int) -> None: ...
    def ActivateDES(self, arg0: float) -> None: ...
    def AdaptForFractionalStep(self) -> None: ...

class StokesInitializationProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.LinearSolver, arg2: int, arg3: Kratos.IntegerVariable) -> None: ...
    def SetConditions(self, arg0: Kratos.ModelPart, arg1: Kratos.ConditionsArray) -> None: ...

class StrategyLabel:
    __members__: ClassVar[dict] = ...  # read-only
    Pressure: ClassVar[StrategyLabel] = ...
    Velocity: ClassVar[StrategyLabel] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TurbulenceModelLabel:
    __members__: ClassVar[dict] = ...  # read-only
    SpalartAllmaras: ClassVar[TurbulenceModelLabel] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TwoFluidsInletProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters, arg2: Kratos.Process) -> None: ...
    def SmoothDistanceField(self) -> None: ...

class VelocityBossakAdjointScheme(Kratos.Scheme):
    def __init__(self, arg0: Kratos.Parameters, arg1: Kratos.AdjointResponseFunction, arg2: int, arg3: int) -> None: ...

class VelocityBossakSensitivityBuilderScheme(Kratos.SensitivityBuilderScheme):
    def __init__(self, arg0: float, arg1: int, arg2: int) -> None: ...

class VelocityPressureNormSquareResponseFunction(Kratos.AdjointResponseFunction):
    def __init__(self, arg0: Kratos.Parameters, arg1: Kratos.Model) -> None: ...

class WindkesselModel(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
