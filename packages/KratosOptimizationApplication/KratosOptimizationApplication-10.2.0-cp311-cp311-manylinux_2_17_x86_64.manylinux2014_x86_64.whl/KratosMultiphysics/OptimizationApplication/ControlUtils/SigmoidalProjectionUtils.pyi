import Kratos.Expression
from typing import overload

@overload
def CalculateForwardProjectionGradient(nodal_expression: Kratos.Expression.NodalExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.NodalExpression: ...
@overload
def CalculateForwardProjectionGradient(condition_expression: Kratos.Expression.ConditionExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.ConditionExpression: ...
@overload
def CalculateForwardProjectionGradient(element_expression: Kratos.Expression.ElementExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.ElementExpression: ...
@overload
def ProjectBackward(nodal_expression: Kratos.Expression.NodalExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.NodalExpression: ...
@overload
def ProjectBackward(condition_expression: Kratos.Expression.ConditionExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.ConditionExpression: ...
@overload
def ProjectBackward(element_expression: Kratos.Expression.ElementExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.ElementExpression: ...
@overload
def ProjectForward(nodal_expression: Kratos.Expression.NodalExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.NodalExpression: ...
@overload
def ProjectForward(condition_expression: Kratos.Expression.ConditionExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.ConditionExpression: ...
@overload
def ProjectForward(element_expression: Kratos.Expression.ElementExpression, x_values: list[float], y_values: list[float], beta: float, penalty_factor: int) -> Kratos.Expression.ElementExpression: ...
