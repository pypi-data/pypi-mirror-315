import Kratos
from typing import overload

@overload
def AreAllEntitiesOfSameGeometryType(arg0: Kratos.ConditionsArray, arg1: Kratos.DataCommunicator) -> bool: ...
@overload
def AreAllEntitiesOfSameGeometryType(arg0: Kratos.ElementsArray, arg1: Kratos.DataCommunicator) -> bool: ...
@overload
def CreateEntitySpecificPropertiesForContainer(arg0: Kratos.ModelPart, arg1: Kratos.ConditionsArray) -> None: ...
@overload
def CreateEntitySpecificPropertiesForContainer(arg0: Kratos.ModelPart, arg1: Kratos.ElementsArray) -> None: ...
def GetComponentWiseModelParts(model: Kratos.Model, parameters: Kratos.Parameters) -> list[list[Kratos.ModelPart]]: ...
def GetSolutionStepVariableNamesList(model_part: Kratos.ModelPart) -> list[str]: ...
@overload
def GetVariableDimension(arg0: Kratos.DoubleVariable, arg1: int) -> int: ...
@overload
def GetVariableDimension(arg0: Kratos.Array1DVariable3, arg1: int) -> int: ...
def IsSolutionStepVariablesListASubSet(main_set_model_part: Kratos.ModelPart, sub_set_model_part: Kratos.ModelPart) -> bool: ...
@overload
def IsVariableExistsInAllContainerProperties(arg0: Kratos.ConditionsArray, arg1: Kratos.DoubleVariable, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAllContainerProperties(arg0: Kratos.ElementsArray, arg1: Kratos.DoubleVariable, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAllContainerProperties(arg0: Kratos.ConditionsArray, arg1: Kratos.Array1DVariable3, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAllContainerProperties(arg0: Kratos.ElementsArray, arg1: Kratos.Array1DVariable3, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAtLeastOneContainerProperties(arg0: Kratos.ConditionsArray, arg1: Kratos.DoubleVariable, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAtLeastOneContainerProperties(arg0: Kratos.ElementsArray, arg1: Kratos.DoubleVariable, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAtLeastOneContainerProperties(arg0: Kratos.ConditionsArray, arg1: Kratos.Array1DVariable3, arg2: Kratos.DataCommunicator) -> bool: ...
@overload
def IsVariableExistsInAtLeastOneContainerProperties(arg0: Kratos.ElementsArray, arg1: Kratos.Array1DVariable3, arg2: Kratos.DataCommunicator) -> bool: ...
def SetSolutionStepVariablesList(destination_model_part: Kratos.ModelPart, origin_model_part: Kratos.ModelPart) -> None: ...
