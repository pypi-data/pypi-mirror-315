import Kratos
import Kratos.Expression
import KratosOptimizationApplication
from typing import overload

def Abs(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
def Collapse(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
@overload
def ComputeNodalVariableProductWithEntityMatrix(output_nodal_container_expression: Kratos.Expression.NodalExpression, input_nodal_values_container_expression: Kratos.Expression.NodalExpression, matrix_variable: Kratos.MatrixVariable, entities: Kratos.ConditionsArray) -> None: ...
@overload
def ComputeNodalVariableProductWithEntityMatrix(output_nodal_container_expression: Kratos.Expression.NodalExpression, input_nodal_values_container_expression: Kratos.Expression.NodalExpression, matrix_variable: Kratos.MatrixVariable, entities: Kratos.ElementsArray) -> None: ...
def ComputeNumberOfNeighbourConditions(output_nodal_container_expression: Kratos.Expression.NodalExpression) -> None: ...
def ComputeNumberOfNeighbourElements(output_nodal_container_expression: Kratos.Expression.NodalExpression) -> None: ...
def EntityMax(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
@overload
def EntityMaxNormL2(container_expression: Kratos.Expression.NodalExpression) -> float: ...
@overload
def EntityMaxNormL2(container_expression: Kratos.Expression.ConditionExpression) -> float: ...
@overload
def EntityMaxNormL2(container_expression: Kratos.Expression.ElementExpression) -> float: ...
def EntityMin(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
def EntitySum(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
@overload
def ExtractData(input_nodal_expression: Kratos.Expression.NodalExpression, model_part_domain_to_extract: Kratos.ModelPart) -> Kratos.Expression.NodalExpression: ...
@overload
def ExtractData(input_condition_expression: Kratos.Expression.ConditionExpression, model_part_domain_to_extract: Kratos.ModelPart) -> Kratos.Expression.ConditionExpression: ...
@overload
def ExtractData(input_element_expression: Kratos.Expression.ElementExpression, model_part_domain_to_extract: Kratos.ModelPart) -> Kratos.Expression.ElementExpression: ...
def InnerProduct(collective_expressions_1: KratosOptimizationApplication.CollectiveExpression, collective_expressions_2: KratosOptimizationApplication.CollectiveExpression) -> float: ...
@overload
def MapContainerVariableToNodalVariable(output_nodal_container_expression: Kratos.Expression.NodalExpression, input_container_expression_to_map: Kratos.Expression.ConditionExpression, neighbour_container_for_nodes: Kratos.Expression.NodalExpression) -> None: ...
@overload
def MapContainerVariableToNodalVariable(output_nodal_container_expression: Kratos.Expression.NodalExpression, input_container_expression_to_map: Kratos.Expression.ElementExpression, neighbour_container_for_nodes: Kratos.Expression.NodalExpression) -> None: ...
@overload
def MapNodalVariableToContainerVariable(output_container_expression: Kratos.Expression.ConditionExpression, input_nodal_container_expression_to_map: Kratos.Expression.NodalExpression) -> None: ...
@overload
def MapNodalVariableToContainerVariable(output_container_expression: Kratos.Expression.ElementExpression, input_nodal_container_expression_to_map: Kratos.Expression.NodalExpression) -> None: ...
def NormInf(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> float: ...
def NormL2(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> float: ...
@overload
def Pow(collective_expression: KratosOptimizationApplication.CollectiveExpression, power_coeff: float) -> KratosOptimizationApplication.CollectiveExpression: ...
@overload
def Pow(collective_expression: KratosOptimizationApplication.CollectiveExpression, power_coeff_collective_expression: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
@overload
def ProductWithEntityMatrix(output_container_expression: Kratos.Expression.NodalExpression, matrix_with_entity_size: Kratos.Matrix, input_container_expression_for_multiplication: Kratos.Expression.NodalExpression) -> None: ...
@overload
def ProductWithEntityMatrix(output_container_expression: Kratos.Expression.ConditionExpression, matrix_with_entity_size: Kratos.Matrix, input_container_expression_for_multiplication: Kratos.Expression.ConditionExpression) -> None: ...
@overload
def ProductWithEntityMatrix(output_container_expression: Kratos.Expression.ElementExpression, matrix_with_entity_size: Kratos.Matrix, input_container_expression_for_multiplication: Kratos.Expression.ElementExpression) -> None: ...
@overload
def ProductWithEntityMatrix(output_container_expression: Kratos.Expression.NodalExpression, matrix_with_entity_size: Kratos.CompressedMatrix, input_container_expression_for_multiplication: Kratos.Expression.NodalExpression) -> None: ...
@overload
def ProductWithEntityMatrix(output_container_expression: Kratos.Expression.ConditionExpression, matrix_with_entity_size: Kratos.CompressedMatrix, input_container_expression_for_multiplication: Kratos.Expression.ConditionExpression) -> None: ...
@overload
def ProductWithEntityMatrix(output_container_expression: Kratos.Expression.ElementExpression, matrix_with_entity_size: Kratos.CompressedMatrix, input_container_expression_for_multiplication: Kratos.Expression.ElementExpression) -> None: ...
@overload
def Scale(collective_expression: KratosOptimizationApplication.CollectiveExpression, scaling_coeff: float) -> KratosOptimizationApplication.CollectiveExpression: ...
@overload
def Scale(collective_expression: KratosOptimizationApplication.CollectiveExpression, scaling_coeff_collective_expression: KratosOptimizationApplication.CollectiveExpression) -> KratosOptimizationApplication.CollectiveExpression: ...
def Sum(collective_expressions: KratosOptimizationApplication.CollectiveExpression) -> float: ...
@overload
def Transpose(output_matrix: Kratos.CompressedMatrix, input_matrix: Kratos.CompressedMatrix) -> None: ...
@overload
def Transpose(output_matrix: Kratos.Matrix, input_matrix: Kratos.Matrix) -> None: ...
