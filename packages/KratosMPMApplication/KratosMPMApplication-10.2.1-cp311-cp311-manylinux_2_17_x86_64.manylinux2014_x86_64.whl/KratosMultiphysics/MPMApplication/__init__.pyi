import Kratos
from typing import overload

class DispNewtonianFluid3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class DispNewtonianFluidPlaneStrain2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class HenckyBorjaCamClayPlastic3DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyBorjaCamClayPlasticAxisym2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyBorjaCamClayPlasticPlaneStrain2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCPlastic3DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCPlasticAxisym2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCPlasticPlaneStrain2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCPlasticPlaneStrainUP2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCPlasticUP3DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCStrainSofteningPlastic3DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCStrainSofteningPlasticAxisym2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HenckyMCStrainSofteningPlasticPlaneStrain2DLaw(Kratos.ConstitutiveLaw):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1, arg2) -> None: ...

class HyperElasticNeoHookean3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class HyperElasticNeoHookeanAxisym2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class HyperElasticNeoHookeanPlaneStrain2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class HyperElasticNeoHookeanUP3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class HyperElasticPlaneStrainUP2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class JohnsonCookThermalPlastic2DAxisymLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class JohnsonCookThermalPlastic2DPlaneStrainLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class JohnsonCookThermalPlastic3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class KratosMPMApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class LinearElasticIsotropic3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class LinearElasticIsotropicAxisym2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class LinearElasticIsotropicPlaneStrain2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class LinearElasticIsotropicPlaneStress2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class MPMExplicitScheme(Kratos.Scheme):
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    def Initialize(self, arg0: Kratos.ModelPart) -> None: ...

class MPMExplicitStrategy(Kratos.ImplicitSolvingStrategy):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Scheme, arg2: bool, arg3: bool, arg4: bool) -> None: ...

class MPMResidualBasedBossakScheme(Kratos.Scheme):
    def __init__(self, arg0: Kratos.ModelPart, arg1: int, arg2: int, arg3: float, arg4: float, arg5: bool) -> None: ...
    def Initialize(self, arg0: Kratos.ModelPart) -> None: ...

class MPMResidualBasedNewtonRaphsonStrategy(Kratos.ImplicitSolvingStrategy):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Scheme, arg2: Kratos.LinearSolver, arg3: Kratos.ConvergenceCriteria, arg4: int, arg5: bool, arg6: bool, arg7: bool) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Scheme, arg2: Kratos.ConvergenceCriteria, arg3: Kratos.BuilderAndSolver, arg4: int, arg5: bool, arg6: bool, arg7: bool) -> None: ...

class MPMVtkOutput(Kratos.IO):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
    @staticmethod
    def GetDefaultParameters() -> Kratos.Parameters: ...
    def PrintOutput(self, output_filename: str = ...) -> None: ...

class MPM_MPI_Utilities:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def TransferConditions(arg0: Kratos.ModelPart, arg1: list[Kratos.ConditionsArray]) -> None: ...
    @staticmethod
    def TransferElements(arg0: Kratos.ModelPart, arg1: list[Kratos.ElementsArray]) -> None: ...

class MaterialPointEraseProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...

def GenerateMaterialPointCondition(arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.ModelPart) -> None: ...
def GenerateMaterialPointElement(arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.ModelPart, arg3: bool) -> None: ...
def SearchElement(arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: int, arg3: float) -> None: ...
