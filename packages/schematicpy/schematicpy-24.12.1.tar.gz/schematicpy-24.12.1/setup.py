# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['schematic',
 'schematic.configuration',
 'schematic.manifest',
 'schematic.models',
 'schematic.schemas',
 'schematic.store',
 'schematic.store.database',
 'schematic.utils',
 'schematic.visualization',
 'schematic_api',
 'schematic_api.api']

package_data = \
{'': ['*'],
 'schematic': ['etc/*', 'etc/data_models/*', 'etc/validation_schemas/*'],
 'schematic_api.api': ['openapi/*']}

install_requires = \
['Flask-Cors>=3.0.10,<4.0.0',
 'Flask==2.1.3',
 'PyJWT>=2.9.0,<3.0.0',
 'PyYAML>=6.0.0,<7.0.0',
 'asyncio>=3.4.3,<4.0.0',
 'click-log>=0.4.0,<0.5.0',
 'click>=8.0.0,<9.0.0',
 'connexion[swagger-ui]>=2.8.0,<3.0.0',
 'dataclasses-json>=0.6.1,<0.7.0',
 'dateparser>=1.1.4,<2.0.0',
 'google-api-python-client>=2.0.0,<3.0.0',
 'google-auth-httplib2>=0.1.0,<0.2.0',
 'google-auth-oauthlib>=0.8.0,<0.9.0',
 'graphviz>=0.20.0,<0.21.0',
 'great-expectations>=0.15.0,<0.16.0',
 'inflection>=0.5.1,<0.6.0',
 'itsdangerous>=2.0.0,<3.0.0',
 'jsonschema>=4.0.0,<5.0.0',
 'networkx>=2.2.8',
 'numpy>=1.26.4,<2.0.0',
 'oauth2client>=4.1.0,<5.0.0',
 'openpyxl>=3.0.9,<4.0.0',
 'opentelemetry-instrumentation-flask>=0.48b0',
 'pandarallel>=1.6.4,<2.0.0',
 'pandas>=2.2.2,<3.0.0',
 'pydantic>=1.10.4,<2.0.0',
 'pygsheets>=2.0.4,<3.0.0',
 'rdflib>=6.0.0,<7.0.0',
 'requests-oauth2client>=1.6.0',
 'setuptools>=66.0.0,<67.0.0',
 'synapseclient==4.6.0',
 'tenacity>=8.0.1,<9.0.0',
 'toml>=0.10.2,<0.11.0']

extras_require = \
{':python_version < "3.9"': ['backports.zoneinfo>=0.2.1,<0.3.0'],
 'api': ['pyopenssl>=23.0.0,<24.0.0',
         'Jinja2>2.11.3',
         'opentelemetry-api>=1.21.0',
         'opentelemetry-sdk>=1.21.0',
         'opentelemetry-exporter-otlp-proto-http>=1.0.0,<2.0.0'],
 'aws': ['uWSGI>=2.0.21,<3.0.0']}

entry_points = \
{'console_scripts': ['schematic = schematic.__main__:main']}

setup_kwargs = {
    'name': 'schematicpy',
    'version': '24.12.1',
    'description': 'Package for biomedical data model and metadata ingress management',
    'long_description': '# Schematic\n[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2FSage-Bionetworks%2Fschematic%2Fbadge%3Fref%3Ddevelop&style=flat)](https://actions-badge.atrox.dev/Sage-Bionetworks/schematic/goto?ref=develop) [![Documentation Status](https://readthedocs.org/projects/sage-schematic/badge/?version=develop)](https://sage-schematic.readthedocs.io/en/develop/?badge=develop) [![PyPI version](https://badge.fury.io/py/schematicpy.svg)](https://badge.fury.io/py/schematicpy)\n\n# TL;DR\n\n* `schematic` (Schema Engine for Manifest Ingress and Curation) is a python-based software tool that streamlines the retrieval, validation, and submission of metadata for biomedical datasets hosted on Sage Bionetworks\' Synapse platform.\n* Users can work with `schematic` in several ways, including through the CLI (see [Command Line Usage](#command-line-usage) for examples), through Docker (see [Docker Usage](#docker-usage) for examples), or with python.\n* `schematic` needs to communicate with Synapse and Google Sheets in order for its processes to work. As such, users will need to set up their credentials for authentication with Synapse and the Google Sheets API.\n* To get started with `schematic`, follow one of the Installation Guides depending on your use case:\n   * [Installation Guide For: Schematic CLI users](#installation-guide-for-users)\n   * [Installation Guide For: Contributors](#installation-guide-for-contributors)\n\n# Table of Contents\n- [Schematic](#schematic)\n- [TL;DR](#tldr)\n- [Table of Contents](#table-of-contents)\n- [Introduction](#introduction)\n- [Installation](#installation)\n  - [Installation Requirements](#installation-requirements)\n  - [Installation Guide For: Users](#installation-guide-for-users)\n    - [1. Verify your python version](#1-verify-your-python-version)\n    - [2. Set up your virtual environment](#2-set-up-your-virtual-environment)\n      - [2a. Set up your virtual environment with `venv`](#2a-set-up-your-virtual-environment-with-venv)\n      - [2b. Set up your virtual environment with `conda`](#2b-set-up-your-virtual-environment-with-conda)\n    - [3. Install `schematic` dependencies](#3-install-schematic-dependencies)\n    - [4. Get your data model as a `JSON-LD` schema file](#4-get-your-data-model-as-a-json-ld-schema-file)\n    - [5. Obtain Google credential files](#5-obtain-google-credential-files)\n    - [6. Set up configuration files](#6-set-up-configuration-files)\n    - [7. Verify your setup](#7-verify-your-setup)\n  - [Installation Guide For: Contributors](#installation-guide-for-contributors)\n    - [1. Clone the `schematic` package repository](#1-clone-the-schematic-package-repository)\n    - [2. Install `poetry`](#2-install-poetry)\n    - [3. Start the virtual environment](#3-start-the-virtual-environment)\n    - [4. Install `schematic` dependencies](#4-install-schematic-dependencies)\n    - [5. Set up configuration files](#5-set-up-configuration-files)\n    - [6. Obtain Google credential files](#6-obtain-google-credential-files-1)\n    - [7. Set up pre-commit hooks](#7-set-up-pre-commit-hooks)\n    - [8. Verify your setup](#8-verify-your-setup)\n- [Command Line Usage](#command-line-usage)\n- [Docker Usage](#docker-usage)\n    - [Running the REST API](#running-the-rest-api)\n      - [Example 1: Using the `config.yml` path](#example-1-using-the-configyml-path)\n      - [Example 2: Use environment variables](#example-2-use-environment-variables)\n    - [Running `schematic` to Validate Manifests](#running-schematic-to-validate-manifests)\n      - [Example for macOS/Linux](#example-for-macoslinux)\n      - [Example for Windows](#example-for-windows)\n- [Exporting OpenTelemetry data from schematic](#exporting-opentelemetry-data-from-schematic)\n  - [Exporting OpenTelemetry data for SageBionetworks employees](#exporting-opentelemetry-data-for-sagebionetworks-employees)\n    - [Exporting data locally](#exporting-data-locally)\n- [Contributors](#contributors)\n\n\n# Introduction\nSCHEMATIC is an acronym for _Schema Engine for Manifest Ingress and Curation_. The Python based infrastructure provides a _novel_ schema-based, metadata ingress ecosystem, that is meant to streamline the process of biomedical dataset annotation, metadata validation and submission to a data repository for various data contributors.\n\n# Installation\n## Installation Requirements\n* Your installed python version must be 3.9.0 â‰¤ version < 3.11.0\n* You need to be a registered and certified user on [`synapse.org`](https://www.synapse.org/)\n\n> [!NOTE]  \n> To create Google Sheets files from Schematic, please follow our credential policy for Google credentials. You can find a detailed tutorial [here](https://scribehow.com/shared/Get_Credentials_for_Google_Drive_and_Google_Sheets_APIs_to_use_with_schematicpy__yqfcJz_rQVeyTcg0KQCINA).\n> If you\'re using config.yml, make sure to specify the path to `schematic_service_account_creds.json` (see the `google_sheets > service_account_creds` section for more information).\n\n## Installation Guide For: Users\n\nThe instructions below assume you have already installed [python](https://www.python.org/downloads/), with the release version meeting the constraints set in the [Installation Requirements](#installation-requirements) section, and do not have a Python environment already active.\n\n### 1. Verify your python version\n\nEnsure your python version meets the requirements from the [Installation Requirements](#installation-requirements) section using the following command:\n```\npython3 --version\n```\nIf your current Python version is not supported by Schematic, you can switch to the supported version using a tool like [pyenv](https://github.com/pyenv/pyenv?tab=readme-ov-file#switch-between-python-versions). Follow the instructions in the pyenv documentation to install and switch between Python versions easily.\n\n> [!NOTE]\n> You can double-check the current supported python version by opening up the [pyproject.toml](https://github.com/Sage-Bionetworks/schematic/blob/main/pyproject.toml#L39) file in this repository and find the supported versions of python in the script.\n\n### 2. Set up your virtual environment\n\nOnce you are working with a python version supported by `schematic`, you will need to activate a virtual environment within which you can install the package. Below we will show how to create your virtual environment either with `venv` or with `conda`.\n\n#### 2a. Set up your virtual environment with `venv`\n\nPython 3 has built-in support for virtual environments with the `venv` module, so you no longer need to install `virtualenv`:\n\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n#### 2b. Set up your virtual environment with `conda`\n\n`conda` is a powerful package and environment management tool that allows users to create isolated environments used particularly in data science and machine learning workflows. If you would like to manage your environments with `conda`, continue reading:\n\n1. **Download your preferred `conda` installer**: Begin by [installing `conda`](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html). We personally recommend working with `Miniconda` which is a lightweight installer for `conda` that includes only `conda` and its dependencies.\n\n2. **Execute the `conda` installer**: Once you have downloaded your preferred installer, execute it using `bash` or `zsh`, depending on the shell configured for your terminal environment. For example:\n\n   ```\n   bash Miniconda3-latest-MacOSX-arm64.sh\n   ```\n\n3. **Verify your `conda` setup**: Follow the prompts to complete your setup. Then verify your setup by running the `conda` command.\n   \n4. **Create your `schematic` environment**: Begin by creating a fresh `conda` environment for `schematic` like so:\n\n   ```\n   conda create --name \'schematicpy\' python=3.10\n   ```\n\n5. **Activate the environment**: Once your environment is set up, you can now activate your new environment with `conda`:\n\n   ```\n   conda activate schematicpy\n   ```\n\n### 3. Install `schematic` dependencies\n\nInstall the package using [pip](https://pip.pypa.io/en/stable/quickstart/):\n\n```\npython3 -m pip install schematicpy\n```\n\nIf you run into `ERROR: Failed building wheel for numpy`, the error might be able to resolve by upgrading pip. Please try to upgrade pip by:\n\n```\npip3 install --upgrade pip\n```\n\n### 4. Get your data model as a `JSON-LD` schema file\n\nNow you need a schema file, e.g. `model.jsonld`, to have a data model that schematic can work with. While you can download a super basic example data model [here](https://raw.githubusercontent.com/Sage-Bionetworks/schematic/refs/heads/develop/tests/data/example.model.jsonld), youâ€™ll probably be working with a DCC-specific data model. For non-Sage employees/contributors using the CLI, you might care only about the minimum needed artifact, which is the  `.jsonld`; locate and download only that from the right repo.\n\nHere are some example repos with schema files:\n* https://github.com/ncihtan/data-models/\n* https://github.com/nf-osi/nf-metadata-dictionary/\n\n### 5. Obtain Google credential files\n\nAny function that interacts with a google sheet (such as `schematic manifest get`) requires google cloud credentials.\n\n1. **Option 1**: [Here](https://scribehow.com/shared/Get_Credentials_for_Google_Drive_and_Google_Sheets_APIs_to_use_with_schematicpy__yqfcJz_rQVeyTcg0KQCINA?referrer=workspace)â€™s a step-by-step guide on how to create these credentials in Google Cloud.\n   * Depending on your institution\'s policies, your institutional Google account may or may not have the required permissions to complete this. A possible workaround is to use a personal or temporary Google account.\n\n> [!WARNING]\n> At the time of writing, Sage Bionetworks employees do not have the appropriate permissions to create projects with their Sage Bionetworks Google accounts. You would follow instructions using a personal Google account. \n\n2. **Option 2**: Ask your DCC/development team if they have credentials previously set up with a service account.\n\nOnce you have obtained credentials, be sure that the json file generated is named in the same way as the `service_acct_creds` parameter in your `config.yml` file. You will find more context on the `config.yml` in section [6. Set up configuration files](#6-set-up-configuration-files).\n\n> [!NOTE]\n> Running `schematic init` is no longer supported due to security concerns. To obtain  `schematic_service_account_creds.json`, please follow the instructions [here](https://scribehow.com/shared/Enable_Google_Drive_and_Google_Sheets_APIs_for_project__yqfcJz_rQVeyTcg0KQCINA). \nschematic uses Googleâ€™s API to generate google sheet templates that users fill in to provide (meta)data.\nMost Google sheet functionality could be authenticated with service account. However, more complex Google sheet functionality\nrequires token-based authentication. As browser support that requires the token-based authentication diminishes, we are hoping to deprecate\ntoken-based authentication and keep only service account authentication in the future. \n\n> [!NOTE]\n> Use the ``schematic_service_account_creds.json`` file for the service\n> account mode of authentication (*for Google services/APIs*). Service accounts\n> are special Google accounts that can be used by applications to access Google APIs\n> programmatically via OAuth2.0, with the advantage being that they do not require\n> human authorization. \n\n### 6. Set up configuration files\n\nThe following section will walk through setting up your configuration files with your credentials to allow for communication between `schematic` and the Synapse API.\n\nThere are two main configuration files that need to be created + modified:\n- `.synapseConfig`\n- `config.yml`\n\n**Create and modify the `.synapseConfig`**\n\nThe `.synapseConfig` file is what enables communication between `schematic` and the Synapse API using your credentials.\nYou can automatically generate a `.synapseConfig` file by running the following in your command line and following the prompts.\n\n>[!TIP]\n>You can generate a new authentication token on the Synapse website by going to `Account Settings` > `Personal Access Tokens`.\n\n```\nsynapse config\n```\n\nAfter following the prompts, a new `.synapseConfig` file and `.synapseCache` folder will be created in your home directory. You can view these hidden\nassets in your home directory with the following command:\n\n```\nls -a ~\n```\n\nThe `.synapseConfig` is used to log into Synapse if you are not using an environment variable (i.e. `SYNAPSE_ACCESS_TOKEN`) for authentication, and the `.synapseCache` is where your assets are stored if you are not working with the CLI and/or you have specified `.synapseCache` as the location in which to store your manfiests, in your `config.yml` (more on the `config.yml` below).\n\n**Create and modify the `config.yml`**\n\nIn this repository there is a `config_example.yml` file with default configurations to various components that are required before running `schematic`,\nsuch as the Synapse ID of the main file view containing all your project assets, the base name of your manifest files, etc.\n\nDownload the `config_example.yml` as a new file called `config.yml` and modify its contents according to your use case.\n\nFor example, one of the components in this `config.yml` that will likely be modified is the location of your schema. After acquiring your schema file using the\ninstructions in step [4. Get your data model as a `JSON-LD` schema file](#4-get-your-data-model-as-a-json-ld-schema-file), your `config.yml` should contain something like:\n\n```text\nmodel:\n  location: "path/to/your/model.jsonld"\n```\n\n> [!IMPORTANT]\n> Please note that for the example above, your local working directory would typically have `model.jsonld` and `config.yml` side-by-side. The path to your data model should match what is in `config.yml`.\n\n> [!IMPORTANT]\n> Be sure to update your `config.yml` with the location of your `.synapseConfig` created in the step above, to avoid authentication errors. Paths can be specified relative to the `config.yml` file or as absolute paths.\n\n> [!NOTE]\n> `config.yml` is ignored by git.\n\n### 7. Verify your setup\nAfter running the steps above, your setup is complete, and you can test it on a `python` instance or by running a command based on the examples in the [Command Line Usage](#command-line-usage) section.\n\n## Installation Guide For: Contributors\n\nThe instructions below assume you have already installed [python](https://www.python.org/downloads/), with the release version meeting the constraints set in the [Installation Requirements](#installation-requirements) section, and do not have an environment already active (e.g. with `pyenv`). For development, we recommend working with versions > python 3.9 to avoid issues with `pre-commit`\'s default hook configuration.\n\nWhen contributing to this repository, please first discuss the change you wish to make via the [service desk](https://sagebionetworks.jira.com/servicedesk/customer/portal/5/group/8) so that we may track these changes.\n\nOnce you have finished setting up your development environment using the instructions below, please follow the guidelines in [CONTRIBUTION.md](https://github.com/Sage-Bionetworks/schematic/blob/develop-fds-2218-update-readme/CONTRIBUTION.md) during your development.\n\nPlease note we have a [code of conduct](CODE_OF_CONDUCT.md), please follow it in all your interactions with the project.\n\n### 1. Clone the `schematic` package repository\n\nFor development, you will be working with the latest version of `schematic` on the repository to ensure compatibility between its latest state and your changes. Ensure your current working directory is where\nyou would like to store your local fork before running the following command:\n\n```\ngit clone https://github.com/Sage-Bionetworks/schematic.git\n```\n\n### 2. Install `poetry` \n\nInstall `poetry` (version 1.3.0 or later) using either the [official installer](https://python-poetry.org/docs/#installing-with-the-official-installer) or `pip`. If you have an older installation of Poetry, we recommend uninstalling it first.\n\n```\npip install poetry\n```\n\nCheck to make sure your version of poetry is > v1.3.0\n\n```\npoetry --version\n```\n\n### 3. Start the virtual environment\n\n`cd` into your cloned `schematic` repository, and initialize the virtual environment using the following command with `poetry`:\n\n```\npoetry shell\n```\n\nTo make sure your poetry version and python version are consistent with the versions you expect, you can run the following command:\n\n```\npoetry debug info\n```\n\n### 4. Install `schematic` dependencies\n\nBefore you begin, make sure you are in the latest `develop` of the repository.\n\nThe following command will install the dependencies based on what we specify in the `poetry.lock` file of this repository (which is generated from the libraries listed in the `pyproject.toml` file). If this step is taking a long time, try to go back to Step 2 and check your version of `poetry`. Alternatively, you can try deleting the lock file and regenerate it by doing `poetry lock` (Please note this method should be used as a last resort because this would force other developers to change their development environment).\n\n```\npoetry install --with dev,doc\n```\n\nThis command will install:\n* The main dependencies required for running the package.\n* Development dependencies for testing, linting, and code formatting.\n* Documentation dependencies such as `sphinx` for building and maintaining documentation.\n\n### 5. Set up configuration files\n\nThe following section will walk through setting up your configuration files with your credentials to allow for communication between `schematic` and the Synapse API.\n\nThere are two main configuration files that need to be created + modified:\n- `.synapseConfig`\n- `config.yml`\n\n**Create and modify the `.synapseConfig`**\n\nThe `.synapseConfig` file is what enables communication between `schematic` and the Synapse API using your credentials.\nYou can automatically generate a `.synapseConfig` file by running the following in your command line and following the prompts.\n\n>[!TIP]\n>You can generate a new authentication token on the Synapse website by going to `Account Settings` > `Personal Access Tokens`.\n\n```\nsynapse config\n```\n\nAfter following the prompts, a new `.synapseConfig` file and `.synapseCache` folder will be created in your home directory. You can view these hidden\nassets in your home directory with the following command:\n\n```\nls -a ~\n```\n\nThe `.synapseConfig` is used to log into Synapse if you are not using an environment variable (i.e. `SYNAPSE_ACCESS_TOKEN`) for authentication, and the `.synapseCache` is where your assets are stored if you are not working with the CLI and/or you have specified `.synapseCache` as the location in which to store your manfiests, in your `config.yml` (more on the `config.yml` below).\n\n> [!IMPORTANT]\n> When developing on `schematic`, keep your `.synapseConfig` in your current working directory to avoid authentication errors.\n\n**Create and modify the `config.yml`**\n\nIn this repository there is a `config_example.yml` file with default configurations to various components that are required before running `schematic`,\nsuch as the Synapse ID of the main file view containing all your project assets, the base name of your manifest files, etc.\n\nCopy the contents of the `config_example.yml` (located in the base directory of the cloned `schematic` repo) into a new file called `config.yml`\n\n```\ncp config_example.yml config.yml\n```\n\nOnce you\'ve copied the file, modify its contents according to your use case. For example, if you wanted to change the folder where manifests are downloaded your config should look like:\n\n```text\nmanifest:\n  manifest_folder: "my_manifest_folder_path"\n```\n\n> [!IMPORTANT]\n> Be sure to update your `config.yml` with the location of your `.synapseConfig` created in the step above, to avoid authentication errors. Paths can be specified relative to the `config.yml` file or as absolute paths.\n\n> [!NOTE]\n> `config.yml` is ignored by git.\n\n### 6. Obtain Google credential files\n\nAny function that interacts with a google sheet (such as `schematic manifest get`) requires google cloud credentials.\n\n1. **Option 1**: [Here](https://scribehow.com/shared/Get_Credentials_for_Google_Drive_and_Google_Sheets_APIs_to_use_with_schematicpy__yqfcJz_rQVeyTcg0KQCINA?referrer=workspace)â€™s a step-by-step guide on how to create these credentials in Google Cloud.\n   * Depending on your institution\'s policies, your institutional Google account may or may not have the required permissions to complete this. A possible workaround is to use a personal or temporary Google account.\n\n> [!WARNING]\n> At the time of writing, Sage Bionetworks employees do not have the appropriate permissions to create projects with their Sage Bionetworks Google accounts. You would follow instructions using a personal Google account. \n\n2. **Option 2**: Ask your DCC/development team if they have credentials previously set up with a service account.\n\nOnce you have obtained credentials, be sure that the json file generated is named in the same way as the `service_acct_creds` parameter in your `config.yml` file.\n\n> [!IMPORTANT]\n> For testing, make sure there is no environment variable `SCHEMATIC_SERVICE_ACCOUNT_CREDS`. Check the file `.env` to ensure this is not set. Also, check that config files used for testing, such as `config_example.yml` do not contain service_acct_creds_synapse_id.\n\n> [!NOTE]\n> Running `schematic init` is no longer supported due to security concerns. To obtain  `schematic_service_account_creds.json`, please follow the instructions [here](https://scribehow.com/shared/Enable_Google_Drive_and_Google_Sheets_APIs_for_project__yqfcJz_rQVeyTcg0KQCINA). \nschematic uses Googleâ€™s API to generate google sheet templates that users fill in to provide (meta)data.\nMost Google sheet functionality could be authenticated with service account. However, more complex Google sheet functionality\nrequires token-based authentication. As browser support that requires the token-based authentication diminishes, we are hoping to deprecate\ntoken-based authentication and keep only service account authentication in the future. \n\n> [!NOTE]\n> Use the ``schematic_service_account_creds.json`` file for the service\n> account mode of authentication (*for Google services/APIs*). Service accounts\n> are special Google accounts that can be used by applications to access Google APIs\n> programmatically via OAuth2.0, with the advantage being that they do not require\n> human authorization. \n\n### 7. Set up pre-commit hooks\n\nThis repository is configured to utilize pre-commit hooks as part of the development process. To enable these hooks, please run the following command and look for the following success message:\n```\n$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n```\n\nYou can run `pre-commit` manually across the entire repository like so:\n\n```\npre-commit run --all-files\n```\n\nAfter running this step, your setup is complete, and you can test it on a python instance or by running a command based on the examples in the [Command Line Usage](#command-line-usage) section.\n\n### 8. Verify your setup\nAfter running the steps above, your setup is complete, and you can test it on a `python` instance or by running a command based on the examples in the [Command Line Usage](#command-line-usage) section.\n\n# Command Line Usage\n1. Generate a new manifest as a google sheet\n\n```\nschematic manifest -c /path/to/config.yml get -dt <your data type> -s\n```\n\n2. Grab an existing manifest from synapse \n\n```\nschematic manifest -c /path/to/config.yml get -dt <your data type> -d <your synapse dataset folder id> -s\n```\n\n3. Validate a manifest\n\n```\nschematic model -c /path/to/config.yml validate -dt <your data type> -mp <your csv manifest path>\n```\n\n4. Submit a manifest as a file\n\n```\nschematic model -c /path/to/config.yml submit -mp <your csv manifest path> -d <your synapse dataset folder id> -vc <your data type> -mrt file_only\n```\n\nPlease visit more documentation [here](https://sage-schematic.readthedocs.io/en/stable/cli_reference.html#) for more information. \n\n# Docker Usage\n\nHere we will demonstrate how to run `schematic` with Docker, with different use-cases for running API endpoints, validating the manifests, and\nusing how to use `schematic` based on your OS (macOS/Linux).\n\n### Running the REST API\n\nUse the Docker image to run `schematic`s REST API. You can either use the file path for the `config.yml` created using the installation instructions,\nor set up authentication with environment variables.\n\n#### Example 1: Using the `config.yml` path \n```\ndocker run --rm -p 3001:3001 \\\n  -v $(pwd):/schematic -w /schematic --name schematic \\\n  -e SCHEMATIC_CONFIG=/schematic/config.yml \\\n  -e GE_HOME=/usr/src/app/great_expectations/ \\\n  sagebionetworks/schematic \\\n  python /usr/src/app/run_api.py\n``` \n\n#### Example 2: Use environment variables\n1. save content of `config.yml` as to environment variable `SCHEMATIC_CONFIG_CONTENT` by doing: `export SCHEMATIC_CONFIG_CONTENT=$(cat /path/to/config.yml)`\n\n2. Similarly, save the content of `schematic_service_account_creds.json` as `SERVICE_ACCOUNT_CREDS` by doing: `export SERVICE_ACCOUNT_CREDS=$(cat /path/to/schematic_service_account_creds.json)`\n\n3. Pass `SCHEMATIC_CONFIG_CONTENT` and `schematic_service_account_creds` as environment variables by using `docker run`\n\n```\ndocker run --rm -p 3001:3001 \\\n  -v $(pwd):/schematic -w /schematic --name schematic \\\n  -e GE_HOME=/usr/src/app/great_expectations/ \\\n  -e SCHEMATIC_CONFIG_CONTENT=$SCHEMATIC_CONFIG_CONTENT \\\n  -e SERVICE_ACCOUNT_CREDS=$SERVICE_ACCOUNT_CREDS \\\n  sagebionetworks/schematic \\\n  python /usr/src/app/run_api.py\n``` \n### Running `schematic` to Validate Manifests\nYou can also use Docker to run `schematic` commands like validating manifests. Below are examples for different platforms.\n\n#### Example for macOS/Linux\n\n1. Clone the repository:\n```\ngit clone https://github.com/sage-bionetworks/schematic ~/schematic\n```\n2. Update the `.synapseConfig` with your credentials. See the installation instructions for how to do this.\n\n3. Run Docker:\n```\ndocker run \\\n  -v ~/schematic:/schematic \\\n  -w /schematic \\\n  -e SCHEMATIC_CONFIG=/schematic/config.yml \\\n  -e GE_HOME=/usr/src/app/great_expectations/ \\\n  sagebionetworks/schematic schematic model \\\n  -c /schematic/config.yml validate \\\n  -mp /schematic/tests/data/mock_manifests/Valid_Test_Manifest.csv \\\n  -dt MockComponent \\\n  -js /schematic/tests/data/example.model.jsonld\n``` \n\n#### Example for Windows\n\nRun the following command to validate manifests:\n```\ndocker run -v %cd%:/schematic \\\n  -w /schematic \\\n  -e GE_HOME=/usr/src/app/great_expectations/ \\\n  sagebionetworks/schematic \\\n  schematic model \\\n  -c config.yml validate -mp tests/data/mock_manifests/inValid_Test_Manifest.csv -dt MockComponent -js /schematic/data/example.model.jsonld\n```\n\n# Exporting OpenTelemetry data from schematic\nThis section is geared towards the SageBionetworks specific deployment of schematic as\nan API server running in the Sage specific AWS account.\n\n\nSchematic is setup to produce and export OpenTelemetry data while requests are flowing\nthrough the application code. This may be accomplished by setting a few environment\nvariables wherever the application is running. Those variables are:\n\n- `TRACING_EXPORT_FORMAT`: Determines in what format traces will be exported. Supported values: [`otlp`].\n- `LOGGING_EXPORT_FORMAT`: Determines in what format logs will be exported. Supported values: [`otlp`].\n- `TRACING_SERVICE_NAME`: The name of the service to attach for all exported traces.\n- `LOGGING_SERVICE_NAME`: The name of the service to attach for all exported logs.\n- `DEPLOYMENT_ENVIRONMENT`: The name of the environment to attach for all exported telemetry data.\n- `OTEL_EXPORTER_OTLP_ENDPOINT`: The endpoint to export telemetry data to.\n\nAuthentication (Oauth2 client credential exchange):\n\nUsed in cases where an intermediate opentelemetry collector is not, or can not be used.\nThis option is not preferred over using an intermediate opentelemetry collector, but is \nleft in the code to show how we may export telemetry data with an authorization header \nderied from an oauth2 client credential exchange flow.\n\n- `TELEMETRY_EXPORTER_CLIENT_ID`: The ID of the client to use when executing the OAuth2.0 "Client Credentials" flow.\n- `TELEMETRY_EXPORTER_CLIENT_SECRET`: The Secret of the client to use when executing the OAuth2.0 "Client Credentials" flow.\n- `TELEMETRY_EXPORTER_CLIENT_TOKEN_ENDPOINT`: The Token endpoint to use when executing the OAuth2.0 "Client Credentials" flow.\n- `TELEMETRY_EXPORTER_CLIENT_AUDIENCE`: The ID of the API server to use when executing the OAuth2.0 "Client Credentials" flow.\n\nAuthentication (Static Bearer token)\n\n- `OTEL_EXPORTER_OTLP_HEADERS`: Used for developers to set a static Bearer token to be used when exporting telemetry data.\n\nThe above configuration will work when the application is running locally, in a\ncontainer, running in AWS, or running via CLI. The important part is that the\nenvironment variables are set before the code executes, as the configuration is setup\nwhen the code runs.\n\n## Exporting OpenTelemetry data for SageBionetworks employees\nThe DPE (Data Processing & Engineering) team is responsible for maintaining and giving\nout the above sensitive information. Please reach out to the DPE team if a new ID/Secret\nis needed in order to export telemetry data in a new environment, or locally during\ndevelopment.\n\n### Exporting data locally\nIn order to conserve the number of monthly token requests that can be made the following\nprocess should be followed instead of setting the `TELEMETRY_EXPORTER_CLIENT_*`\nenvironment variables above.\n\n1) Request access to a unique client ID/Secret that identifies you from DPE.\n2) Retrieve a token that must be refreshed every 24 hours via cURL. The specific values will be given when the token is requested. Example:\n```\ncurl --request POST \\\n  --url https://TOKEN_URL.us.auth0.com/oauth/token \\\n  --header \'content-type: application/json\' \\\n  --data \'{"client_id":"...","client_secret":"...","audience":"...","grant_type":"client_credentials"}\'\n```\n3) Set an environment variable in your `.env` file like: `OTEL_EXPORTER_OTLP_HEADERS=Authorization=Bearer ey...`\n\nIf you fail to create a new access token after 24 hours you will see HTTP 403 JWT \nExpired messages when the application attempts to export telemetry data.\n\n# Contributors\n\nMain contributors and developers:\n\n- [Milen Nikolov](https://github.com/milen-sage)\n- [Mialy DeFelice](https://github.com/mialy-defelice)\n- [Sujay Patil](https://github.com/sujaypatil96)\n- [Bruno Grande](https://github.com/BrunoGrandePhD)\n- [Robert Allaway](https://github.com/allaway)\n- [Gianna Jordan](https://github.com/giajordan)\n- [Lingling Peng](https://github.com/linglp)\n',
    'author': 'Milen Nikolov',
    'author_email': 'milen.nikolov@sagebase.org',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/Sage-Bionetworks/schematic',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.9.0,<3.11',
}


setup(**setup_kwargs)
