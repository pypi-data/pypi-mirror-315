"use strict";(self.webpackChunk_jupyterlite_terminal=self.webpackChunk_jupyterlite_terminal||[]).push([[610],{610:(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});const n=new(s(262).Token)("@jupyterlite/terminal:ITerminals");var i=s(672),a=s(339),l=s(155);class r{constructor(e){this.options=e,this._shell=new a.Shell({mountpoint:"/drive",driveFsBaseUrl:e.baseUrl,wasmBaseUrl:e.baseUrl+"extensions/@jupyterlite/terminal/static/wasm/",outputCallback:this._outputCallback.bind(this)})}async _outputCallback(e){if(this._socket){const t=JSON.stringify(["stdout",e]);this._socket.send(t)}}get name(){return this.options.name}async wsConnect(e){console.log("==> Terminal.wsConnect",e),new l.Server(e).on("connection",(async e=>{console.log("==> server connection",this,e),this._socket=e,e.on("message",(async e=>{const t=JSON.parse(e),s=t[0],n=t.slice(1);if("stdin"===s)await this._shell.input(n[0]);else if("set_size"===s){const e=n[0],t=n[1];await this._shell.setSize(e,t)}})),e.on("close",(async()=>{console.log("==> socket close")})),e.on("error",(async()=>{console.log("==> socket error")}));const t=JSON.stringify(["setup"]);console.log("==> Returning handshake via socket",t),e.send(t),await this._shell.start()}))}}class o{constructor(e){this._terminals=new Map,this._wsUrl=e,console.log("==> Terminals.constructor",this._wsUrl)}async list(){const e=[...this._terminals.values()].map((e=>({name:e.name})));return console.log("==> Terminals.list",e),e}async startNew(){const e=this._nextAvailableName();console.log("==> Terminals.new",e);const t=i.PageConfig.getBaseUrl(),s=new r({name:e,baseUrl:t});this._terminals.set(e,s);const n=`${this._wsUrl}terminals/websocket/${e}`;return await s.wsConnect(n),{name:e}}_nextAvailableName(){for(let e=1;;++e){const t=`${e}`;if(!this._terminals.has(t))return t}}}const c=[{id:"@jupyterlite/terminal:plugin",description:"A terminal for JupyterLite",autoStart:!0,provides:n,activate:async e=>{console.log("JupyterLite extension @jupyterlite/terminal:plugin is activated!");const{serviceManager:t}=e,{serverSettings:s,terminals:n}=t;return console.log("terminals available:",n.isAvailable()),console.log("terminals ready:",n.isReady),console.log("terminals active:",n.isActive),await n.ready,console.log("terminals ready after await:",n.isReady),new o(s.wsUrl)}},{id:"@jupyterlite/terminal:routes-plugin",autoStart:!0,requires:[n],activate:(e,t)=>{console.log("JupyterLite extension @jupyterlite/terminal:routes-plugin is activated!",t),e.router.get("/api/terminals",(async e=>{const s=await t.list();return new Response(JSON.stringify(s))})),e.router.post("/api/terminals",(async e=>{const s=await t.startNew();return new Response(JSON.stringify(s))}))}}]}}]);