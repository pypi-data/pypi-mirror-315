import Kratos
import os
from typing import Callable, overload

class ApplyBoundaryHydrostaticPressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyBoundaryPhreaticLinePressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyBoundaryPhreaticSurfacePressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyCPhiReductionProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyComponentTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantBoundaryHydrostaticPressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantBoundaryPhreaticLinePressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantBoundaryPhreaticSurfacePressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantHydrostaticPressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantInterpolateLinePressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantPhreaticLinePressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantPhreaticMultiLinePressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyConstantPhreaticSurfacePressureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyExcavationProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyHydrostaticPressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyK0ProcedureProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyNormalLoadTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyPhreaticLinePressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyPhreaticMultiLinePressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyPhreaticSurfacePressureTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyScalarConstraintTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyVectorConstraintTableProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyWriteScalarProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class BackwardEulerQuasistaticPwScheme(Kratos.Scheme):
    def __init__(self) -> None: ...

class BackwardEulerQuasistaticUPwScheme(Kratos.Scheme):
    def __init__(self) -> None: ...

class BackwardEulerTScheme(Kratos.Scheme):
    def __init__(self) -> None: ...

class BilinearCohesive2DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class BilinearCohesive3DLaw(Kratos.ConstitutiveLaw):
    def __init__(self) -> None: ...

class CalculateIncrementalDisplacementProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class CustomWorkflowFactory:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def CreateKratosGeoSettlement(*args, **kwargs): ...

class DeactivateConditionsOnInactiveElements(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...

class FindNeighbourElementsOfConditionsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...

class GeneralizedNewmarkTScheme(Kratos.Scheme):
    def __init__(self, arg0: float) -> None: ...

class GeoExtrapolateIntegrationPointValuesToNodesProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class GeoMechanicsNewtonRaphsonErosionProcessStrategy(Kratos.ImplicitSolvingStrategy):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Scheme, arg2: Kratos.ConvergenceCriteria, arg3: Kratos.BuilderAndSolver, arg4: Kratos.Parameters, arg5: int, arg6: bool, arg7: bool, arg8: bool) -> None: ...

class GeoMechanicsNewtonRaphsonStrategy(Kratos.ImplicitSolvingStrategy):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Scheme, arg2: Kratos.ConvergenceCriteria, arg3: Kratos.BuilderAndSolver, arg4: Kratos.Parameters, arg5: int, arg6: bool, arg7: bool, arg8: bool) -> None: ...

class GeoMechanicsRammArcLengthStrategy(Kratos.ImplicitSolvingStrategy):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Scheme, arg2: Kratos.ConvergenceCriteria, arg3: Kratos.BuilderAndSolver, arg4: Kratos.Parameters, arg5: int, arg6: bool, arg7: bool, arg8: bool) -> None: ...
    def UpdateLoads(self) -> None: ...

class KratosGeoMechanicsApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class KratosGeoSettlement:
    def __init__(self, *args, **kwargs) -> None: ...
    def RunStage(self, arg0: os.PathLike, arg1: os.PathLike, arg2: Callable[[str], None], arg3: Callable[[float], None], arg4: Callable[[str], None], arg5: Callable[[], bool]) -> int: ...

class NewmarkDynamicUPwScheme(Kratos.Scheme):
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...

class NewmarkQuasistaticDampedUPwScheme(Kratos.Scheme):
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...

class NewmarkQuasistaticPwScheme(Kratos.Scheme):
    def __init__(self, arg0: float) -> None: ...

class NewmarkQuasistaticUPwScheme(Kratos.Scheme):
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...

class NodeUtilities:
    def __init__(self, *args, **kwargs) -> None: ...
    def AssignUpdatedVectorVariableToNonFixedComponentsOfNodes(self, arg0: Kratos.Array1DVariable3, arg1: Kratos.Array3, arg2: int) -> None: ...

class ResetDisplacementProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ResidualBasedBlockBuilderAndSolverWithMassAndDamping(Kratos.BuilderAndSolver):
    @overload
    def __init__(self, arg0: Kratos.LinearSolver) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.LinearSolver, arg1: Kratos.Parameters) -> None: ...

class SetAbsorbingBoundaryParametersProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class SetMultipleMovingLoadsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class SetParameterFieldProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...
