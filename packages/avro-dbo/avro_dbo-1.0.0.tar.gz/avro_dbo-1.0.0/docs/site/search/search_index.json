{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Avro DBO \ud83d\ude80 Avro DBO is a robust Python library designed for handling Apache Avro schemas. It facilitates seamless data serialization and schema management, making it ideal for data engineering pipelines and stream processing applications. \u2728 Features \ud83c\udfd7\ufe0f Schema-First Development : Generate Python classes from Avro schemas. \ud83d\udd04 Full Type Support : Supports all Avro logical types including arrays and enums. \ud83d\udee0\ufe0f Custom Serialization : Offers flexible serializers and deserializers. \ud83c\udf10 Schema Registry Integration : Integrates natively with Confluent Schema Registry. \ud83d\udd12 Type Safety : Ensures full static type checking. \u26a1 High Performance : Optimized for high-load production environments. \ud83d\ude80 Quick Start Install from PyPI bash pip install avro-dbo Example Schemas for Each Avro Logical Type Decimal Type ```python from attrs import field, define from decimal import Decimal @define @avro_schema class DecimalModel: amount: Decimal = field( default=Decimal(\"100.00\"), metadata={ \"logicalType\": \"decimal\", \"precision\": 10, \"scale\": 2 } ) ``` Timestamp (millis) Type ```python from attrs import field, define import datetime @define @avro_schema class TimestampModel: created_at: datetime.datetime = field( metadata={ \"logicalType\": \"timestamp-millis\" } ) ``` Enum Type ```python from attrs import field, define from enum import Enum class Status(Enum): ACTIVE = \"ACTIVE\" INACTIVE = \"INACTIVE\" @define @avro_schema class EnumModel: status: Status = field( default=Status.ACTIVE, metadata={ \"logicalType\": \"enum\", \"symbols\": list(Status) } ) ``` Array Type ```python from attrs import field, define from typing import List @define @avro_schema class ArrayModel: tags: List[str] = field( factory=list, metadata={ \"logicalType\": \"array\", \"items\": \"string\" } ) ``` Kitchen Sink Example ```python from attrs import field, define from decimal import Decimal from enum import Enum from typing import List import datetime class Status(Enum): ACTIVE = \"ACTIVE\" INACTIVE = \"INACTIVE\" @define @avro_schema class KitchenSinkModel: name: str = field(default=\"\") amount: Decimal = field( default=Decimal(\"999.99\"), metadata={ \"logicalType\": \"decimal\", \"precision\": 10, \"scale\": 2 } ) status: Status = field( default=Status.ACTIVE, metadata={ \"logicalType\": \"enum\", \"symbols\": list(Status) } ) created_at: datetime.datetime = field( metadata={ \"logicalType\": \"timestamp-millis\" } ) tags: List[str] = field( factory=list, metadata={ \"logicalType\": \"array\", \"items\": \"string\" } ) ``` Example Avro Schema Output You can use the export_schema() method to export the schema as a JSON object. print(KitchenSinkModel.export_schema()) The result will be a JSON object that can be used to define the schema in a Confluent Schema Registry. { \"type\": \"record\", \"name\": \"KitchenSinkModel\", \"fields\": [ {\"name\": \"name\", \"type\": \"string\", \"default\": \"\"}, {\"name\": \"amount\", \"type\": \"decimal\", \"precision\": 10, \"scale\": 2}, {\"name\": \"status\", \"type\": \"enum\", \"symbols\": [\"ACTIVE\", \"INACTIVE\"]}, {\"name\": \"created_at\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\"}, {\"name\": \"tags\", \"type\": \"array\", \"items\": \"string\"} ] } Saving an Avro Schema to a File You can use the export_schema() method to export the schema as a JSON object. KitchenSinkModel.export_schema(filename=\"kitchen_sink_model.json\") Coercing a Python Class Using Avro Schema Model Avro-DBO will coerce automnatically all fields in the schema to the correct type. Avro to datetime, date, decimal, enum, array, and more. Example with Decimal ```python from attrs import field, define from decimal import Decimal @define @avro_schema class DecimalModel: amount: Decimal = field( default=Decimal(\"100.00\"), metadata={ \"logicalType\": \"decimal\", \"precision\": 10, \"scale\": 2 } ) my_model = DecimalModel() print(my_model.amount) > Decimal(\"100.00\") extra precision is truncated to the scale my_model.amount = Decimal(\"100.00383889328932\") print(my_model.amount) # > Decimal(\"100.00\") ``` \ud83d\udcda Documentation For detailed usage instructions, type hints, and comprehensive examples, please refer to our documentation . \ud83e\udd1d Contributing We welcome contributions! To submit issues or propose changes, please visit our GitHub repository . See the CONTRIBUTING.md file for more information on how to contribute. \ud83d\udcdc License This project is licensed under the Apache 2.0 License - see the LICENSE file for details.","title":"Avro DBO \ud83d\ude80"},{"location":"#avro-dbo","text":"Avro DBO is a robust Python library designed for handling Apache Avro schemas. It facilitates seamless data serialization and schema management, making it ideal for data engineering pipelines and stream processing applications.","title":"Avro DBO \ud83d\ude80"},{"location":"#features","text":"\ud83c\udfd7\ufe0f Schema-First Development : Generate Python classes from Avro schemas. \ud83d\udd04 Full Type Support : Supports all Avro logical types including arrays and enums. \ud83d\udee0\ufe0f Custom Serialization : Offers flexible serializers and deserializers. \ud83c\udf10 Schema Registry Integration : Integrates natively with Confluent Schema Registry. \ud83d\udd12 Type Safety : Ensures full static type checking. \u26a1 High Performance : Optimized for high-load production environments.","title":"\u2728 Features"},{"location":"#quick-start","text":"Install from PyPI bash pip install avro-dbo","title":"\ud83d\ude80 Quick Start"},{"location":"#example-schemas-for-each-avro-logical-type","text":"Decimal Type ```python from attrs import field, define from decimal import Decimal @define @avro_schema class DecimalModel: amount: Decimal = field( default=Decimal(\"100.00\"), metadata={ \"logicalType\": \"decimal\", \"precision\": 10, \"scale\": 2 } ) ``` Timestamp (millis) Type ```python from attrs import field, define import datetime @define @avro_schema class TimestampModel: created_at: datetime.datetime = field( metadata={ \"logicalType\": \"timestamp-millis\" } ) ``` Enum Type ```python from attrs import field, define from enum import Enum class Status(Enum): ACTIVE = \"ACTIVE\" INACTIVE = \"INACTIVE\" @define @avro_schema class EnumModel: status: Status = field( default=Status.ACTIVE, metadata={ \"logicalType\": \"enum\", \"symbols\": list(Status) } ) ``` Array Type ```python from attrs import field, define from typing import List @define @avro_schema class ArrayModel: tags: List[str] = field( factory=list, metadata={ \"logicalType\": \"array\", \"items\": \"string\" } ) ``` Kitchen Sink Example ```python from attrs import field, define from decimal import Decimal from enum import Enum from typing import List import datetime class Status(Enum): ACTIVE = \"ACTIVE\" INACTIVE = \"INACTIVE\" @define @avro_schema class KitchenSinkModel: name: str = field(default=\"\") amount: Decimal = field( default=Decimal(\"999.99\"), metadata={ \"logicalType\": \"decimal\", \"precision\": 10, \"scale\": 2 } ) status: Status = field( default=Status.ACTIVE, metadata={ \"logicalType\": \"enum\", \"symbols\": list(Status) } ) created_at: datetime.datetime = field( metadata={ \"logicalType\": \"timestamp-millis\" } ) tags: List[str] = field( factory=list, metadata={ \"logicalType\": \"array\", \"items\": \"string\" } ) ```","title":"Example Schemas for Each Avro Logical Type"},{"location":"#example-avro-schema-output","text":"You can use the export_schema() method to export the schema as a JSON object. print(KitchenSinkModel.export_schema()) The result will be a JSON object that can be used to define the schema in a Confluent Schema Registry. { \"type\": \"record\", \"name\": \"KitchenSinkModel\", \"fields\": [ {\"name\": \"name\", \"type\": \"string\", \"default\": \"\"}, {\"name\": \"amount\", \"type\": \"decimal\", \"precision\": 10, \"scale\": 2}, {\"name\": \"status\", \"type\": \"enum\", \"symbols\": [\"ACTIVE\", \"INACTIVE\"]}, {\"name\": \"created_at\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\"}, {\"name\": \"tags\", \"type\": \"array\", \"items\": \"string\"} ] }","title":"Example Avro Schema Output"},{"location":"#saving-an-avro-schema-to-a-file","text":"You can use the export_schema() method to export the schema as a JSON object. KitchenSinkModel.export_schema(filename=\"kitchen_sink_model.json\")","title":"Saving an Avro Schema to a File"},{"location":"#coercing-a-python-class-using-avro-schema-model","text":"Avro-DBO will coerce automnatically all fields in the schema to the correct type. Avro to datetime, date, decimal, enum, array, and more.","title":"Coercing a Python Class Using Avro Schema Model"},{"location":"#example-with-decimal","text":"```python from attrs import field, define from decimal import Decimal @define @avro_schema class DecimalModel: amount: Decimal = field( default=Decimal(\"100.00\"), metadata={ \"logicalType\": \"decimal\", \"precision\": 10, \"scale\": 2 } ) my_model = DecimalModel() print(my_model.amount)","title":"Example with Decimal"},{"location":"#decimal10000","text":"","title":"&gt; Decimal(\"100.00\")"},{"location":"#extra-precision-is-truncated-to-the-scale","text":"my_model.amount = Decimal(\"100.00383889328932\") print(my_model.amount) # > Decimal(\"100.00\") ```","title":"extra precision is truncated to the scale"},{"location":"#documentation","text":"For detailed usage instructions, type hints, and comprehensive examples, please refer to our documentation .","title":"\ud83d\udcda Documentation"},{"location":"#contributing","text":"We welcome contributions! To submit issues or propose changes, please visit our GitHub repository . See the CONTRIBUTING.md file for more information on how to contribute.","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"This project is licensed under the Apache 2.0 License - see the LICENSE file for details.","title":"\ud83d\udcdc License"}]}