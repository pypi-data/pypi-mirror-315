Metadata-Version: 2.1
Name: kalatorch
Version: 0.0.0
Summary: A high-level PyTorch framework for easy implementation of AI models and neural networks.
Home-page: https://github.com/Kalasaikamesh944/KalaTorch.git
Author: N V R K SAI KAMESH YADAVALLI
Author-email: your_email@example.com
License: MIT
Keywords: pytorch ai machine-learning deep-learning neural-networks
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: torch>=1.8.0
Requires-Dist: torchvision>=0.9.0

# KalaTorch

**KalaTorch** is a high-level PyTorch framework designed to simplify the implementation of neural networks and AI models. It provides prebuilt utilities for creating models, managing datasets, and training workflows, making it easier to develop machine learning solutions.

---

## Features

- **Modular Design:** Easily extend and customize for various use cases.
- **Predefined Architectures:** Includes utilities to create convolutional, recurrent, and transformer models.
- **Dataset Management:** Simplifies dataset creation and DataLoader configuration.
- **Trainer Class:** High-level API for training and evaluation workflows.

---

## Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/Kalasaikamesh944/KalaTorch.git
   cd KalaTorch
   ```

2. Install the required dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Alternatively, install directly using pip (coming soon):
   ```bash
   pip install kalatorch
   ```

---

## Usage

### Example: Training a Model

```python
import torch
import torch.nn as nn
from KalaTorch.models import create_convnet
from KalaTorch.datasets import create_data_loader
from KalaTorch.training import KaloTrainer
import torch.optim as optim

# Define dataset
X = torch.randn(100, 1, 28, 28)  # 100 samples of 28x28 grayscale images
y = torch.randint(0, 10, (100,))  # Labels for 10 classes

# Create data loaders
train_loader = create_data_loader(X[:80], y[:80], batch_size=16)
val_loader = create_data_loader(X[80:], y[80:], batch_size=16)

# Create a convolutional model
model = create_convnet(input_channels=1, num_classes=10)

# Define optimizer and loss function
optimizer = optim.Adam(model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()

# Initialize the trainer
trainer = KaloTrainer(model, optimizer, criterion)

# Train the model
trainer.train(train_loader, epochs=5)

# Evaluate the model
trainer.evaluate(val_loader)
```

---

## Modules and APIs

### 1. **Models**

#### `create_convnet(input_channels, num_classes)`
- Builds a convolutional neural network.
- **Parameters:**
  - `input_channels` (int): Number of input channels (e.g., 1 for grayscale, 3 for RGB).
  - `num_classes` (int): Number of output classes.

#### `create_recurrent(input_size, hidden_size, num_layers, num_classes)`
- Builds a recurrent neural network.
- **Parameters:**
  - `input_size` (int): Dimensionality of the input features.
  - `hidden_size` (int): Number of hidden units per layer.
  - `num_layers` (int): Number of RNN layers.
  - `num_classes` (int): Number of output classes.

#### `create_transformer(input_dim, num_heads, num_layers, num_classes)`
- Builds a transformer-based model.
- **Parameters:**
  - `input_dim` (int): Dimensionality of input features.
  - `num_heads` (int): Number of attention heads.
  - `num_layers` (int): Number of encoder layers.
  - `num_classes` (int): Number of output classes.

---

### 2. **Datasets**

#### `create_data_loader(data, labels, batch_size=32, shuffle=True)`
- Creates a PyTorch DataLoader for the given dataset.
- **Parameters:**
  - `data` (torch.Tensor): Input features.
  - `labels` (torch.Tensor): Ground truth labels.
  - `batch_size` (int): Size of each batch (default: 32).
  - `shuffle` (bool): Whether to shuffle the data (default: True).

---

### 3. **Training**

#### `KaloTrainer`
- A class for managing training and evaluation workflows.

**Methods:**

- `train(train_loader, epochs=10)`
  - Trains the model for the specified number of epochs.
  - **Parameters:**
    - `train_loader`: DataLoader for training data.
    - `epochs` (int): Number of training epochs (default: 10).

- `evaluate(val_loader)`
  - Evaluates the model on the validation dataset.
  - **Parameters:**
    - `val_loader`: DataLoader for validation data.

---

## Project Structure

```
KalaTorch/
├── datasets/                 # Dataset utilities
│   ├── __init__.py
│   ├── dataloader.py
├── models/                   # Predefined models
│   ├── __init__.py
│   ├── convnet.py
│   ├── recurrent.py
│   ├── transformer.py
├── training/                 # Training utilities
│   ├── __init__.py
│   ├── trainer.py
├── utils/                    # Optional 
└── train.py                  # Example training script
```

---

## Running Tests

To run unit tests:
```bash
python -m unittest discover tests
```

---

## License

KalaTorch is licensed under the MIT License. See the LICENSE file for details.

---

## Contributing

Contributions are welcome! Please follow these steps:
1. Fork the repository.
2. Create a feature branch (`git checkout -b feature-name`).
3. Commit your changes (`git commit -m 'Add feature'`).
4. Push to the branch (`git push origin feature-name`).
5. Open a pull request.

---

For more details, visit the [repository](https://github.com/Kalasaikamesh944/KalaTorch.git).

