{"version":3,"file":"c.DwDouVrb.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32s2.js"],"sourcesContent":["import { ROM } from \"./rom\";\nimport ESP32S2_STUB from \"./stub_flasher/stub_flasher_32s2.json\";\nexport class ESP32S2ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-S2\";\n        this.IMAGE_CHIP_ID = 2;\n        this.MAC_EFUSE_REG = 0x3f41a044;\n        this.EFUSE_BASE = 0x3f41a000;\n        this.UART_CLKDIV_REG = 0x3f400014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x60000078;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x3f402000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_W0_OFFS = 0x58;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.TEXT_START = ESP32S2_STUB.text_start;\n        this.ENTRY = ESP32S2_STUB.entry;\n        this.DATA_START = ESP32S2_STUB.data_start;\n        this.ROM_DATA = ESP32S2_STUB.data;\n        this.ROM_TEXT = ESP32S2_STUB.text;\n    }\n    async getPkgVersion(loader) {\n        const numWord = 3;\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const addr = block1Addr + 4 * numWord;\n        const word3 = await loader.readReg(addr);\n        const pkgVersion = (word3 >> 21) & 0x0f;\n        return pkgVersion;\n    }\n    async getChipDescription(loader) {\n        const chipDesc = [\"ESP32-S2\", \"ESP32-S2FH16\", \"ESP32-S2FH32\"];\n        const pkgVer = await this.getPkgVersion(loader);\n        if (pkgVer >= 0 && pkgVer <= 2) {\n            return chipDesc[pkgVer];\n        }\n        else {\n            return \"unknown ESP32-S2\";\n        }\n    }\n    async getChipFeatures(loader) {\n        const features = [\"Wi-Fi\"];\n        const pkgVer = await this.getPkgVersion(loader);\n        if (pkgVer == 1) {\n            features.push(\"Embedded 2MB Flash\");\n        }\n        else if (pkgVer == 2) {\n            features.push(\"Embedded 4MB Flash\");\n        }\n        const numWord = 4;\n        const block2Addr = this.EFUSE_BASE + 0x05c;\n        const addr = block2Addr + 4 * numWord;\n        const word4 = await loader.readReg(addr);\n        const block2Ver = (word4 >> 4) & 0x07;\n        if (block2Ver == 1) {\n            features.push(\"ADC and temperature sensor calibration in BLK2 of efuse\");\n        }\n        return features;\n    }\n    async getCrystalFreq(loader) {\n        return 40;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32S2ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","MAC_EFUSE_REG","EFUSE_BASE","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_W0_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","TEXT_START","ESP32S2_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","getPkgVersion","loader","addr","readReg","getChipDescription","chipDesc","pkgVer","getChipFeatures","features","push","getCrystalFreq","_d2h","d","h","toString","length","readMac","mac0","mac1","mac","Uint8Array","getEraseSize","offset","size"],"mappings":"y8LAEO,MAAMA,UAAmBC,EAC5B,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,WACjBD,KAAKE,cAAgB,EACrBF,KAAKG,cAAgB,WACrBH,KAAKI,WAAa,WAClBJ,KAAKK,gBAAkB,WACvBL,KAAKM,iBAAmB,QACxBN,KAAKO,mBAAqB,WAC1BP,KAAKQ,iBAAmB,KACxBR,KAAKS,wBAA0B,KAC/BT,KAAKU,YAAc,CACf,MAAO,EACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,OAAQ,IAEZV,KAAKW,aAAe,WACpBX,KAAKY,aAAe,GACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKe,YAAc,GACnBf,KAAKgB,mBAAqB,GAC1BhB,KAAKiB,mBAAqB,GAC1BjB,KAAKkB,WAAaC,EAClBnB,KAAKoB,MAAQD,EACbnB,KAAKqB,WAAaF,EAClBnB,KAAKsB,SAAWH,EAChBnB,KAAKuB,SAAWJ,CACxB,CACI,mBAAMK,CAAcC,GAChB,MAEMC,EADa1B,KAAKI,WAAa,GACX,GAG1B,aAFoBqB,EAAOE,QAAQD,IACN,GAAM,EAE3C,CACI,wBAAME,CAAmBH,GACrB,MAAMI,EAAW,CAAC,WAAY,eAAgB,gBACxCC,QAAe9B,KAAKwB,cAAcC,GACxC,OAAIK,GAAU,GAAKA,GAAU,EAClBD,EAASC,GAGT,kBAEnB,CACI,qBAAMC,CAAgBN,GAClB,MAAMO,EAAW,CAAC,SACZF,QAAe9B,KAAKwB,cAAcC,GAC1B,GAAVK,EACAE,EAASC,KAAK,sBAEC,GAAVH,GACLE,EAASC,KAAK,sBAElB,MAEMP,EADa1B,KAAKI,WAAa,GACX,GAM1B,OAHiB,UAFGqB,EAAOE,QAAQD,IACP,EAAK,IAE7BM,EAASC,KAAK,2DAEXD,CACf,CACI,oBAAME,CAAeT,GACjB,OAAO,EACf,CACI,IAAAU,CAAKC,GACD,MAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CAC1C,CACI,aAAMG,CAAQf,GACV,IAAIgB,QAAahB,EAAOE,QAAQ3B,KAAKG,eACrCsC,KAAgB,EAChB,IAAIC,QAAajB,EAAOE,QAAQ3B,KAAKG,cAAgB,GACrDuC,EAAQA,IAAS,EAAK,MACtB,MAAMC,EAAM,IAAIC,WAAW,GAO3B,OANAD,EAAI,GAAMD,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,EACTC,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EACDzC,KAAKmC,KAAKQ,EAAI,IAClB,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,GAC1B,CACI,YAAAE,CAAaC,EAAQC,GACjB,OAAOA,CACf","x_google_ignoreList":[0]}