Metadata-Version: 2.1
Name: py-ldlm
Version: 1.0.0
Summary: LDLM client library
Author-email: Ian Moore <imoore76@yahoo.com>
License: 
                                         Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Repository, https://github.com/imoore76/py-ldlm/
Project-URL: Documentation, https://github.com/imoore76/py-ldlm/README.md
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: grpcio
Requires-Dist: google-api-python-client
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-asyncio; extra == "test"
Requires-Dist: frozendict; extra == "test"

# py-ldlm

An LDLM (http://github.com/imoore76/go-ldlm) client library providing Python sync and async clients.

## Installation

```
pip3 install py-ldlm
```

## Usage

### Create a Client
```python
from ldlm import Client

c = Client("server:3144")
```

or an asyncio client

```python
from ldlm import AsyncClient

c = AsyncClient("server:3144")
```


#### Client Options
| Name | Default | Description |
|:--- | :--- | :--- |
| `password` | `None` | Password to use for LDLM server |
| `retries ` | `-1` | Number or times to retry an RPC call when the LDLM server is down. `-1` for infinite |
| `retry_delay_seconds` | `5` | Number of seconds to wait between retry attempts |
| `auto_refresh_locks` | `True` | Automatically refresh locks in a background thread (or async task) when a lock timeout is specified for a lock |
| `tls` | `None` | An `ldlm.TLSConfig` instance or `None` to disable TLS |


#### TLSConfig

`ldlm.TLSConfig` options. All default to `None`.
| Name | Description |
| :--- | :--- |
| `ca_file` | Path to the CA certificate file to use. |
| `cert_file` | Path to the client certificate file to use when LDLM is configured for two-way TLS |
| `key_file` | Path to the file containing the key for the `cert_file` |

If you do not need to specify any of these, but your LDLM server is configured to use TLS, use an empty `TLSConfig()` object.

### Basic Concepts

Locks in an LDLM server generally live until the client unlocks the lock or disconnects. If a client dies while holding a lock, the disconnection is detected and handled in LDLM by releasing the lock.

Depending on your LDLM server configuration, this feature may be disabled and `lock_timeout_seconds` would be used to specify the maximum amount of time a lock can remain locked without being refreshed. If you've specified (or left unspecified) `auto_refresh_locks=True` when instantiating the LDLM client, it will take care of refreshing locks in the background for you. Otherwise, you must periodically call `c.refresh_lock()` yourself &lt; the lock timeout interval.

To `unlock()` or refresh a lock, you must use the lock key that was issued from the lock request's response. This is exemplified further in the examples.

### Lock

`lock()` attempts to acquire a lock in LDLM. It will block until the lock is acquired or until `wait_timeout_seconds` has elapsed (if specified). 

If you have set `wait_timeout_seconds`, the lock returned may not be locked because `wait_timeout_seconds` seconds have elapsed. In this case, be sure to check the `locked` property of the returned lock to determine when the lock was acquired or not. Locks returned without a `wait_timeout_seconds` will always be locked.

Locks also have a `size` (default: 1), which is the maximum number of concurrent locks that can be held. The size of a lock is set by the first client that obtains the lock. If subsequent calls to a acquire this lock (from the same or other clients) specify a different size, a `LockSizeMismatchError` exception will be raised.

#### Examples

Simple lock
```python
lock = c.lock("my-task")

# Do task

c.unlock("my-task", key=lock.key)
```

Async lock
```python
lock = await c.lock("my-task")

# Do task

await c.unlock("my-task", lock.key)
```

Wait timeout
```python
lock = c.lock("my-task", wait_timeout_seconds=30)

if not lock.locked:
    print("Could not obtain lock within the wait timeout")
    return

# Do task

c.unlock("my-task", lock.key)
```

Async wait timeout
```python
lock = await c.lock("my-task", wait_timeout_seconds=30)

if not lock.locked:
    print("Could not obtain lock within the wait timeout")
    return

# Do task

await c.unlock("my-task", lock.key)
```

### Lock Context
`lock_context()` behaves exactly like `lock()`, but will will unlock the lock for you when the context is exited.

#### Examples
Simple lock context
```python
with c.lock_context("my-task"):
    # Do task

```

Async lock context
```python
async with c.lock_context("my-task")
    # Do task

```

Wait timeout context
```python
with c.lock_context("my-task", wait_timeout_seconds=30) as lock

    if not lock.locked:
        print("Could not obtain lock within the wait timeout")
        return

    # Do task

```

Async wait timeout context
```python
async with c.lock_context("my-task", wait_timeout_seconds=30) as lock:

    if not lock.locked:
        print("Could not obtain lock within the wait timeout")
        return

    # Do task

```

### Try Lock
`try_lock()` attempts to acquire a lock and immediately returns; whether the lock was acquired or not. You must inspect the returned lock's `locked` property to determine if it was acquired.

#### Examples

Simple try lock
```python
lock = c.try_lock("my-task")

if not lock.locked:
    return

# Do task

c.unlock("my-task", key=lock.key)
```

Async lock
```python
lock = await c.try_lock("my-task")

if not lock.locked:
    return

# Do task

await c.unlock("my-task", lock.key)
```

### Try Lock Context
`try_lock_context()` behaves exactly like `try_lock_context()`, but will will unlock the lock for you (if the lock was acquired) when the context is exited.

#### Examples
Simple try lock context
```python
with c.try_lock_context("my-task") as lock:
    if lock.locked:
        # Do task

```

Async try lock context
```python
async with c.try_lock_context("my-task") as lock:
    if lock.locked:
        # Do task

```

### Unlock
`unlock()` unlocks the specified lock and stops any lock refresh job that may be associated with the lock. It must be passed the key that was issued when the lock was acquired. Using a different key will result in an error returned from LDLM and an exception raised in the client.


#### Examples
Simple unlock
```python
unlock("my_task", lock.key)
```

Async unlock
```python
await unlock("my_task", lock.key)
```

### Refresh Lock
As explained in [Basic Concepts](#basic-concepts), you may specify a lock timeout using a `lock_timeout_seconds` argument to any of the `*lock*()` methods. When you do this and leave the client option `auto_refresh_locks=True`, the client will refresh the lock in the background (using a background thread or async task) without you having to do anything. If, for some reason, you want to disable auto refresh, you will have to refresh the lock before it times out using the `refresh_lock()` method. It takes the following arguments

* `name` - name of the lock
* `key` - key for the lock
* `lock_timeout_seconds` - the new lock expiration timeout (or the same timeout if you'd like)

#### Examples
```python
lock = c.lock("task1-lock", lock_timeout_seconds=300)

# do some work, then

c.refresh_lock("task1-lock", l.key, lock_timeout_seconds=300)

# do some more work, then

c.refresh_lock("task1-lock", l.key, lock_timeout_seconds=300)

# do some more work and finally

c.unlock("task1-lock", l.key)
```

## Common Patterns

### Primary / Secondary Failover

Using a lock, it is relatively simple to implement primary / secondary (or secondaries) failover by running something similar to the following in each server application:
```python
lock = client.lock("application-primary")

if not lock.locked:
    # This should not happen
    raise RuntimeException("error: lock returned but not locked")

logger.info("Became primary. Performing work...")

# Do work. Lock will be unlocked if this process dies.

```

### Task Locking

In some queue / worker patterns it may be necessary to lock tasks while they are being performed to avoid duplicate work. This can be done using try lock:

```python                                                       

while True:

    work_item = queue.Get()

    lock = client.try_lock(work_item.name)
    if not lock.locked:
        log.debug(f"Work {work_item.name} already in progress");
        continue

    # do work

    client.unlock(lock.name, lock.key)
```

### Resource Utilization Limiting

In some applications it may be necessary to limit the number of concurrent operations on a resource. This can be implemented using lock size:

```python
# Code in each client to restrict the number of concurrent ElasticSearch operations to 10
lock = client1.lock("ElasticSearchSlot", size=10)

if not lock.locked:
    raise RuntimeException("error: lock returned but not locked")

# Perform ES operation

client1.unlock(lock.name, lock.key)
```

Remember - the size of a lock is set by the first client that obtains the lock. All subsequent calls to obtain that lock must use the same size parameter.

## Exceptions

The following exceptions are defined in the `exceptions` module and may raised by the client:

| Exception | Description |
| :--- | :--- |
| `LDLMError` | An unknown error (or error that doesn't have a specific code) occurred. Inspect `message` |
| `LockDoesNotExistError` | The lock attempted to unlock or refresh does not exist |
| `InvalidLockKeyError` | The supplied key was not valid for the lock |
| `NotLockedError` | The lock was not locked when `unlock()` was called. |
| `LockDoesNotExistOrInvalidKeyError` | The lock does not exist or the key is not valid when refreshing a lock |
| `LockSizeMismatchError` | The lock Size specified does not match the actual size of the lock |
| `InvalidLockSizeError` | The lock size specified is not > 0 |

All exceptions are subclasses of `LDLMError`.

## License

Apache 2.0; see [`LICENSE`](LICENSE) for details.

## Contributing

See [`CONTRIBUTING.md`](CONTRIBUTING.md) for details.

## Disclaimer

This project is not an official Google project. It is not supported by Google and Google specifically disclaims all warranties as to its quality, merchantability, or fitness for a particular purpose.

