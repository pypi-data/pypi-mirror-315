Index: example_scripts/trace_loop_splk_pypi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\n\nfrom opentelemetry import trace\n\nSERVICE_NAME = \"my-otel-test\"\nNUM_ADDS = 12\n\nif __name__ == \"__main__\":\n    tracer = trace.get_tracer(\"my-tracer\")\n    for i in range(NUM_ADDS):\n        with tracer.start_as_current_span(\"my-span\"):\n            print(f\"simple_loop.py: {i+1}/{NUM_ADDS}\")\n            time.sleep(0.5)\n\n\nclass MyOtelTest:\n    def requirements(self):\n        return (\"splunk-opentelemetry[otlp]\",)\n\n    def environment_variables(self):\n        return {\n            \"OTEL_SERVICE_NAME\": SERVICE_NAME,\n        }\n\n    def wrapper_command(self):\n        return \"opentelemetry-instrument\"\n\n    def on_start(self):\n        return None\n\n    def on_stop(self, telemetry, stdout: str, stderr: str, returncode: int) -> None:\n        print(f\"script completed with return code {returncode}\")\n\n    def is_http(self):\n        return False\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example_scripts/trace_loop_splk_pypi.py b/example_scripts/trace_loop_splk_pypi.py
--- a/example_scripts/trace_loop_splk_pypi.py	(revision 626622e13f64082aa505ba0644d47dc43b26dfda)
+++ b/example_scripts/trace_loop_splk_pypi.py	(date 1724878163542)
@@ -1,16 +1,11 @@
-import time
+from lib import trace_loop
 
-from opentelemetry import trace
 
 SERVICE_NAME = "my-otel-test"
 NUM_ADDS = 12
 
 if __name__ == "__main__":
-    tracer = trace.get_tracer("my-tracer")
-    for i in range(NUM_ADDS):
-        with tracer.start_as_current_span("my-span"):
-            print(f"simple_loop.py: {i+1}/{NUM_ADDS}")
-            time.sleep(0.5)
+    trace_loop(NUM_ADDS)
 
 
 class MyOtelTest:
Index: example_scripts/trace_loop_splk_whl.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example_scripts/trace_loop_splk_whl.py b/example_scripts/trace_loop_splk_whl.py
new file mode 100644
--- /dev/null	(date 1724878004984)
+++ b/example_scripts/trace_loop_splk_whl.py	(date 1724878004984)
@@ -0,0 +1,30 @@
+from lib import trace_loop
+
+WHL = "/Users/pcollins/github/signalfx/sop-3/splunk-opentelemetry/dist/splunk_opentelemetry-0.0.1-py3-none-any.whl"
+
+SERVICE_NAME = "my-otel-test"
+NUM_ADDS = 12
+
+if __name__ == "__main__":
+    trace_loop(NUM_ADDS)
+
+class MyOtelTest:
+    def requirements(self):
+        return (WHL,)
+
+    def environment_variables(self):
+        return {
+            "OTEL_SERVICE_NAME": SERVICE_NAME,
+        }
+
+    def wrapper_command(self):
+        return "opentelemetry-instrument"
+
+    def on_start(self):
+        return None
+
+    def on_stop(self, telemetry, stdout: str, stderr: str, returncode: int) -> None:
+        print(f"script completed with return code {returncode}")
+
+    def is_http(self):
+        return False
Index: example_scripts/trace_loop_grpc.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\n\nfrom opentelemetry import trace\n\nSERVICE_NAME = \"my-otel-test\"\nNUM_ADDS = 12\n\nif __name__ == \"__main__\":\n    tracer = trace.get_tracer(\"my-tracer\")\n    for i in range(NUM_ADDS):\n        with tracer.start_as_current_span(\"my-span\"):\n            print(f\"simple_loop.py: {i+1}/{NUM_ADDS}\")\n            time.sleep(0.5)\n\n\n# Since we're not inheriting from the OtelTest base class (to avoid depending on it) we make sure our class name\n# contains \"OtelTest\".\nclass MyOtelTest:\n    def requirements(self):\n        return \"opentelemetry-distro\", \"opentelemetry-exporter-otlp-proto-grpc\"\n\n    def environment_variables(self):\n        return {\n            \"OTEL_SERVICE_NAME\": SERVICE_NAME,\n        }\n\n    def wrapper_command(self):\n        return \"opentelemetry-instrument\"\n\n    def on_start(self):\n        return None\n\n    def on_stop(self, telemetry, stdout: str, stderr: str, returncode: int) -> None:\n        print(f\"script completed with return code {returncode}\")\n        print(f\"telemetry: {telemetry}\")\n\n    def is_http(self):\n        return False\n
===================================================================
diff --git a/example_scripts/trace_loop_grpc.py b/example_scripts/trace_loop_grpc.py
--- a/example_scripts/trace_loop_grpc.py	(revision 626622e13f64082aa505ba0644d47dc43b26dfda)
+++ b/example_scripts/trace_loop_grpc.py	(date 1724878412561)
@@ -1,16 +1,10 @@
-import time
-
-from opentelemetry import trace
+from lib import trace_loop
 
 SERVICE_NAME = "my-otel-test"
 NUM_ADDS = 12
 
 if __name__ == "__main__":
-    tracer = trace.get_tracer("my-tracer")
-    for i in range(NUM_ADDS):
-        with tracer.start_as_current_span("my-span"):
-            print(f"simple_loop.py: {i+1}/{NUM_ADDS}")
-            time.sleep(0.5)
+    trace_loop(NUM_ADDS)
 
 
 # Since we're not inheriting from the OtelTest base class (to avoid depending on it) we make sure our class name
