Metadata-Version: 2.1
Name: pydatamax
Version: 0.1.5
Summary: A library for parsing and converting various file formats.
Home-page: https://github.com/cosco/datamax
Author: hzb | ccy
Author-email: zhibaohe@hotmail.com | cy.kron@foxmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ebooklib
Requires-Dist: python-docx
Requires-Dist: beautifulsoup4
Requires-Dist: python-dotenv
Requires-Dist: minio
Requires-Dist: loguru
Requires-Dist: tqdm
Requires-Dist: oss2
Requires-Dist: python-docx
Requires-Dist: openai
Requires-Dist: jionlp
Requires-Dist: chardet
Requires-Dist: python-pptx
Requires-Dist: paddlepaddle
Requires-Dist: paddlepaddle-gpu
Requires-Dist: openpyxl
Requires-Dist: paddleocr==2.8.1
Requires-Dist: pymupdf
Requires-Dist: langchain_community==0.2.9
Requires-Dist: premailer
Requires-Dist: setuptools==75.3.0
Requires-Dist: docx2markdown
Requires-Dist: tiktoken

# DataMax

<p align="center">
  <a href="./README.md"><img alt="README in English" src="https://img.shields.io/badge/English-d9d9d9"></a>
  <a href="./README_zh.md"><img alt="简体中文版自述文件" src="https://img.shields.io/badge/简体中文-d9d9d9"></a>
</p>

## Project Introduction
The Text Processing Tool is a multifunctional data processing project designed to provide an efficient and easy-to-use way to handle various formats of text files. The project supports reading, converting, and extracting from common text formats such as PDF, HTML, DOCX/DOC, PPT/PPTX, EPUB, images (.jpg | .png), and TXT.


## Installation Guide

## Install

### Linux（Debian/Ubuntu）
```
sudo apt-get update
sudo apt-get install libreoffice
```
### Windows
```
Windows install LibreOffice：https://www.libreoffice.org/download/download-libreoffice/?spm=5176.28103460.0.0.5b295d275bpHzh
$env:PATH += ";C:\Program Files\LibreOffice\program"
```
### Check LibreOffice Installation
```
soffice --version
```
### Install Dependencies
```
pip install --no-cache-dir -r requirements.txt -i http://repo-reader:6Np2jcK%248Fqp@nexus.csntcorp.com/repository/aliyun_pipy/simple/ --trusted-host nexus.csntcorp.com
```

1. Clone the repository to local:
   ```bash
   git clone 
   ```
2. Enter the project directory and create a virtual environment (e.g., uv):
   ```bash
   cd DataMax
   uv init
   uv add requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple
   uv sync
   . .venv/bin/activate
   ```


## Features
- **Multi-format Support**: Capable of handling PDF, HTML, DOCX, and TXT, among other text file types.
- **Content Extraction**: Provides powerful content extraction capabilities to accurately extract needed information from complex document structures.
- **Data Conversion**: Supports conversion of processed data to Markdown format for further data analysis.
- **Batch Processing**: Capable of processing a large number of files at once, improving work efficiency.
- **Custom Configuration**: Users can adjust processing parameters according to their needs to meet various business requirements.
- **Cross-platform Compatibility**: This SDK can run on multiple operating systems including Windows, MacOS, and Linux.


## Technology Stack
- **Programming Language**: Python >= 3.9
- **Dependency Libraries**:
  - PyMuPDF: For parsing PDF files.
  - BeautifulSoup: For parsing HTML files.
  - python-docx: For parsing DOCX files.
  - pandas: For data processing and conversion.
  - paddleocr: For parsing PDF scans, forms, and images.
- **Development Environment**: Visual Studio Code or PyCharm
- **Version Control**: Git


## Usage Instructions
### Install SDK
- Installation Commands:
  ```bash
  ## Local installation
  python setup.py sdist bdist_wheel
  pip install dist/datamax-0.1.3-py3-none-any.whl
  ```
- Import Code
    ```python
    from datamax import DataMaxParser
    ## Handling a single file in two ways
    # 1. List of length 1
    data = DataMaxParser(file_path=[r"docx_files_example/ShipViewOverview.doc"])
    data = data.get_data()
    # 2. String
    data = DataMaxParser(file_path=r"docx_files_example/ShipViewOverview.doc")
    data = data.get_data()
    
    ## Handling multiple files
    ## 1. List of length n
    data = DataMaxParser(file_path=[r"docx_files_example/ShipViewOverview1.doc", r"docx_files_example/ShipViewOverview2.doc"])
    data = data.get_data()
    
    ## 2. Passing a folder string
    data = DataMaxParser(file_path=r"docx_files_example/")
    data = data.get_data()
    ```

## Examples
```python
  ## docx | doc | epub | html | txt | jpg | png | ppt | pptx
  from datamax import DataMaxParser
  data = DataMaxParser(file_path=r"docx_files_example/ShipViewOverview.doc", to_markdown=True)
  """
  Parameters: 
  file_path: File relative path / File absolute path
  to_markdown: Whether to convert to markdown (default value False, returns text directly) This parameter only supports Word files (doc | docx)
  """
  

  ## pdf
  from datamax import DataMaxParser
  data = DataMaxParser(file_path=r"docx_files_example/ShipViewOverview.pdf", use_ocr=True, use_gpu=True, gpu_id=0)
  """
  Parameters: 
  file_path: File relative path / File absolute path
  use_ocr: Whether to use OCR (True returns markdown, False returns plain text)
  use_gpu: Whether to use GPU (ensure CUDA environment is available)
  gpu_id: GPU card (default 6th card)
  """
```

## Contribution Guidelines
We welcome any form of contribution, whether it's reporting bugs, suggesting new features, or directly submitting code improvements. Please read our [Contributor Guidelines](CONTRIBUTING.md) to get started.

## License
This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Contact
If you encounter any issues during use, or have any suggestions and feedback, please contact us through the following methods:
- Email: cy.kron@foxmail.com | zhibaohe@hotmail.com
- Project Homepage: [GitHub Project Link](xxxx)

## RoadMap
- [x] Implement OSS Data Class
- [x] Implement OBS Data Class
- [x] Implement PGSQL Data Class
- [x] Implement Local Data Class
- [x] OSS Data Class should be able to obtain bucket information, metadata, and file lists from the OSS data source
- [x] OBS Data Class should be able to obtain bucket information, metadata, and file lists from the OBS data source
- [ ] PGSQL Data Class should be able to obtain schema information, metadata, and table structures from the PGSQL data source


- (Optional) Data Classes (Access Data Sources) / Direct Local Reading DataSourceClass
    - MinIO
    - OSS
    - OBS
    - PostgreSQL

DataLoader.load(fp: file_path, ) -> local path 

DataLoader.load(source: DataSourceClass, ) -> Access data source, return metadata of the data source: able to know file size & file path & file download address & storage space occupied by the data source ->

- Data Loading Class (Load and read PDF, Word, Excel. Able to load the following types of data from the data source on demand)
    - .pdf
    - .pdf（Image type / Scanned copy）
    - .docx
    - .html
    - .pptx
    - .epub
    - .txt
    - .md
    ---
    - .csv
    - .json
    - .xlsx
    ---
    - http / https
    --- 
    - Multimodal
        - .png
        - .jpg
        - .jpeg
        - .bmp
        - .gif



class DataLoaderClass:
    def read_docx(self, DocxInputVo):  # TODO: ccy
        ...
        
    def read_pdf():
        ...


- Data Parsing Class (Parsing algorithms, parsing logic & output string objects)
    - .pdf
    - .pdf (Image type / Scanned copy) PaddleOCR / AI LAB OCR /  xx OCR
    - .doc
    - .docx
    - .html
    - .ppt
    - .pptx
    - .epub
    - .txt
    - .md
    ---
    - .csv
    - .json
    - .xlsx
    - .xls
    ---
    - http / https
    --- 
    - Multimodal
        - .png
        - .jpg
        - .jpeg
        - .bmp
        - .gif


- Data Cleaning Class (Input: String object, according to cleaning rules, get cleaned markdown format text. Output: markdown)

- Large Model Class (Pre-tagging)

- Data Output Class (Unified format)


## Structure
```bash
├── api            # Various interfaces exposed by the project
├── datamax        # Core functions and classes of various SDKs
├── dockerfiles    # Docker configuration files
├── docs           # Project documentation
├── example        # Example code
├── README.md      # Project description file
├── scripts        # Various scripts
└── test           # Test code
```



## Standards

1. Class names are declared using PascalCase
2. Function names are declared using lowercase and underscores
3. Function input and output need to be declared with data types using colons
4. Remove print logger before pushing code
5. Rebase:
    1. git add .
    2. git commit -m ":boom: new feature"
    3. git pull --rebase
    4. git push
