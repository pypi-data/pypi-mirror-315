"""
Code for generating package contents: Pydantic models and test JSON.
This is typically not needed at runtime.
"""
from __future__ import annotations
from pathlib import Path
from urllib.parse import urljoin
from linkml.generators import PydanticGenerator
import requests
from linkml_runtime.loaders import JSONLoader

here = Path(__file__)
package = here.parent

def generate_models():
    """
    Re-generates models.py, which contains the autogenerated code
    """
    dest = package / "models.py"
    schemas = package / "schemas.yml"
    dest.write_text(
        PydanticGenerator(
            schema=schemas.read_text()
        ).serialize()
    )

def fetch_file(base_url: str, file_url: str) -> Path:
    dest = package / file_url
    # Skip already downloaded files
    if not dest.exists():
        print(f"Downloading {file_url}")
        dest.parent.mkdir(parents=True, exist_ok=True)
        with dest.open("w") as fp:
            fp.write(requests.get(urljoin(base_url, file_url)).text)
    else:
        print(f"Skipping {file_url}")
    return dest

def download_test_files():
    # We can't import until the models are generated
    from json_ld_test.models import TopLevelManifest, TestManifest, PositiveEvaluationTest
    loader = JSONLoader()
    base_url = "https://w3c.github.io/json-ld-api/tests/"

    # Load the top level manifest but don't save it
    top_manifest: TopLevelManifest = loader.load(urljoin(base_url, "manifest.jsonld"), TopLevelManifest)

    for sub_manifest_path in top_manifest.sequence:
        # Save each sub-manifest to include in the package
        fetched_manifest = fetch_file(base_url, sub_manifest_path)
        sub_manifest: TestManifest = loader.load(str(fetched_manifest), TestManifest)

        for test in sub_manifest.sequence:
            # Save each test file
            fetch_file(base_url, test.input)
            if isinstance(test, PositiveEvaluationTest):
                fetch_file(base_url, test.expect)
            if test.context is not None:
                fetch_file(base_url, test.context)
            if test.option is not None and test.option.expandContext is not None:
                fetch_file(base_url, test.option.expandContext)

def main():
    generate_models()
    download_test_files()

if __name__ == "__main__":
    main()